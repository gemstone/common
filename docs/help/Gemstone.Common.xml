<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.Common</name>
  </assembly>
  <members>
    <member name="T:Gemstone.BaselineTimeInterval">
      <summary>
            Time intervals enumeration used by <see cref="M:Gemstone.Ticks.BaselinedTimestamp(Gemstone.BaselineTimeInterval)" /> method.
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Second">
      <summary>
            Baseline timestamp to the second (i.e., starting at zero milliseconds).
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Minute">
      <summary>
            Baseline timestamp to the minute (i.e., starting at zero seconds and milliseconds).
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Hour">
      <summary>
            Baseline timestamp to the hour (i.e., starting at zero minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Day">
      <summary>
            Baseline timestamp to the day (i.e., starting at zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Month">
      <summary>
            Baseline timestamp to the month (i.e., starting at day one, zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="F:Gemstone.BaselineTimeInterval.Year">
      <summary>
            Baseline timestamp to the year (i.e., starting at month one, day one, zero hours, minutes, seconds and milliseconds).
            </summary>
    </member>
    <member name="T:Gemstone.BigEndian">
      <summary>
            Defines a set of big-endian byte order interoperability functions.
            </summary>
      <remarks>
            This class is setup to support aggressive in-lining of big endian conversions. Bounds
            will not be checked as part of this function call, if bounds are violated, the exception
            will be thrown at the <see cref="T:System.Array" /> level.
            </remarks>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.BigEndianOrder">
      <summary>
            Represents a big-endian byte order interoperability class.
            </summary>
    </member>
    <member name="M:Gemstone.BigEndianOrder.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:Gemstone.BigEndianOrder" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.BigEndianOrder.Default">
      <summary>
            Returns the default instance of the <see cref="T:Gemstone.BigEndianOrder" /> class.
            </summary>
    </member>
    <member name="T:Gemstone.BitMath">
      <summary>
            Contains some random and useful functions.
            </summary>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsCleared(System.UInt32)">
      <summary>
            Counts the number of bits that are not set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsCleared(System.UInt64)">
      <summary>
            Counts the number of bits that are not set
            </summary>
      <param name="value"></param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsSet(System.UInt32)">
      <summary>
            Counts the number of bits that are set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsSet(System.UInt64)">
      <summary>
            Counts the number of bits that are set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingOnes(System.UInt32)">
      <summary>
            Counts the number of consecutive 1's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingOnes(System.UInt64)">
      <summary>
            Counts the number of consecutive 1's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingZeros(System.UInt32)">
      <summary>
            Counts the number of consecutive 0's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the highest bit working down.</returns>
      <remarks>
            Unfortunately, c# cannot call the cpu instruction clz
            Example from http://en.wikipedia.org/wiki/Find_first_set
            </remarks>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingZeros(System.UInt64)">
      <summary>
            Counts the number of consecutive 0's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the highest bit working down.</returns>
      <remarks>
            Unfortunately, c# cannot call the cpu instruction clz
            Example from http://en.wikipedia.org/wiki/Find_first_set
            </remarks>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingOnes(System.UInt32)">
      <summary>
            Counts the number of consecutive 1's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingOnes(System.UInt64)">
      <summary>
            Counts the number of consecutive 1's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingZeros(System.UInt32)">
      <summary>
            Counts the number of consecutive 0's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the lowest bit working up.</returns>
      <remarks>
            Unfortunately, c# cannot call the cpu instruction ctz
            Example from http://en.wikipedia.org/wiki/Find_first_set
            </remarks>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingZeros(System.UInt64)">
      <summary>
            Counts the number of consecutive 0's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the lowest bit working up.</returns>
      <remarks>
            Unfortunately, c# cannot call the cpu instruction ctz
            Example from http://en.wikipedia.org/wiki/Find_first_set
            </remarks>
    </member>
    <member name="M:Gemstone.BitMath.CreateBitMask(System.Int32)">
      <summary>
            Creates a bit mask for a number with the given number of bits.
            </summary>
      <param name="bitCount">Bit count.</param>
      <returns>Bit mask for a number with the given number of bits.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetClearedBitPositions(System.UInt32)">
      <summary>
            Returns the bit position for every bit that is cleared in the provided value.
            Bit positions are defined as 0-31;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all cleared bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetClearedBitPositions(System.UInt64)">
      <summary>
            Returns the bit position for every bit that is cleared in the provided value.
            Bit positions are defined as 0-63;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all cleared bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetSetBitPositions(System.UInt32)">
      <summary>
            Returns the bit position for every bit that is set in the provided value.
            Bit positions are defined as 0-31;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all set bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetSetBitPositions(System.UInt64)">
      <summary>
            Returns the bit position for every bit that is set in the provided value.
            Bit positions are defined as 0-63;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all set bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.Int32)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <see pref="value" /> is less than zero</exception>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.Int64)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <see pref="value" /> is less than zero</exception>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.UInt32)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.UInt64)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundDownToNearestPowerOfTwo(System.UInt32)">
      <summary>
            Rounds a number down to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If value is zero, 1 is returned.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundDownToNearestPowerOfTwo(System.UInt64)">
      <summary>
            Rounds a number down to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If value is zero, one is returned.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundUpToNearestPowerOfTwo(System.UInt32)">
      <summary>
            Rounds a number up to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If the value is larger than the largest power of 2. It is rounded down.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
      <remarks>
            Method based on a method found at: http://graphics.stanford.edu/~seander/bithacks.htm
            Subtitle: Round up to the next highest power of 2 
            </remarks>
    </member>
    <member name="M:Gemstone.BitMath.RoundUpToNearestPowerOfTwo(System.UInt64)">
      <summary>
            Rounds a number up to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If the value is larger than the largest power of 2. It is rounded down.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
      <remarks>
            Method based on a method found at: http://graphics.stanford.edu/~seander/bithacks.htm
            Subtitle: Round up to the next highest power of 2 
            </remarks>
    </member>
    <member name="T:Gemstone.Bits">
      <summary>
            Represents bits in a signed or unsigned integer value.
            </summary>
    </member>
    <member name="F:Gemstone.Bits.Nil">
      <summary>No bits set (0x0000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit00">
      <summary>Bit 00 (0x0000000000000001)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit01">
      <summary>Bit 01 (0x0000000000000002)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit02">
      <summary>Bit 02 (0x0000000000000004)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit03">
      <summary>Bit 03 (0x0000000000000008)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit04">
      <summary>Bit 04 (0x0000000000000010)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit05">
      <summary>Bit 05 (0x0000000000000020)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit06">
      <summary>Bit 06 (0x0000000000000040)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit07">
      <summary>Bit 07 (0x0000000000000080)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit08">
      <summary>Bit 08 (0x0000000000000100)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit09">
      <summary>Bit 09 (0x0000000000000200)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit10">
      <summary>Bit 10 (0x0000000000000400)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit11">
      <summary>Bit 11 (0x0000000000000800)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit12">
      <summary>Bit 12 (0x0000000000001000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit13">
      <summary>Bit 13 (0x0000000000002000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit14">
      <summary>Bit 14 (0x0000000000004000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit15">
      <summary>Bit 15 (0x0000000000008000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit16">
      <summary>Bit 16 (0x0000000000010000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit17">
      <summary>Bit 17 (0x0000000000020000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit18">
      <summary>Bit 18 (0x0000000000040000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit19">
      <summary>Bit 19 (0x0000000000080000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit20">
      <summary>Bit 20 (0x0000000000100000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit21">
      <summary>Bit 21 (0x0000000000200000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit22">
      <summary>Bit 22 (0x0000000000400000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit23">
      <summary>Bit 23 (0x0000000000800000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit24">
      <summary>Bit 24 (0x0000000001000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit25">
      <summary>Bit 25 (0x0000000002000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit26">
      <summary>Bit 26 (0x0000000004000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit27">
      <summary>Bit 27 (0x0000000008000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit28">
      <summary>Bit 28 (0x0000000010000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit29">
      <summary>Bit 29 (0x0000000020000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit30">
      <summary>Bit 30 (0x0000000040000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit31">
      <summary>Bit 31 (0x0000000080000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit32">
      <summary>Bit 32 (0x0000000100000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit33">
      <summary>Bit 33 (0x0000000200000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit34">
      <summary>Bit 34 (0x0000000400000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit35">
      <summary>Bit 35 (0x0000000800000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit36">
      <summary>Bit 36 (0x0000001000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit37">
      <summary>Bit 37 (0x0000002000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit38">
      <summary>Bit 38 (0x0000004000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit39">
      <summary>Bit 39 (0x0000008000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit40">
      <summary>Bit 40 (0x0000010000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit41">
      <summary>Bit 41 (0x0000020000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit42">
      <summary>Bit 42 (0x0000040000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit43">
      <summary>Bit 43 (0x0000080000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit44">
      <summary>Bit 44 (0x0000100000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit45">
      <summary>Bit 45 (0x0000200000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit46">
      <summary>Bit 46 (0x0000400000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit47">
      <summary>Bit 47 (0x0000800000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit48">
      <summary>Bit 48 (0x0001000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit49">
      <summary>Bit 49 (0x0002000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit50">
      <summary>Bit 50 (0x0004000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit51">
      <summary>Bit 51 (0x0008000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit52">
      <summary>Bit 52 (0x0010000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit53">
      <summary>Bit 53 (0x0020000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit54">
      <summary>Bit 54 (0x0040000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit55">
      <summary>Bit 55 (0x0080000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit56">
      <summary>Bit 56 (0x0100000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit57">
      <summary>Bit 57 (0x0200000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit58">
      <summary>Bit 58 (0x0400000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit59">
      <summary>Bit 59 (0x0800000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit60">
      <summary>Bit 60 (0x1000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit61">
      <summary>Bit 61 (0x2000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit62">
      <summary>Bit 62 (0x4000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit63">
      <summary>Bit 63 (0x8000000000000000)</summary>
    </member>
    <member name="T:Gemstone.ByteEncoding">
      <summary>
            Defines a set of methods used to convert byte buffers to and from user presentable data formats.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.ByteEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Gemstone.ByteEncoding.ASCII">
      <summary>Handles encoding and decoding of a byte buffer into an ASCII character presentation format.</summary>
    </member>
    <member name="P:Gemstone.ByteEncoding.Base64">
      <summary>Handles encoding and decoding of a byte buffer into a base64 presentation format.</summary>
    </member>
    <member name="P:Gemstone.ByteEncoding.BigEndianBinary">
      <summary>
            Handles encoding and decoding of a byte buffer into a big-endian binary (i.e., 0 and 1's) based
            presentation format.
            </summary>
      <remarks>
            Although endianness is typically used in the context of byte order to handle byte
            order swapping), this property allows you visualize "bits" in big-endian order,
            right-to-left. Note that bits are normally stored in the same order as their bytes.
            </remarks>
    </member>
    <member name="P:Gemstone.ByteEncoding.Decimal">
      <summary>Handles encoding and decoding of a byte buffer into an integer-based presentation format.</summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetBytes(System.String)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="value">Encoded string to decode.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="value">Encoded string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetString(System.Byte[])">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <returns>String representation of byte array.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetString(System.Byte[],System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="P:Gemstone.ByteEncoding.Hexadecimal">
      <summary>Handles encoding and decoding of a byte buffer into a hexadecimal-based presentation format.</summary>
    </member>
    <member name="P:Gemstone.ByteEncoding.LittleEndianBinary">
      <summary>
            Handles encoding and decoding of a byte buffer into a little-endian binary (i.e., 0 and 1's) based
            presentation format.
            </summary>
      <remarks>
            Although endianness is typically used in the context of byte order to handle byte
            order swapping), this property allows you visualize "bits" in little-endian order,
            left-to-right. Note that bits are normally stored in the same order as their bytes.
            </remarks>
    </member>
    <member name="F:Gemstone.ByteEncoding.NoSpacing">
      <summary>
            Constant used to specify that "no spacing" should be used for data conversion.
            </summary>
    </member>
    <member name="T:Gemstone.ByteEncoding.ASCIIEncoding">
      <summary>
            Handles conversion of byte buffers to and from a ASCII data format.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.ASCIIEncoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="binaryData">Encoded binary data string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="T:Gemstone.ByteEncoding.Base64Encoding">
      <summary>
            Handles conversion of byte buffers to and from a base64 data format.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.Base64Encoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="binaryData">Encoded binary data string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.Base64Encoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="T:Gemstone.ByteEncoding.BinaryEncoding">
      <summary>
            Handles conversion of byte buffers to and from a binary (i.e., 0 and 1's) data format.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.BinaryEncoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="binaryData">Encoded binary data string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.BinaryEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="T:Gemstone.ByteEncoding.DecimalEncoding">
      <summary>
            Handles conversion of byte buffers to and from a decimal data format.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.DecimalEncoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="decData">Encoded decimal data string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.DecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="T:Gemstone.ByteEncoding.HexadecimalEncoding">
      <summary>
            Handles conversion of byte buffers to and from a hexadecimal data format.
            </summary>
    </member>
    <member name="M:Gemstone.ByteEncoding.HexadecimalEncoding.GetBytes(System.String,System.Char)">
      <summary>Decodes given string back into a byte buffer.</summary>
      <param name="hexData">Encoded hexadecimal data string to decode.</param>
      <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
      <returns>Decoded bytes.</returns>
    </member>
    <member name="M:Gemstone.ByteEncoding.HexadecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
      <summary>Encodes given buffer into a user presentable representation.</summary>
      <param name="bytes">Bytes to encode.</param>
      <param name="offset">Offset into buffer to begin encoding.</param>
      <param name="length">Length of buffer to encode.</param>
      <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
      <returns>String of encoded bytes.</returns>
    </member>
    <member name="T:Gemstone.Common">
      <summary>
            Defines common global functions.
            </summary>
    </member>
    <member name="P:Gemstone.Common.ApplicationName">
      <summary>
            Gets the name of the current application.
            </summary>
    </member>
    <member name="M:Gemstone.Common.GetAvailablePhysicalMemory">
      <summary>
            Gets the available physical system memory.
            </summary>
      <returns>Available physical system memory in bytes.</returns>
    </member>
    <member name="M:Gemstone.Common.GetOSPlatformID">
      <summary>
            Gets the operating system <see cref="T:System.PlatformID" /></summary>
      <returns>The operating system <see cref="T:System.PlatformID" />.</returns>
      <remarks>
            This function will properly detect the platform ID, even if running on Mac.
            </remarks>
    </member>
    <member name="M:Gemstone.Common.GetOSProductName">
      <summary>
            Gets the operating system product name.
            </summary>
      <returns>Operating system product name.</returns>
    </member>
    <member name="M:Gemstone.Common.GetTotalPhysicalMemory">
      <summary>
            Gets the total physical system memory.
            </summary>
      <returns>Total physical system memory in bytes.</returns>
    </member>
    <member name="M:Gemstone.Common.IsDefaultValue(System.Object)">
      <summary>Determines if given item is equal to its default value (e.g., null or 0.0).</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
      <remarks>
            Native types default to zero, not null, therefore this can be used to evaluate if an item is its default (i.e., uninitialized) value.
            </remarks>
    </member>
    <member name="M:Gemstone.Common.IsNonStringReference(System.Object)">
      <summary>Determines if given item is a reference type but not a string.</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumeric(System.Object)">
      <summary>
            Determines if given <paramref name="item" /> is or can be interpreted as numeric.
            </summary>
      <param name="item">Object to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is or can be interpreted as numeric; otherwise, <c>false</c>.</returns>
      <remarks>
            If type of <paramref name="item" /> is a <see cref="T:System.Char" /> or a <see cref="T:System.String" />, then if value can be parsed as a numeric
            value, result will be <c>true</c>.
            </remarks>
    </member>
    <member name="M:Gemstone.Common.IsNumericType``1">
      <summary>
            Determines if <typeparamref name="T" /> is a numeric type, i.e., has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <typeparam name="T">
        <see cref="T:System.Type" /> to check.</typeparam>
      <returns>
        <c>true</c> if <typeparamref name="T" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.Object)">
      <summary>
            Determines if <see cref="T:System.Type" /> of <paramref name="item" /> is a numeric type, i.e., <paramref name="item" />
            is <see cref="T:System.IConvertible" /> and has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="item">Object to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.Type)">
      <summary>
            Determines if <paramref name="type" /> is a numeric type, i.e., has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> to check.</param>
      <returns>
        <c>true</c> if <paramref name="type" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.TypeCode)">
      <summary>
            Determines if <paramref name="typeCode" /> is a numeric type, i.e., one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="typeCode">
        <see cref="T:System.TypeCode" /> value to check.</param>
      <returns>
        <c>true</c> if <paramref name="typeCode" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:Gemstone.Common.IsPosixEnvironment">
      <summary>
            Determines if the current system is a POSIX style environment.
            </summary>
      <remarks>
        <para>
            Since a .NET application compiled under Mono can run under both Windows and Unix style platforms,
            you can use this property to easily determine the current operating environment.
            </para>
        <para>
            This property will return <c>true</c> for both MacOSX and Unix environments. Use the Platform property
            of the <see cref="P:System.Environment.OSVersion" /> to determine more specific platform type, e.g., 
            MacOSX or Unix.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Common.IsReference(System.Object)">
      <summary>Determines if given item is a reference type.</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Gemstone.Common.Max``1(``0[])">
      <summary>Returns the largest item from a list of parameters.</summary>
      <param name="itemList">A variable number of parameters of the specified type .</param>
      <typeparam name="T">Return type <see cref="T:System.Type" /> that is the maximum value in the <paramref name="itemList" />.</typeparam>
      <returns>Result is the maximum value of type <see cref="T:System.Type" /> in the <paramref name="itemList" />.</returns>
    </member>
    <member name="M:Gemstone.Common.Mid``1(``0,``0,``0)">
      <summary>Returns the value that is neither the largest nor the smallest.</summary>
      <param name="value1">Value 1.</param>
      <param name="value2">Value 2.</param>
      <param name="value3">Value 3.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of the objects passed to and returned from this method.</typeparam>
      <returns>Result is the value that is neither the largest nor the smallest.</returns>
    </member>
    <member name="M:Gemstone.Common.Min``1(``0[])">
      <summary>Returns the smallest item from a list of parameters.</summary>
      <param name="itemList">A variable number of parameters of the specified type.</param>
      <typeparam name="T">Return type <see cref="T:System.Type" /> that is the minimum value in the <paramref name="itemList" />.</typeparam>
      <returns>Result is the minimum value of type <see cref="T:System.Type" /> in the <paramref name="itemList" />.</returns>
    </member>
    <member name="M:Gemstone.Common.TypeConvertFromString(System.String,System.Type)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of
            specified type if conversion fails.
            </returns>
      <remarks>
        <para>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert <paramref name="value" />
            to the specified <paramref name="type" />, the best way to make sure <paramref name="value" />
            can be converted back to its original type is to use the same <see cref="T:System.ComponentModel.TypeConverter" /> to
            convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </para>
        <para>
            This function varies from <see cref="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String)" />  in that it
            will use the default value for the <paramref name="type" /> parameter if <paramref name="value" />
            is empty or <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Common.TypeConvertFromString(System.String,System.Type,System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <param name="suppressException">Set to <c>true</c> to suppress conversion exceptions and return <c>null</c>; otherwise, <c>false</c></param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of
            specified type if conversion fails.
            </returns>
      <remarks>
        <para>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert <paramref name="value" />
            to the specified <paramref name="type" />, the best way to make sure <paramref name="value" />
            can be converted back to its original type is to use the same <see cref="T:System.ComponentModel.TypeConverter" /> to
            convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </para>
        <para>
            This function varies from <see cref="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String,System.Globalization.CultureInfo)" />
            in that it will use the default value for the <paramref name="type" /> parameter if
            <paramref name="value" /> is empty or <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Common.TypeConvertToString(System.Object)">
      <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.String" /> using an appropriate <see cref="T:System.ComponentModel.TypeConverter" />.
            </summary>
      <param name="value">Value to convert to a <see cref="T:System.String" />.</param>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
      <remarks>
        <para>
            If <see cref="T:System.ComponentModel.TypeConverter" /> fails, the value's <c>ToString()</c> value will be returned.
            Returned value will never be null, if no value exists an empty string ("") will be returned.
            </para>
        <para>
            You can use the <see cref="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String)" /> string extension
            method or <see cref="M:Gemstone.Common.TypeConvertFromString(System.String,System.Type)" /> to convert the string back to its
            original <see cref="T:System.Type" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Common.TypeConvertToString(System.Object,System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.String" /> using an appropriate <see cref="T:System.ComponentModel.TypeConverter" />.
            </summary>
      <param name="value">Value to convert to a <see cref="T:System.String" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <param name="throwOnFail">Set to <c>true</c> to throw exception if conversion fails; otherwise, <c>false</c> to fall back on <c>.ToString()</c>.</param>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
      <remarks>
        <para>
            If <see cref="T:System.ComponentModel.TypeConverter" /> fails, the value's <c>ToString()</c> value will be returned.
            Returned value will never be null, if no value exists an empty string ("") will be returned.
            </para>
        <para>
            You can use the <see cref="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String,System.Globalization.CultureInfo)" /> string
            extension method or <see cref="!:TypeConvertFromString(string, Type, CultureInfo)" /> to convert
            the string back to its original <see cref="T:System.Type" />.
            </para>
      </remarks>
    </member>
    <member name="T:Gemstone.EnabledState">
      <summary>
            Enumeration that represents a state of either "automatic", "on" or "off".
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.Auto">
      <summary>
            Represents the automatic, i.e., default, state.
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.On">
      <summary>
            Represents the on, i.e., enabled, state.
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.Off">
      <summary>
            Represents the off, i.e., disabled, state.
            </summary>
    </member>
    <member name="T:Gemstone.Encoding7Bit">
      <summary>
            Defines 7-bit encoding functions.
            </summary>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSize(System.UInt32)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure.</param>
      <returns>Number of bytes required to write the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSize(System.UInt64)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure.</param>
      <returns>The number of bytes needed to store the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSizeInt15(System.Int16)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure</param>
      <returns>Number of bytes required to write the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Measure15(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <param name="position">Start position in stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Measure15(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <param name="position">Start position in stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureInt15(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>t7-bit encoded short.</returns>
      <remarks>
            This method will check for the end of the stream.
            </remarks>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>7-bit encoded uint.</returns>
      <remarks>
            This method will check for the end of the stream.
            </remarks>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>7-bit encoded ulong.</returns>
      <remarks>
            This method will check for the end of the stream.
            </remarks>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Action{System.Byte},System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Action{System.Byte},System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.Int32@,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.Int32@,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte[],System.Int32@,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte[],System.Int32@,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Action{System.Byte},System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte*,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write. Cannot be negative.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte*,System.Int32@,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte[],System.Int32@,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="T:Gemstone.Endianness">
      <summary>
            Endian Byte Order Enumeration.
            </summary>
    </member>
    <member name="F:Gemstone.Endianness.BigEndian">
      <summary>
            Big-endian byte order.
            </summary>
    </member>
    <member name="F:Gemstone.Endianness.LittleEndian">
      <summary>
            Little-endian byte order.
            </summary>
    </member>
    <member name="T:Gemstone.EndianOrder">
      <summary>
            Represents an endian byte order interoperability class.
            </summary>
      <remarks>
            Intel systems use little-endian byte order, other systems, such as Unix, use big-endian byte ordering.
            Little-endian ordering means bits are ordered such that the bit whose in-memory representation is right-most is the most-significant-bit in a byte.
            Big-endian ordering means bits are ordered such that the bit whose in-memory representation is left-most is the most-significant-bit in a byte.
            </remarks>
    </member>
    <member name="M:Gemstone.EndianOrder.#ctor(Gemstone.Endianness)">
      <summary>
            Constructs a new instance of the <see cref="T:Gemstone.EndianOrder" /> class.
            </summary>
      <param name="targetEndianness">Endianness parameter.</param>
    </member>
    <member name="F:Gemstone.EndianOrder.BigEndian">
      <summary>
            Default instance of the <see cref="T:Gemstone.BigEndianOrder" /> conversion class.
            </summary>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.EndianOrder.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="F:Gemstone.EndianOrder.LittleEndian">
      <summary>
            Default instance of the <see cref="T:Gemstone.LittleEndianOrder" /> conversion class.
            </summary>
    </member>
    <member name="F:Gemstone.EndianOrder.NativeEndian">
      <summary>
            Default instance of the <see cref="T:Gemstone.NativeEndianOrder" /> conversion class.
            </summary>
    </member>
    <member name="F:Gemstone.EndianOrder.NativeEndianness">
      <summary>
            Gets the native <see cref="T:Gemstone.Endianness" /> of the executing architecture.
            </summary>
    </member>
    <member name="F:Gemstone.EndianOrder.TargetEndianness">
      <summary>
            Returns the target endian-order of this <see cref="T:Gemstone.EndianOrder" /> representation.
            </summary>
    </member>
    <member name="M:Gemstone.EndianOrder.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.EndianOrder.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.EventArgs`1">
      <summary>
            Represents a generic event arguments class with one data argument.
            </summary>
      <typeparam name="T">Type of data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`1" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`1" /> class.
            </summary>
      <param name="argument">The argument data for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`1.Argument">
      <summary>
            Gets or sets the data argument for the event using <see cref="T:Gemstone.EventArgs`1" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`2">
      <summary>
            Represents a generic event arguments class with two data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`2" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`2" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`2.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`2" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`2.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`2" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`3">
      <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
      <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`3.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`3.#ctor(`0,`1,`2)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
      <param name="argument3">The third data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument3">
      <summary>
            Gets or sets the third data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`4">
      <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
      <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
      <typeparam name="T4">The type of the fourth data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`4.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`4" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`4.#ctor(`0,`1,`2,`3)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
      <param name="argument3">The third data argument for the event.</param>
      <param name="argument4">The fourth data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument3">
      <summary>
            Gets or sets the third data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument4">
      <summary>
            Gets or sets the fourth data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.IMergeable`1">
      <summary>
            Represents a type of object that is mergeable with another type of object.
            </summary>
      <typeparam name="T">The type of object to be merged with.</typeparam>
      <remarks>
            This interface was primarily designed for objects which are mergeable with other objects of the same type.
            Therefore, <typeparamref name="T" /> should typically be the actual type of the object.
            </remarks>
    </member>
    <member name="M:Gemstone.IMergeable`1.Merge(`0)">
      <summary>
            Merges this object with another.
            </summary>
      <param name="other">The other mergeable object.</param>
      <returns>The result of merging this object with another.</returns>
    </member>
    <member name="T:Gemstone.IProvideStatus">
      <summary>
            Defines an interface for any object to allow it to provide a name and status
            that can be displayed for informational purposes.
            </summary>
    </member>
    <member name="P:Gemstone.IProvideStatus.Name">
      <summary>
            Gets the name of the object providing status information.
            </summary>
    </member>
    <member name="P:Gemstone.IProvideStatus.Status">
      <summary>
            Gets the current status details about object providing status information.
            </summary>
    </member>
    <member name="T:Gemstone.ISupportLifecycle">
      <summary>
            Specifies that this object provides support for performing tasks during the key stages of object life-cycle.
            </summary>
      <remarks>
        <list type="table">
          <listheader>
            <term>Life-cycle Stage</term>
            <description>Equivalent Member</description>
          </listheader>
          <item>
            <term>Birth</term>
            <description>
              <see cref="M:Gemstone.ISupportLifecycle.Initialize" />
            </description>
          </item>
          <item>
            <term>Life (Work/Sleep)</term>
            <description>
              <see cref="P:Gemstone.ISupportLifecycle.Enabled" />
            </description>
          </item>
          <item>
            <term>Death</term>
            <description>
              <see cref="M:System.IDisposable.Dispose" />
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="E:Gemstone.ISupportLifecycle.Disposed">
      <summary>
            Raised after the source object has been properly disposed.
            </summary>
    </member>
    <member name="P:Gemstone.ISupportLifecycle.Enabled">
      <summary>
            Gets or sets a boolean value that indicates whether the object is enabled.
            </summary>
      <remarks>
            Typical implementation of <see cref="P:Gemstone.ISupportLifecycle.Enabled" /> should suspend the internal processing when the object is 
            disabled and resume processing when the object is enabled.
            </remarks>
    </member>
    <member name="M:Gemstone.ISupportLifecycle.Initialize">
      <summary>
            Initializes the state of the object.
            </summary>
      <remarks>
        <para>
            Typical implementation of <see cref="M:Gemstone.ISupportLifecycle.Initialize" /> should allow the object state to be initialized only 
            once. <see cref="M:Gemstone.ISupportLifecycle.Initialize" /> should be called automatically from one or more key entry points of the 
            object. For example, if the object is a <see cref="T:System.ComponentModel.Component" /> and it implements 
            the <see cref="T:System.ComponentModel.ISupportInitialize" /> interface then <see cref="M:Gemstone.ISupportLifecycle.Initialize" /> should 
            be called from the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> method so that the object 
            gets initialized automatically when consumed through the IDE designer surface. In addition to this 
            <see cref="M:Gemstone.ISupportLifecycle.Initialize" /> should also be called from key or mandatory methods of the object, like 'Start()'
            or 'Connect()', so that the object gets initialized even when not consumed through the IDE designer surface.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.ISupportLifecycle.IsDisposed">
      <summary>
            Gets a flag that indicates whether the object has been disposed.
            </summary>
    </member>
    <member name="T:Gemstone.LibraryEvents">
      <summary>
            Defines library-level static events.
            </summary>
      <remarks>
            The <see cref="T:Gemstone.LibraryEvents" /> class automatically attaches to the <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> event so that
            any unobserved task exceptions encountered will be marked as observed and exposed via the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> event.<br />
            To disable this feature and only use custom <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> event handling, call the
            <see cref="M:Gemstone.LibraryEvents.DisableUnobservedTaskExceptionHandling" /> method during program initialization.
            </remarks>
    </member>
    <member name="M:Gemstone.LibraryEvents.DisableUnobservedTaskExceptionHandling">
      <summary>
            Disables automatic handling of <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> events. When disabled, any unobserved
            task exceptions encountered will not be marked as observed nor exposed via the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> event.
            </summary>
    </member>
    <member name="M:Gemstone.LibraryEvents.EnableUnobservedTaskExceptionHandling">
      <summary>
            Enables automatic handling of <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> events. When enabled, any unobserved
            task exceptions encountered are marked as observed and exposed via the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> event.
            </summary>
      <remarks>
            This functionality is enabled by default. This method would only ever need to be called to re-enable unobserved
            task exception handling after being disabled by a call to <see cref="M:Gemstone.LibraryEvents.DisableUnobservedTaskExceptionHandling" />.
            </remarks>
    </member>
    <member name="E:Gemstone.LibraryEvents.SuppressedException">
      <summary>
            Exposes exceptions that were suppressed but otherwise unhandled.  
            </summary>
      <remarks>
        <para>
            End users should attach to this event so that suppressed exceptions can be exposed to a log.
            </para>
        <para>
            The <see cref="T:Gemstone.LibraryEvents" /> class automatically attaches to the <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> event so that
            any unobserved task exceptions encountered will be marked as observed and exposed via the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> event.<br />
            To disable this feature and only use custom <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" /> event handling, call the
            <see cref="M:Gemstone.LibraryEvents.DisableUnobservedTaskExceptionHandling" /> method during program initialization.
            </para>
        <para>
            Gemstone libraries only raise this event, no library functions attach to this end user-only event.
            </para>
      </remarks>
    </member>
    <member name="T:Gemstone.LittleEndian">
      <summary>
            Defines a set of little-endian byte order interoperability functions.
            </summary>
      <remarks>
            This class is setup to support aggressive in-lining of little endian conversions. Bounds
            will not be checked as part of this function call, if bounds are violated, the exception
            will be thrown at the <see cref="T:System.Array" /> level.
            </remarks>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.LittleEndianOrder">
      <summary>
            Represents a little-endian byte order interoperability class.
            </summary>
    </member>
    <member name="M:Gemstone.LittleEndianOrder.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:Gemstone.LittleEndianOrder" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.LittleEndianOrder.Default">
      <summary>
            Returns the default instance of the <see cref="T:Gemstone.LittleEndianOrder" /> class.
            </summary>
    </member>
    <member name="T:Gemstone.NativeEndianOrder">
      <summary>
            Represents a native-endian byte order interoperability class.
            </summary>
    </member>
    <member name="M:Gemstone.NativeEndianOrder.#ctor">
      <summary>
            Constructs a new instance of the <see cref="T:Gemstone.NativeEndianOrder" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.NativeEndianOrder.Default">
      <summary>
            Returns the default instance of the <see cref="T:Gemstone.NativeEndianOrder" /> class.
            </summary>
    </member>
    <member name="T:Gemstone.NtpTimeTag">
      <summary>
            Represents a standard Network Time Protocol (NTP) time-tag.
            </summary>
      <remarks>
            As recommended by RFC-2030, all NTP timestamps earlier than 3h 14m 08s UTC on 20 January 1968
            are reckoned from 6h 28m 16s UTC on 7 February 2036. This gives the <see cref="T:Gemstone.NtpTimeTag" />
            class a functioning range of 1968-01-20 03:14:08 to 2104-02-26 09:42:23.
            </remarks>
    </member>
    <member name="M:Gemstone.NtpTimeTag.#ctor(Gemstone.Ticks)">
      <summary>
            Creates a new <see cref="T:Gemstone.NtpTimeTag" />, given specified <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:Gemstone.Ticks" /> to create NTP time-tag from (minimum valid date is 1/1/1900).</param>
      <remarks>
            This constructor will accept a <see cref="T:System.DateTime" /> parameter since <see cref="T:Gemstone.Ticks" /> is implicitly castable to a <see cref="T:System.DateTime" />.
            </remarks>
    </member>
    <member name="M:Gemstone.NtpTimeTag.#ctor(System.Decimal)">
      <summary>
            Creates a new <see cref="T:Gemstone.NtpTimeTag" />, given number of seconds since 1/1/1900.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1900.</param>
    </member>
    <member name="M:Gemstone.NtpTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:Gemstone.NtpTimeTag" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="M:Gemstone.NtpTimeTag.#ctor(System.UInt32,System.UInt32)">
      <summary>
            Creates a new <see cref="T:Gemstone.NtpTimeTag" />, given number of seconds and fractional seconds since 1/1/1900.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1900.</param>
      <param name="fraction">Number of fractional seconds, in whole picoseconds.</param>
    </member>
    <member name="M:Gemstone.NtpTimeTag.#ctor(System.UInt64)">
      <summary>
            Creates a new <see cref="T:Gemstone.NtpTimeTag" />, given 64-bit NTP timestamp.
            </summary>
      <param name="timestamp">NTP timestamp containing number of seconds since 1/1/1900 in high-word and fractional seconds in low-word.</param>
    </member>
    <member name="F:Gemstone.NtpTimeTag.AlternateBaseTicks">
      <summary>
            Number of ticks since 2/7/2036 at 6h 28m 16s UTC when MSB is set.
            </summary>
      <remarks>
            According to RFC-2030, NTP dates can also be measured as the number of seconds since 2/7/2036
            at 6h 28m 16s UTC if MSB is set.
            </remarks>
    </member>
    <member name="F:Gemstone.NtpTimeTag.BaseTicks">
      <summary>
            Number of ticks since 1/1/1900.
            </summary>
      <remarks>
            NTP dates are measured as the number of seconds since 1/1/1900.
            </remarks>
    </member>
    <member name="M:Gemstone.NtpTimeTag.FromTicks(Gemstone.Ticks)">
      <summary>
            Gets 64-bit NTP timestamp given <paramref name="timestamp" /> in <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:Gemstone.Ticks" />.</param>
      <returns>Seconds in NTP from given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:Gemstone.NtpTimeTag.GetBaseDateOffsetTicks(Gemstone.Ticks)">
      <summary>
            Gets proper NTP offset based on <paramref name="timestamp" /> value, see RFC-2030.
            </summary>
      <param name="timestamp">
        <see cref="T:Gemstone.Ticks" /> timestamp value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="M:Gemstone.NtpTimeTag.GetBaseDateOffsetTicks(System.Decimal)">
      <summary>
            Gets proper NTP offset based on <paramref name="seconds" /> value, see RFC-2030.
            </summary>
      <param name="seconds">Seconds value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="M:Gemstone.NtpTimeTag.GetBaseDateOffsetTicks(System.UInt32)">
      <summary>
            Gets proper NTP offset based on most significant byte on <paramref name="seconds" /> value, see RFC-2030.
            </summary>
      <param name="seconds">NTP seconds timestamp value.</param>
      <returns>Proper NTP offset.</returns>
    </member>
    <member name="P:Gemstone.NtpTimeTag.Timestamp">
      <summary>
            Gets 64-bit NTP timestamp.
            </summary>
    </member>
    <member name="T:Gemstone.NullableWeakReference">
      <summary>
            A <see cref="T:System.WeakReference" /> implementation that can have the <see cref="P:Gemstone.NullableWeakReference.Target" /> object set to null.
            Natively, setting <see cref="P:System.WeakReference.Target" /> to null will throw an <see cref="T:System.InvalidOperationException" />,
            </summary>
    </member>
    <member name="M:Gemstone.NullableWeakReference.#ctor(System.Object)">
      <summary>
            Creates a <see cref="T:Gemstone.NullableWeakReference" /></summary>
      <param name="target">the object to maintain the weak reference to. Cannot be null.</param>
    </member>
    <member name="M:Gemstone.NullableWeakReference.Clear">
      <summary>
            Sets <see cref="P:Gemstone.NullableWeakReference.Target" /> to null so subsequent calls to <see cref="P:Gemstone.NullableWeakReference.Target" /> returns null.
            </summary>
    </member>
    <member name="P:Gemstone.NullableWeakReference.IsAlive">
      <summary>
            Gets an indication whether the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has been cleared or garbage collected.
            </summary>
      <returns>
            true if the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has not been garbage collected or cleared 
            and is still accessible; otherwise, false.
            </returns>
    </member>
    <member name="P:Gemstone.NullableWeakReference.Target">
      <summary>
            Gets the object (the target) referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object.
            Set will only accept null.
            </summary>
      <returns>
            null if the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has been garbage collected or cleared;
            otherwise, a reference to the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object.
            </returns>
      <exception cref="T:System.InvalidOperationException">If setting this property to anything other than null</exception>
    </member>
    <member name="T:Gemstone.ObjectState`1">
      <summary>
            A serializable class that can be used to track the current and previous state of an object.
            </summary>
      <typeparam name="TState">Type of the state to track.</typeparam>
    </member>
    <member name="M:Gemstone.ObjectState`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.ObjectState`1" /> class.
            </summary>
      <param name="objectName">The text label for the object whose state is being tracked.</param>
    </member>
    <member name="M:Gemstone.ObjectState`1.#ctor(System.String,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.ObjectState`1" /> class.
            </summary>
      <param name="objectName">The text label for the object whose state is being tracked.</param>
      <param name="currentState">The current state of the object.</param>
    </member>
    <member name="M:Gemstone.ObjectState`1.#ctor(System.String,`0,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.ObjectState`1" /> class.
            </summary>
      <param name="objectName">The text label for the object whose state is being tracked.</param>
      <param name="currentState">The current state of the object.</param>
      <param name="previousState">The previous state of the object.</param>
    </member>
    <member name="P:Gemstone.ObjectState`1.CurrentState">
      <summary>
            Gets or sets the current state of the object.
            </summary>
    </member>
    <member name="P:Gemstone.ObjectState`1.ObjectName">
      <summary>
            Gets or sets a text label for the object whose state is being tracked.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
    </member>
    <member name="P:Gemstone.ObjectState`1.PreviousState">
      <summary>
            Gets or sets the previous state of the object.
            </summary>
    </member>
    <member name="T:Gemstone.PrecisionTimer">
      <summary>
            Represents a high-resolution timer and timestamp class.
            </summary>
      <remarks>
            For Windows deployments, implementation is based on the Windows multimedia timer. For other
            deployments, e.g., POSIX, implementation uses a basic timer for compatibility - this should
            have ~10ms of resolution when used on standard Linux systems.
            </remarks>
    </member>
    <member name="M:Gemstone.PrecisionTimer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.PrecisionTimer" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.PrecisionTimer.AutoReset">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:Gemstone.PrecisionTimer" /> should raise the
            <see cref="E:Gemstone.PrecisionTimer.Tick" /> event each time the specified period elapses or only after the first
            time it elapses.
            </summary>
      <returns>
        <c>true</c>true if the <see cref="T:Gemstone.PrecisionTimer" /> should raise the <see cref="T:Gemstone.Ticks" />
            event each time the interval elapses; <c>false</c> if it should raise the event only once
            after the first time the interval elapses. The default is <c>true</c>.
            </returns>
      <remarks></remarks>
    </member>
    <member name="P:Gemstone.PrecisionTimer.Capabilities">
      <summary>
            Gets the system multimedia timer capabilities.
            </summary>
    </member>
    <member name="M:Gemstone.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)">
      <summary>
            Clears a previously set minimum timer resolution established using <see cref="M:Gemstone.PrecisionTimer.SetMinimumTimerResolution(System.Int32)" />.
            </summary>
      <param name="period">
            Minimum timer resolution specified in the previous call to the <see cref="M:Gemstone.PrecisionTimer.SetMinimumTimerResolution(System.Int32)" /> function.
            </param>
      <remarks>
        <para>
            Call this function immediately after you are finished using the <see cref="T:Gemstone.PrecisionTimer" />. You must match each call to
            <see cref="M:Gemstone.PrecisionTimer.SetMinimumTimerResolution(System.Int32)" /> with a call to <see cref="M:Gemstone.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)" />, specifying the same minimum
            resolution <paramref name="period" /> in both calls. An application can make multiple SetMinimumTimerResolution calls as long
            as each call is matched with a call to ClearMinimumTimerResolution.
            </para>
        <para>
            This method is currently ignored under Mono deployments.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.PrecisionTimer" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.PrecisionTimer" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.PrecisionTimer.EventArgs">
      <summary>
            Gets <see cref="T:System.EventArgs" /> specified in <see cref="M:Gemstone.PrecisionTimer.Start(System.EventArgs)" /> used to pass into <see cref="E:Gemstone.PrecisionTimer.Tick" /> event.
            </summary>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.PrecisionTimer" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="P:Gemstone.PrecisionTimer.IsRunning">
      <summary>
            Gets a value indicating whether the <see cref="T:Gemstone.PrecisionTimer" /> is running.
            </summary>
    </member>
    <member name="P:Gemstone.PrecisionTimer.Period">
      <summary>
            Gets or sets the time between <see cref="E:Gemstone.PrecisionTimer.Tick" /> events, in milliseconds.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="P:Gemstone.PrecisionTimer.Resolution">
      <summary>
            Gets or sets the <see cref="T:Gemstone.PrecisionTimer" /> resolution, in milliseconds.
            </summary>
      <remarks>
        <para>
            The resolution is in milliseconds. The resolution increases  with smaller values;
            a resolution of 0 indicates periodic events should occur with the greatest possible
            accuracy. To reduce system  overhead, however, you should use the maximum value
            appropriate for your application.
            </para>
        <para>
            This property is currently ignored under Mono deployments.
            </para>
      </remarks>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="M:Gemstone.PrecisionTimer.SetMinimumTimerResolution(System.Int32)">
      <summary>
            Requests a minimum resolution for periodic timers such as the <see cref="T:Gemstone.PrecisionTimer" />.
            </summary>
      <param name="period">
            Minimum timer resolution, in milliseconds, for the application. A lower value specifies a higher (more accurate) resolution.
            </param>
      <remarks>
        <para>
            Call this function immediately before using the <see cref="T:Gemstone.PrecisionTimer" /> and call <see cref="M:Gemstone.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)" />
            immediately after you are finished using the PrecisionTimer. You must match each call to <see cref="M:Gemstone.PrecisionTimer.SetMinimumTimerResolution(System.Int32)" />
            with a call to ClearMinimumTimerResolution specifying the same minimum resolution <paramref name="period" /> in both calls.
            An application can make multiple ClearMinimumTimerResolution calls as long as each call is matched with a call to ClearMinimumTimerResolution.
            This function affects a global Windows setting. Windows uses the lowest value (that is, highest resolution) requested by any process.
            Setting a higher resolution can improve the accuracy of time-out intervals in wait functions. However, it can also reduce overall system
            performance, because the thread scheduler switches tasks more often. High resolutions can also prevent the CPU power management system from
            entering power-saving modes. See timeBeginPeriod Windows API for more information.
            </para>
        <para>
            This method is currently ignored under Mono deployments.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Start">
      <summary>
            Starts the <see cref="T:Gemstone.PrecisionTimer" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
      <exception cref="T:Gemstone.TimerStartException">
            The timer failed to start.
            </exception>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Start(System.EventArgs)">
      <summary>
            Starts the <see cref="T:Gemstone.PrecisionTimer" /> with the specified <see cref="P:Gemstone.PrecisionTimer.EventArgs" />.
            </summary>
      <param name="userArgs">User defined event arguments to pass into raised <see cref="T:Gemstone.Ticks" /> event.</param>
      <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
      <exception cref="T:Gemstone.TimerStartException">
            The timer failed to start.
            </exception>
    </member>
    <member name="E:Gemstone.PrecisionTimer.Started">
      <summary>
            Occurs when the <see cref="T:Gemstone.PrecisionTimer" /> has started.
            </summary>
    </member>
    <member name="M:Gemstone.PrecisionTimer.Stop">
      <summary>
            Stops <see cref="T:Gemstone.PrecisionTimer" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
    </member>
    <member name="E:Gemstone.PrecisionTimer.Stopped">
      <summary>
            Occurs when the <see cref="T:Gemstone.PrecisionTimer" /> has stopped.
            </summary>
    </member>
    <member name="E:Gemstone.PrecisionTimer.Tick">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>E:Gemstone.PrecisionTimer.Tick</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Gemstone.ProcessProgress`1">
      <summary>
            Represents current process progress for an operation.
            </summary>
      <param name="processName">Name of process for which progress is being monitored.</param>
      <typeparam name="TUnit">Unit of progress used (long, double, int, etc.)</typeparam>
      <remarks>
            Used to track total progress of an identified operation.
            </remarks>
    </member>
    <member name="M:Gemstone.ProcessProgress`1.#ctor(System.String)">
      <summary>
            Represents current process progress for an operation.
            </summary>
      <param name="processName">Name of process for which progress is being monitored.</param>
      <typeparam name="TUnit">Unit of progress used (long, double, int, etc.)</typeparam>
      <remarks>
            Used to track total progress of an identified operation.
            </remarks>
    </member>
    <member name="P:Gemstone.ProcessProgress`1.Complete">
      <summary>
            Gets or sets number of units completed processing so far.
            </summary>
    </member>
    <member name="P:Gemstone.ProcessProgress`1.ProcessName">
      <summary>
            Gets or sets name of process for which progress is being monitored.
            </summary>
    </member>
    <member name="P:Gemstone.ProcessProgress`1.ProgressMessage">
      <summary>
            Gets or sets current progress message (e.g., current file being copied, etc.)
            </summary>
    </member>
    <member name="P:Gemstone.ProcessProgress`1.Total">
      <summary>
            Gets or sets total number of units to be processed.
            </summary>
    </member>
    <member name="T:Gemstone.ProcessProgressHandler`1">
      <summary>
            Defines a delegate handler for a <see cref="T:Gemstone.ProcessProgress`1" /> instance.
            </summary>
      <typeparam name="TUnit">Unit of progress used (long, double, int, etc.)</typeparam>
      <remarks>
            This handler is used by methods with an <see cref="T:System.Action" /> delegate parameter (e.g., Action&lt;ProcessProgress&lt;long&gt;&gt;)
            providing a simple callback mechanism for reporting progress on a long operation.
            </remarks>
    </member>
    <member name="M:Gemstone.ProcessProgressHandler`1.#ctor(System.Action{Gemstone.ProcessProgress{`0}},System.String)">
      <summary>
            Constructs a new process progress handler for the specified parameters.
            </summary>
      <param name="progressHandler">Delegate callback to invoke as process progresses.</param>
      <param name="processName">Descriptive name of process, if useful.</param>
    </member>
    <member name="M:Gemstone.ProcessProgressHandler`1.#ctor(System.Action{Gemstone.ProcessProgress{`0}},System.String,`0)">
      <summary>
            Constructs a new process progress handler for the specified parameters.
            </summary>
      <param name="progressHandler">Delegate callback to invoke as process progresses.</param>
      <param name="processName">Descriptive name of process, if useful.</param>
      <param name="total">Total number of units to be processed.</param>
    </member>
    <member name="P:Gemstone.ProcessProgressHandler`1.Complete">
      <summary>
            Gets or sets current process progress (i.e., number of units completed processing so far) - note that when this
            property value is assigned, the callback function is automatically called with updated <see cref="T:Gemstone.ProcessProgress`1" />
            instance so consumer can track progress.
            </summary>
      <value>Number of units completed processing so far.</value>
    </member>
    <member name="P:Gemstone.ProcessProgressHandler`1.ProcessProgress">
      <summary>
            Gets instance of <see cref="T:Gemstone.ProcessProgress`1" /> used to track progress for this handler.
            </summary>
    </member>
    <member name="P:Gemstone.ProcessProgressHandler`1.ProgressHandler">
      <summary>
            Gets or sets reference to delegate handler used as a callback to report process progress.
            </summary>
    </member>
    <member name="P:Gemstone.ProcessProgressHandler`1.Total">
      <summary>
            Gets or sets total number of units to be processed.
            </summary>
    </member>
    <member name="M:Gemstone.ProcessProgressHandler`1.UpdateProgress(`0)">
      <summary>
            Calls callback function with updated <see cref="T:Gemstone.ProcessProgress`1" /> instance so consumer can track progress.
            </summary>
      <param name="completed">Number of units completed processing so far.</param>
      <remarks>
            Note that assigning a value to the <see cref="P:Gemstone.ProcessProgressHandler`1.Complete" /> property will have the same effect as calling this method.
            </remarks>
    </member>
    <member name="T:Gemstone.Range`1">
      <summary>
            Represents a range of values defined by start and end value.
            </summary>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>T:Gemstone.Range`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:Gemstone.Range`1.#ctor(`0,`0)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Range`1" /> class using the default comparer.
            </summary>
      <param name="start">The start value of the range.</param>
      <param name="end">The end value of the range.</param>
    </member>
    <member name="M:Gemstone.Range`1.Contains(Gemstone.Range{`0})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Contains(Gemstone.Range{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Contains(Gemstone.Range{`0},System.Comparison{`0})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Contains(`0)">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Contains(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Contains(`0,System.Comparison{`0})">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.Range`1.End">
      <summary>
            Gets the end value of the range.
            </summary>
    </member>
    <member name="M:Gemstone.Range`1.Merge(Gemstone.Range{`0})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Merge(Gemstone.Range{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Merge(Gemstone.Range{`0},System.Comparison{`0})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Collections.Generic.Comparer{`0})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Comparison{`0})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`1.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`1.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`1.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Comparison{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`1.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0}},System.Comparison{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Overlaps(Gemstone.Range{`0})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Overlaps(Gemstone.Range{`0},System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`1.Overlaps(Gemstone.Range{`0},System.Comparison{`0})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="T" />.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.Range`1.Start">
      <summary>
            Gets the start value of the range.
            </summary>
    </member>
    <member name="T:Gemstone.Range`2">
      <summary>
            Represents a range of values defined by a start and end value with encapsulated state.
            </summary>
      <typeparam name="TRange">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TRange</parameter>
            <parameter>T:Gemstone.Range`2</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="TState">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TState</parameter>
            <parameter>T:Gemstone.Range`2</parameter>
          </include>
        </markup>
      </typeparam>
      <remarks>
            This class provides flexibility in allowing the user to define their own state and how it is merged.
            Because of potentially undesirable behavior which could result from merging objects inherited from
            this class, the class has been sealed to prevent inheritance.
            </remarks>
    </member>
    <member name="M:Gemstone.Range`2.#ctor(`0,`0,`1)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Range`2" /> class using the default comparer.
            </summary>
      <param name="start">The start value of the range.</param>
      <param name="end">The end value of the range.</param>
      <param name="state">The state object encapsulated by the range.</param>
    </member>
    <member name="M:Gemstone.Range`2.Contains(Gemstone.Range{`0,`1})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Contains(Gemstone.Range{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Contains(Gemstone.Range{`0,`1},System.Comparison{`0})">
      <summary>
            Determines whether the range contains the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the given range exists within this range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Contains(`0)">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Contains(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Contains(`0,System.Comparison{`0})">
      <summary>
            Determines whether the range contains the given value.
            </summary>
      <param name="value">The value to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the value exists within the range; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.Range`2.End">
      <summary>
            Gets the end value of the range.
            </summary>
    </member>
    <member name="M:Gemstone.Range`2.Merge(Gemstone.Range{`0,`1})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="TState" /> is not <see cref="T:Gemstone.IMergeable`1" />.</exception>
    </member>
    <member name="M:Gemstone.Range`2.Merge(Gemstone.Range{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="TState" /> is not <see cref="T:Gemstone.IMergeable`1" />.</exception>
    </member>
    <member name="M:Gemstone.Range`2.Merge(Gemstone.Range{`0,`1},System.Comparison{`0})">
      <summary>
            Merges two ranges into one range that fully encompasses both ranges.
            </summary>
      <param name="range">The range to be merged with this one.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The range that fully encompasses the merged ranges.</returns>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="TState" /> is not <see cref="T:Gemstone.IMergeable`1" />.</exception>
    </member>
    <member name="M:Gemstone.Range`2.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Collections.Generic.Comparer{`0})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Merge(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Comparison{`0})">
      <summary>
            Merges all ranges in a collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges to be merged.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>A range that is the result of merging all ranges in the collection.</returns>
    </member>
    <member name="M:Gemstone.Range`2.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`2.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`2.MergeAllOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Comparison{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The collection of merged ranges.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="M:Gemstone.Range`2.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`2.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`2.MergeConsecutiveOverlapping(System.Collections.Generic.IEnumerable{Gemstone.Range{`0,`1}},System.Comparison{`0})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of ranges.
            </summary>
      <param name="ranges">The collection of ranges.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>The collection of merged ranges.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Overlaps(Gemstone.Range{`0,`1})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Overlaps(Gemstone.Range{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparer">The comparer used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.Range`2.Overlaps(Gemstone.Range{`0,`1},System.Comparison{`0})">
      <summary>
            Determines whether the range overlaps with the given range.
            </summary>
      <param name="range">The range to be compared with.</param>
      <param name="comparison">The comparison used to compare objects of type <typeparamref name="TRange" />.</param>
      <returns>True if the ranges overlap; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.Range`2.Start">
      <summary>
            Gets the start value of the range.
            </summary>
    </member>
    <member name="P:Gemstone.Range`2.State">
      <summary>
            Gets the state encapsulated by the range.
            </summary>
    </member>
    <member name="T:Gemstone.Serialization">
      <summary>
            Common serialization related functions.
            </summary>
    </member>
    <member name="M:Gemstone.Serialization.GetOrDefault``1(System.Runtime.Serialization.SerializationInfo,System.String,``0)">
      <summary>
            Gets <see cref="T:System.Runtime.Serialization.SerializationInfo" /> value for specified <paramref name="name" />; otherwise <paramref name="defaultValue" />.
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains deserialized values.</param>
      <param name="name">Name of deserialized parameter to retrieve.</param>
      <param name="defaultValue">Default value to return if <paramref name="name" /> does not exist or cannot be deserialized.</param>
      <typeparam name="T">Type of parameter to get from <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</typeparam>
      <returns>Value for specified <paramref name="name" />; otherwise <paramref name="defaultValue" /></returns>
      <remarks>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> do not have a direct way of determining if an item with a specified name exists, so when calling
            one of the Get(n) functions you will simply get a <see cref="T:System.Runtime.Serialization.SerializationException" /> if the parameter does not exist; similarly
            you will receive this exception if the parameter fails to properly deserialize. This extension method protects against both of
            these failures and returns a default value if the named parameter does not exist or cannot be deserialized.
            </remarks>
    </member>
    <member name="M:Gemstone.Serialization.GetValues(System.Runtime.Serialization.SerializationInfo)">
      <summary>
            Gets values of a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance compatible with Linq operations.
            </summary>
      <param name="info">Target <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</param>
      <returns>Enumeration of <see cref="T:System.Runtime.Serialization.SerializationEntry" /> objects from <paramref name="info" /> instance.</returns>
    </member>
    <member name="F:Gemstone.Serialization.LegacyBinder">
      <summary>
            Serialization binder used to deserialize files that were serialized using the old library frameworks
            (TVA Code Library, Time Series Framework, TVA.PhasorProtocols, and PMU Connection Tester) into classes
            in the Grid Solutions Framework.
            </summary>
    </member>
    <member name="T:Gemstone.ShortTime">
      <summary>
            Represents a high resolution time that is very granular but may drift 
            if trying to accurately measure long time durations (Such as hours). 
            This time is not adjusted with changes to the system clock.
            Typical clock drifts by about 2-3 ms per minute as apposed to 0.4ms
            per minute for standard <see cref="T:System.DateTime" />.
            </summary>
      <remarks>
            Call times are about 40+ million calls per second.
            </remarks>
    </member>
    <member name="M:Gemstone.ShortTime.Add(System.TimeSpan)">
      <summary>
            Adds timespan to this struct
            </summary>
      <param name="duration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>duration</parameter>
            <parameter>M:Gemstone.ShortTime.Add(System.TimeSpan)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.Add(System.TimeSpan)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.AddMilliseconds(System.Double)">
      <summary>
            Adds milliseconds to this struct
            </summary>
      <param name="duration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>duration</parameter>
            <parameter>M:Gemstone.ShortTime.AddMilliseconds(System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.AddMilliseconds(System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.AddSeconds(System.Double)">
      <summary>
            Adds seconds to this struct
            </summary>
      <param name="duration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>duration</parameter>
            <parameter>M:Gemstone.ShortTime.AddSeconds(System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.AddSeconds(System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.AddTicks(System.Double)">
      <summary>
            Adds ticks to this struct
            </summary>
      <param name="duration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>duration</parameter>
            <parameter>M:Gemstone.ShortTime.AddTicks(System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.AddTicks(System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.Elapsed">
      <summary>
            Gets the time that has elapsed since the creation of this time.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.Elapsed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.Elapsed(Gemstone.ShortTime)">
      <summary>
            The elapsed time
            </summary>
      <param name="futureTime">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>futureTime</parameter>
            <parameter>M:Gemstone.ShortTime.Elapsed(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.Elapsed(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedMicroseconds">
      <summary>
            The elapsed time in microseconds.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMicroseconds</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedMicroseconds(Gemstone.ShortTime)">
      <summary>
            The elapsed time in microseconds
            </summary>
      <param name="futureTime">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>futureTime</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMicroseconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMicroseconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedMilliseconds">
      <summary>
            The elapsed time in milliseconds.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMilliseconds</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedMilliseconds(Gemstone.ShortTime)">
      <summary>
            The elapsed time in milliseconds
            </summary>
      <param name="futureTime">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>futureTime</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMilliseconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedMilliseconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedSeconds">
      <summary>
            The elapsed time in seconds.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedSeconds</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedSeconds(Gemstone.ShortTime)">
      <summary>
            The elapsed time in seconds
            </summary>
      <param name="futureTime">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>futureTime</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedSeconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedSeconds(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedTicks">
      <summary>
            The elapsed time in ticks.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedTicks</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ElapsedTicks(Gemstone.ShortTime)">
      <summary>
            The elapsed time in ticks
            </summary>
      <param name="futureTime">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>futureTime</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedTicks(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ElapsedTicks(Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.Equals(Gemstone.ShortTime)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.ShortTime.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
    </member>
    <member name="M:Gemstone.ShortTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:Gemstone.ShortTime.Now">
      <summary>
            The current time in <see cref="T:Gemstone.ShortTime" /></summary>
    </member>
    <member name="M:Gemstone.ShortTime.op_Equality(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Are 2 times equal
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_Equality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_Equality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_Equality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_GreaterThan(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Tests Greater Than
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_GreaterThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Tests Greater than or equal Than
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_GreaterThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_Inequality(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Are 2 times not equal
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_Inequality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_Inequality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_Inequality(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_LessThan(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Tests Less Than
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThan(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_LessThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Tests Less Than or equal
            </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_LessThanOrEqual(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.op_Subtraction(Gemstone.ShortTime,Gemstone.ShortTime)">
      <summary>
            Subtracts two times.
            </summary>
      <param name="a"></param>
      <param name="b"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.op_Subtraction(Gemstone.ShortTime,Gemstone.ShortTime)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.ShortTime.ToString">
      <summary>
            Shows the UTC time.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.ShortTime.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.ShortTime.UtcTime">
      <summary>
            Calculates the approximate <see cref="T:System.DateTime" /> represented by this time. 
            </summary>
      <returns></returns>
    </member>
    <member name="T:Gemstone.Ticks">
      <summary>
            Represents an instant in time, or time period, as a 64-bit signed integer with a value that is expressed as the number
            of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001.
            </summary>
      <remarks>
        <para>
          <see cref="T:Gemstone.Ticks" /> can represent an "instant in time" and therefore can be used exactly like a <see cref="T:System.DateTime" />.
            The difference between <see cref="T:Gemstone.Ticks" /> and <see cref="T:System.DateTime" /> is that <see cref="T:Gemstone.Ticks" /> is essentially a long
            integer (i.e., an <see cref="T:System.Int64" />) which represents the number of ticks that have elapsed since 12:00:00 midnight,
            January 1, 0001 with each tick having a resolution of 100-nanoseconds. You would use <see cref="T:Gemstone.Ticks" /> in places where
            you needed to directly represent time in high-resolution, i.e., time with sub-second accuracy, using an object that will
            act like a long integer but handle time conversions. <see cref="T:Gemstone.Ticks" /> can also represent a "time period" (e.g., the
            number of ticks elapsed since a process started) and thus can also be used like a <see cref="T:System.TimeSpan" />; when used in
            this manner the <see cref="M:Gemstone.Ticks.ToElapsedTimeString" /> method can be used to convert the <see cref="T:Gemstone.Ticks" /> value
            into a handy textual representation of elapsed years, days, hours, minutes and seconds or sub-seconds.
            </para>
        <para>
            This class behaves just like an <see cref="T:System.Int64" /> representing a time in ticks; it is implicitly castable to and from
            an <see cref="T:System.Int64" /> and therefore can be generally used "as" an Int64 directly. It is also implicitly castable to and
            from a <see cref="T:System.DateTime" />, a <see cref="T:System.TimeSpan" />, an <see cref="T:Gemstone.NtpTimeTag" /> and a <see cref="T:Gemstone.UnixTimeTag" />.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Ticks.#ctor(System.DateTime)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:Gemstone.Ticks.#ctor(System.Int64)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">New time value in ticks.</param>
    </member>
    <member name="M:Gemstone.Ticks.#ctor(System.TimeSpan)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:Gemstone.Ticks.AlignToMicrosecondDistribution(Gemstone.Ticks,System.Int32)">
      <summary>
            Returns a floor-aligned microsecond distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>A floor-aligned microsecond distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:Gemstone.Ticks.AlignToMillisecondDistribution(Gemstone.Ticks,System.Int32)">
      <summary>
            Returns a floor-aligned millisecond distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>A floor-aligned millisecond distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:Gemstone.Ticks.AlignToSubsecondDistribution(Gemstone.Ticks,System.Int32,System.Int64)">
      <summary>
            Returns a floor-aligned sub-second distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="timeResolution">Defines the time resolution to use when aligning <paramref name="timestamp" /> to its proper distribution timestamp.</param>
      <returns>A floor-aligned sub-second distribution timestamp for given <paramref name="timestamp" />.</returns>
      <remarks>
            Time resolution value is typically a power of 10 based on the number of ticks per the desired resolution. The following table defines
            common resolutions and their respective <paramref name="timeResolution" /> values:
            <list type="table"><listheader><term>Resolution</term><description>Time Resolution Value</description></listheader><item><term>Seconds</term><description><see cref="F:Gemstone.Ticks.PerSecond" /></description></item><item><term>Milliseconds</term><description><see cref="F:Gemstone.Ticks.PerMillisecond" /></description></item><item><term>Microseconds</term><description><see cref="F:Gemstone.Ticks.PerMicrosecond" /></description></item><item><term>Ticks</term><description>0</description></item></list>
            If source timestamps have variation, i.e., they are not aligned within common distributions, the <paramref name="timeResolution" />
            can be adjusted to include slack to accommodate the variance. When including slack in the time resolution, the value will depend
            on the <paramref name="samplesPerSecond" />, for example: you could use 330,000 for 30 samples per second, 160,000 for 60 samples
            per second, and 80,000 for 120 samples per second. Actual slack value may need to be more or less depending on the size of the
            source timestamp variation.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.BaselinedTimestamp(Gemstone.BaselineTimeInterval)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" /> value that represents a base-lined timestamp, in 100-nanoseconds
            intervals, that begins at the beginning of the specified time interval.
            </summary>
      <param name="interval">
        <see cref="T:Gemstone.BaselineTimeInterval" /> to which <see cref="T:Gemstone.Ticks" /> timestamp should be base-lined.
            </param>
      <returns>
            A new <see cref="T:Gemstone.Ticks" /> value that represents a base-lined timestamp, in 100-nanoseconds intervals,
            that begins at the specified <see cref="T:Gemstone.BaselineTimeInterval" />.
            </returns>
      <remarks>
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Second" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at zero milliseconds.<br />
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Minute" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at zero seconds and milliseconds.<br />
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Hour" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at zero minutes, seconds and milliseconds.<br />
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Day" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at zero hours, minutes, seconds and milliseconds.<br />
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Month" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at day one, zero hours, minutes, seconds and milliseconds.<br />
            Base-lining to the <see cref="F:Gemstone.BaselineTimeInterval.Year" /> would return the <see cref="T:Gemstone.Ticks" />
            value starting at month one, day one, zero hours, minutes, seconds and milliseconds.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.CompareTo(Gemstone.Ticks)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Ticks" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Ticks" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.CompareTo(System.DateTime)">
      <summary>
            Compares this instance to a specified <see cref="T:System.DateTime" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.DateTime" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.CompareTo(System.Int64)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Int64" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:System.Int64" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not an <see cref="T:System.Int64" />, <see cref="T:System.DateTime" />, <see cref="T:System.TimeSpan" /> or <see cref="T:Gemstone.Ticks" />.</exception>
    </member>
    <member name="M:Gemstone.Ticks.CompareTo(System.TimeSpan)">
      <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.DistanceBeyondSecond">
      <summary>
            Gets the distance, in 100-nanoseconds intervals, beyond the top of the second in the timestamp
            represented by the <see cref="T:Gemstone.Ticks" />.
            </summary>
      <returns>
            Number of 100-nanoseconds intervals <see cref="T:Gemstone.Ticks" /> value is from the top of the second.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Equals(Gemstone.Ticks)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Ticks" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Ticks" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Equals(System.DateTime)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.DateTime" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Equals(System.Int64)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.
            </summary>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Int64" /> or <see cref="T:Gemstone.Ticks" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Equals(System.TimeSpan)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.TimeSpan" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.FromMicroseconds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" /> from the specified <paramref name="value" /> in microseconds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Ticks" /> value in microseconds.</param>
      <returns>New <see cref="T:Gemstone.Ticks" /> object from the specified <paramref name="value" /> in microseconds.</returns>
    </member>
    <member name="M:Gemstone.Ticks.FromMilliseconds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" /> from the specified <paramref name="value" /> in milliseconds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Ticks" /> value in milliseconds.</param>
      <returns>New <see cref="T:Gemstone.Ticks" /> object from the specified <paramref name="value" /> in milliseconds.</returns>
    </member>
    <member name="M:Gemstone.Ticks.FromSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Ticks" /> from the specified <paramref name="value" /> in seconds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Ticks" /> value in seconds.</param>
      <returns>New <see cref="T:Gemstone.Ticks" /> object from the specified <paramref name="value" /> in seconds.</returns>
    </member>
    <member name="M:Gemstone.Ticks.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="M:Gemstone.Ticks.LocalTimeIsValid(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value in local time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if local time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of local system clock time. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.LocalTimeIsValid(System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value in local time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if local time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of local system clock time. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="F:Gemstone.Ticks.MaxValue">
      <summary>
            Represents the largest possible value of a <see cref="T:Gemstone.Ticks" />. This field is constant.
            </summary>
    </member>
    <member name="M:Gemstone.Ticks.MicrosecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in microseconds for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in microseconds.</returns>
    </member>
    <member name="M:Gemstone.Ticks.MillisecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in milliseconds for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in milliseconds.</returns>
    </member>
    <member name="F:Gemstone.Ticks.MinValue">
      <summary>
            Represents the smallest possible value of a <see cref="T:Gemstone.Ticks" />. This field is constant.
            </summary>
    </member>
    <member name="M:Gemstone.Ticks.op_Addition(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_BitwiseAnd(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns logical bitwise AND of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_BitwiseOr(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns logical bitwise OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Division(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Equality(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_ExclusiveOr(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Exponent(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:System.Double" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_False(Gemstone.Ticks)">
      <summary>
            Returns true if value is equal to zero.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_GreaterThan(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_GreaterThanOrEqual(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.Ticks)~System.Int64">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Ticks" />, represented in ticks, to an <see cref="T:System.Int64" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.Int64" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.Ticks)~System.DateTime">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Ticks" />, represented in ticks, to a <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.DateTime" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.Ticks)~System.TimeSpan">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Ticks" />, represented in ticks, to a <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:System.TimeSpan" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.Ticks)~Gemstone.NtpTimeTag">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Ticks" />, represented in ticks, to an <see cref="T:Gemstone.NtpTimeTag" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.NtpTimeTag" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.Ticks)~Gemstone.UnixTimeTag">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Ticks" />, represented in ticks, to a <see cref="T:Gemstone.UnixTimeTag" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.UnixTimeTag" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(Gemstone.TimeTagBase)~Gemstone.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:Gemstone.TimeTagBase" />, to a <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.TimeTagBase" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(System.DateTime)~Gemstone.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.DateTime" />, to a <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.DateTime" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(System.Int64)~Gemstone.Ticks">
      <summary>
            Implicitly converts value, represented in ticks, to a <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.Int64" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Implicit(System.TimeSpan)~Gemstone.Ticks">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan" />, to a <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">
        <see cref="T:System.TimeSpan" /> value to convert.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Inequality(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_LeftShift(Gemstone.Ticks,System.Int32)">
      <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> number of bits to shift.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_LessThan(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_LessThanOrEqual(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">
        <see cref="T:Gemstone.Ticks" /> left hand operand.</param>
      <param name="value2">
        <see cref="T:Gemstone.Ticks" /> right hand operand.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Modulus(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Multiply(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_OnesComplement(Gemstone.Ticks)">
      <summary>
            Returns bitwise complement of value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_RightShift(Gemstone.Ticks,System.Int32)">
      <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to shift.</param>
      <param name="shifts">
        <see cref="T:System.Int32" /> number of bits to shift.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_Subtraction(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">Left hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <param name="value2">Right hand <see cref="T:Gemstone.Ticks" /> operand.</param>
      <returns>
        <see cref="T:Gemstone.Ticks" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.op_True(Gemstone.Ticks)">
      <summary>
            Returns true if value is not zero.
            </summary>
      <param name="value">
        <see cref="T:Gemstone.Ticks" /> value to evaluate.</param>
      <returns>
        <see cref="T:System.Boolean" /> value representing the result.</returns>
    </member>
    <member name="M:Gemstone.Ticks.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or greater than <see cref="F:Gemstone.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Ticks.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or greater than <see cref="F:Gemstone.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Ticks.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or greater than <see cref="F:Gemstone.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Ticks.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Ticks" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Ticks" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or greater than <see cref="F:Gemstone.Ticks.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="F:Gemstone.Ticks.PerDay">
      <summary>
            Number of 100-nanosecond ticks in one day.
            </summary>
    </member>
    <member name="F:Gemstone.Ticks.PerHour">
      <summary>
            Number of 100-nanosecond ticks in one hour.
            </summary>
    </member>
    <member name="F:Gemstone.Ticks.PerMicrosecond">
      <summary>
            Number of 100-nanosecond ticks in one microsecond.
            </summary>
    </member>
    <member name="F:Gemstone.Ticks.PerMillisecond">
      <summary>
            Number of 100-nanosecond ticks in one millisecond.
            </summary>
    </member>
    <member name="F:Gemstone.Ticks.PerMinute">
      <summary>
            Number of 100-nanosecond ticks in one minute.
            </summary>
    </member>
    <member name="F:Gemstone.Ticks.PerSecond">
      <summary>
            Number of 100-nanosecond ticks in one second.
            </summary>
    </member>
    <member name="M:Gemstone.Ticks.RoundToSecondDistribution(Gemstone.Ticks,System.Double,Gemstone.Ticks)">
      <summary>
            Returns the nearest distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="baseline"> Starting Timestamp of the Distribution.</param>
      <returns>The nearest distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:Gemstone.Ticks.RoundToSubsecondDistribution(Gemstone.Ticks,System.Int32)">
      <summary>
            Returns the nearest sub-second distribution timestamp for given <paramref name="timestamp" />.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <returns>The nearest sub-second distribution timestamp for given <paramref name="timestamp" />.</returns>
    </member>
    <member name="M:Gemstone.Ticks.SubsecondDistribution(System.Int32)">
      <summary>
            Gets a sub-second time distribution in <see cref="T:Gemstone.Ticks" /> for the specified <paramref name="samplesPerSecond" />.
            </summary>
      <param name="samplesPerSecond">Samples per second.</param>
      <returns>Array of sub-second time distribution in <see cref="T:Gemstone.Ticks" />.</returns>
    </member>
    <member name="P:Gemstone.Ticks.SystemTimer">
      <summary>
            Gets a high-resolution number of seconds, including fractional seconds, that have
            elapsed since 12:00:00 midnight, January 1, 0001.
            </summary>
    </member>
    <member name="M:Gemstone.Ticks.TimeIsValid(Gemstone.Ticks,Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value, is valid by comparing it to the specified
            current time.
            </summary>
      <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of <paramref name="currentTime" />. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.TimeIsValid(Gemstone.Ticks,System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value, is valid by comparing it to the specified
            current time.
            </summary>
      <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of <paramref name="currentTime" />. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.ToDays">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of days.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in days.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of days
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToElapsedTimeString">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
            Note that this ToElapsedTimeString overload will not display fractional seconds. To allow
            display of fractional seconds, or completely remove second resolution from the textual
            representation, use the <see cref="M:Gemstone.Ticks.ToElapsedTimeString(System.Int32,System.Double)" /> overload instead.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToElapsedTimeString(System.Int32,System.Double)">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
            Set <paramref name="secondPrecision" /> to -1 to suppress seconds display, this will
            force minimum resolution of time display to minutes.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.ToElapsedTimeString(System.Int32,System.String[],System.Double)">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
        <para>
            Set <paramref name="secondPrecision" /> to -1 to suppress seconds display, this will
            force minimum resolution of time display to minutes.
            </para>
        <para>
          <paramref name="timeNames" /> array needs one string entry for each of the following names:<br />
            " year", " years", " day", " days", " hour", " hours", " minute", " minutes", " second", " seconds", "less than ".
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.ToHours">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of hours.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in hours.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of hours
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToMicroseconds">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of microseconds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in microseconds.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of microseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToMicroseconds(Gemstone.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to microseconds.
            </summary>
      <param name="value">Number of ticks to convert to microseconds.</param>
      <returns>Number microseconds represented by specified <paramref name="value" /> in ticks.</returns>
      <remarks>
            If <paramref name="value" /> represents an instant in time, returned value will represent the number of microseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToMilliseconds">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of milliseconds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in milliseconds.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of milliseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToMilliseconds(Gemstone.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to milliseconds.
            </summary>
      <param name="value">Number of ticks to convert to milliseconds.</param>
      <returns>Number milliseconds represented by specified <paramref name="value" /> in ticks.</returns>
      <remarks>
            If <paramref name="value" /> represents an instant in time, returned value will represent the number of milliseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToMinutes">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of minutes.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in minutes.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of minutes
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToSecondDistribution(Gemstone.Ticks,System.Double,Gemstone.Ticks,System.Int32)">
      <summary>
            Returns the distribution timestamp for given <paramref name="timestamp" /> or <see cref="F:Gemstone.Ticks.MinValue" /> if there is no TS within the specified Tolerance.
            </summary>
      <param name="timestamp">Timestamp to align.</param>
      <param name="samplesPerSecond">Samples per second to use for distribution.</param>
      <param name="tolerance">Tolerance of the TS in ticks.</param>
      <param name="baseline"> Starting Timestamp of the Distribution.</param>
      <returns>The distribution timestamp for given <paramref name="timestamp" />or <see cref="F:Gemstone.Ticks.MinValue" /> .</returns>
    </member>
    <member name="M:Gemstone.Ticks.ToSeconds">
      <summary>
            Gets the <see cref="T:Gemstone.Ticks" /> value in equivalent number of seconds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Ticks" /> in seconds.</returns>
      <remarks>
            If <see cref="T:Gemstone.Ticks" /> value represents an instant in time, returned value will represent the number of seconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToSeconds(Gemstone.Ticks)">
      <summary>
            Converts <paramref name="value" />, in 100-nanosecond tick intervals, to seconds.
            </summary>
      <param name="value">Number of ticks to convert to seconds.</param>
      <returns>Number seconds represented by specified <paramref name="value" /> in ticks.</returns>
      <remarks>
            If <paramref name="value" /> represents an instant in time, returned value will represent the number of seconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.ToString">
      <summary>
            Converts the value of the <see cref="T:Gemstone.Ticks" /> value to its equivalent <see cref="T:System.DateTime" /> string representation.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> string representation of the <see cref="T:Gemstone.Ticks" /> value.</returns>
    </member>
    <member name="M:Gemstone.Ticks.ToString(System.IFormatProvider)">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value to its equivalent string representation, using
            the specified culture-specific <see cref="T:System.DateTime" /> format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.ToString(System.String)">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value to its equivalent string representation, using
            the specified <see cref="T:System.DateTime" /> format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the <see cref="T:Gemstone.Ticks" /> value to its equivalent string representation, using
            specified format and culture-specific <see cref="T:System.DateTime" /> format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Ticks.Truncate(System.Int64)">
      <summary>
            Gets a new <see cref="T:Gemstone.Ticks" /> value truncated by removing fractions of the <see cref="T:System.Int64" /> arguement.
            </summary>
      <param name="ticks">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ticks</parameter>
            <parameter>M:Gemstone.Ticks.Truncate(System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <returns>New <see cref="T:Gemstone.Ticks" /> object.</returns>
      <remarks>
            If <see cref="T:System.Int64" /> value represents the number of ticks in a second, the truncated value will represent Ticks rounded
            down to the nearest whole second.
            </remarks>
    </member>
    <member name="M:Gemstone.Ticks.TryParse(System.String,Gemstone.Ticks@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Ticks" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Ticks" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or greater than <see cref="F:Gemstone.Ticks.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Ticks.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Ticks@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Ticks" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Ticks" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Ticks.MinValue" /> or
            greater than <see cref="F:Gemstone.Ticks.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.UtcTimeIsValid(Gemstone.Ticks,Gemstone.Ticks)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
      <returns>True, if UTC time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of system clock time in UTC. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero.
            </exception>
    </member>
    <member name="M:Gemstone.Ticks.UtcTimeIsValid(System.Double,System.Double)">
      <summary>
            Determines if time, represented by <see cref="T:Gemstone.Ticks" /> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
      <returns>True, if UTC time represented by <see cref="T:Gemstone.Ticks" /> value, is within the specified range.</returns>
      <remarks>
            Time, represented by <see cref="T:Gemstone.Ticks" /> value, is considered valid if it exists within the specified
            <paramref name="lagTime" /> and <paramref name="leadTime" /> range of system clock time in UTC. Note
            that <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lagTime" /> and <paramref name="leadTime" /> must be greater than zero, but can be less than one.
            </exception>
    </member>
    <member name="F:Gemstone.Ticks.Value">
      <summary>
            Time value stored in ticks.
            </summary>
    </member>
    <member name="T:Gemstone.TicksConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Ticks" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Ticks" /> reports a type code of <see cref="F:System.TypeCode.Int64" />, the converter will convert
            to and from <c>long</c> values as well as other types supported by <see cref="T:System.ComponentModel.Int64Converter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.TicksConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.TicksConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.TicksConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.TicksConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.TicksConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.TicksConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.TicksJsonConverter">
      <summary>
            Provides a JSON converter for <see cref="T:Gemstone.Ticks" /> values.
            </summary>
    </member>
    <member name="M:Gemstone.TicksJsonConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.TicksJsonConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.TicksJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Reads and converts the JSON to type <typeparamref name="T" />.</summary>
      <param name="reader">The reader.</param>
      <param name="typeToConvert">The type to convert.</param>
      <param name="options">An object that specifies serialization options to use.</param>
      <returns>The converted value.</returns>
    </member>
    <member name="M:Gemstone.TicksJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Gemstone.Ticks,System.Text.Json.JsonSerializerOptions)">
      <summary>Writes a specified value as JSON.</summary>
      <param name="writer">The writer to write to.</param>
      <param name="value">The value to convert to JSON.</param>
      <param name="options">An object that specifies serialization options to use.</param>
    </member>
    <member name="T:Gemstone.TimerCapabilities">
      <summary>
            Represents information about the system's multimedia timer capabilities.
            </summary>
    </member>
    <member name="F:Gemstone.TimerCapabilities.PeriodMaximum">
      <summary>Maximum supported period in milliseconds.</summary>
    </member>
    <member name="F:Gemstone.TimerCapabilities.PeriodMinimum">
      <summary>Minimum supported period in milliseconds.</summary>
    </member>
    <member name="T:Gemstone.TimerStartException">
      <summary>
            Represents an exception that is thrown when a <see cref="T:Gemstone.PrecisionTimer" /> fails to start.
            </summary>
    </member>
    <member name="M:Gemstone.TimerStartException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.TimerStartException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="T:Gemstone.TimeTagBase">
      <summary>
            Represents the base class for alternate time-tag implementations.
            </summary>
    </member>
    <member name="M:Gemstone.TimeTagBase.#ctor(System.Int64,Gemstone.Ticks)">
      <summary>
            Creates a new <see cref="T:Gemstone.TimeTagBase" />, given standard .NET <see cref="T:System.DateTime" />.
            </summary>
      <param name="baseDateOffsetTicks">Ticks of time-tag base.</param>
      <param name="timestamp">Timestamp in <see cref="T:Gemstone.Ticks" /> used to create time-tag from.</param>
    </member>
    <member name="M:Gemstone.TimeTagBase.#ctor(System.Int64,System.Decimal)">
      <summary>
            Creates a new <see cref="T:Gemstone.TimeTagBase" />, given number base time (in ticks) and seconds since base time.
            </summary>
      <param name="baseDateOffsetTicks">Ticks of time-tag base.</param>
      <param name="seconds">Number of seconds since base time.</param>
    </member>
    <member name="M:Gemstone.TimeTagBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:Gemstone.TimeTagBase" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="P:Gemstone.TimeTagBase.BaseDateOffsetTicks">
      <summary>
            Gets ticks representing the absolute minimum time of this time-tag implementation.
            </summary>
    </member>
    <member name="M:Gemstone.TimeTagBase.CompareTo(Gemstone.TimeTagBase)">
      <summary>
            Compares the <see cref="T:Gemstone.TimeTagBase" /> with another <see cref="T:Gemstone.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:Gemstone.TimeTagBase" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.CompareTo(System.DateTime)">
      <summary>
            Compares the <see cref="T:Gemstone.TimeTagBase" /> with a <see cref="T:System.DateTime" />.
            </summary>
      <param name="other">The <see cref="T:System.DateTime" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.CompareTo(System.Object)">
      <summary>
            Compares the <see cref="T:Gemstone.TimeTagBase" /> with the specified <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Object" /> is not an <see cref="T:Gemstone.TimeTagBase" /> or a <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="F:Gemstone.TimeTagBase.DefaultFormat">
      <summary>
            Default format for <see cref="T:Gemstone.TimeTagBase" /> implementations.
            </summary>
    </member>
    <member name="M:Gemstone.TimeTagBase.Equals(Gemstone.TimeTagBase)">
      <summary>
            Determines whether the specified <see cref="T:Gemstone.TimeTagBase" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:Gemstone.TimeTagBase" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:Gemstone.TimeTagBase" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />;
            otherwise, false.
            </returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.Equals(System.DateTime)">
      <summary>
            Determines whether the specified <see cref="T:System.DateTime" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />.
            </summary>
      <param name="other">The <see cref="T:System.DateTime" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:System.DateTime" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />;
            otherwise, false.
            </returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Gemstone.TimeTagBase" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Gemstone.TimeTagBase" />;
            otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Object" /> is not an <see cref="T:Gemstone.TimeTagBase" />.</exception>
    </member>
    <member name="M:Gemstone.TimeTagBase.GetHashCode">
      <summary>
            Serves as a hash function for the current <see cref="T:Gemstone.TimeTagBase" />.
            </summary>
      <returns>A hash code for the current <see cref="T:Gemstone.TimeTagBase" />.</returns>
      <remarks>Hash code based on number of seconds time-tag represents.</remarks>
    </member>
    <member name="M:Gemstone.TimeTagBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this serialization.</param>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Equality(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Equality(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Equality(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThan(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThan(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThan(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThanOrEqual(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThanOrEqual(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_GreaterThanOrEqual(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is greater than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Inequality(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Inequality(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_Inequality(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is not equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is not equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThan(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThan(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThan(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThanOrEqual(Gemstone.TimeTagBase,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThanOrEqual(Gemstone.TimeTagBase,System.DateTime)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.op_LessThanOrEqual(System.DateTime,Gemstone.TimeTagBase)">
      <summary>
            Returns true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />.
            </summary>
      <param name="value1">Value 1 in the comparison.</param>
      <param name="value2">Value 2 in the comparison.</param>
      <returns>true if <paramref name="value1" /> is less than or equal to <paramref name="value2" />; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.ToDateTime">
      <summary>
            Returns standard .NET <see cref="T:System.DateTime" /> representation for time-tag.
            </summary>
      <returns>A <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.ToString">
      <summary>
            Returns basic textual representation for time-tag.
            </summary>
      <returns>A <see cref="T:System.String" /> value representing the time-tag.</returns>
      <remarks>
            Format is <c>"yyyy-MM-dd HH:mm:ss.fff"</c> so that textual representation can be sorted in the
            correct chronological order.
            </remarks>
    </member>
    <member name="M:Gemstone.TimeTagBase.ToString(System.IFormatProvider)">
      <summary>
            Returns textual representation for time-tag using the specified <paramref name="provider" />.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for time-tag.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.ToString(System.String)">
      <summary>
            Returns textual representation for time-tag in the specified <paramref name="format" />.
            </summary>
      <param name="format">Format of text output.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for time-tag.</returns>
    </member>
    <member name="M:Gemstone.TimeTagBase.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns textual representation for time-tag in the specified <paramref name="format" /> using 
            the specified <paramref name="provider" />.
            </summary>
      <param name="format">Format of text output.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <see cref="T:System.String" /> of textual representation for time-tag.</returns>
    </member>
    <member name="P:Gemstone.TimeTagBase.Value">
      <summary>
            Gets or sets number of seconds (including any fractional seconds) since base time.
            </summary>
    </member>
    <member name="T:Gemstone.UnixTimeTag">
      <summary>
            Represents a standard Unix time-tag.
            </summary>
    </member>
    <member name="M:Gemstone.UnixTimeTag.#ctor(Gemstone.Ticks)">
      <summary>
            Creates a new <see cref="T:Gemstone.UnixTimeTag" />, given specified <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="timestamp">Timestamp in <see cref="T:Gemstone.Ticks" /> to create Unix time-tag from (minimum valid date is 1/1/1970).</param>
      <remarks>
            This constructor will accept a <see cref="T:System.DateTime" /> parameter since <see cref="T:Gemstone.Ticks" /> is implicitly castable to a <see cref="T:System.DateTime" />.
            </remarks>
    </member>
    <member name="M:Gemstone.UnixTimeTag.#ctor(System.Decimal)">
      <summary>
            Creates a new <see cref="T:Gemstone.UnixTimeTag" />, given number of seconds since 1/1/1970.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1970.</param>
    </member>
    <member name="M:Gemstone.UnixTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:Gemstone.UnixTimeTag" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="M:Gemstone.UnixTimeTag.#ctor(System.UInt32)">
      <summary>
            Creates a new <see cref="T:Gemstone.UnixTimeTag" />, given number of seconds since 1/1/1970.
            </summary>
      <param name="seconds">Number of seconds since 1/1/1970.</param>
    </member>
    <member name="F:Gemstone.UnixTimeTag.BaseTicks">
      <summary>
            Number of ticks since 1/1/1970.
            </summary>
      <remarks>
            Unix dates are measured as the number of seconds since 1/1/1970.
            </remarks>
    </member>
    <member name="T:Gemstone.UpdateType">
      <summary>
            Indicates the type of update.
            </summary>
    </member>
    <member name="F:Gemstone.UpdateType.Information">
      <summary>
            Update is informational.
            </summary>
    </member>
    <member name="F:Gemstone.UpdateType.Warning">
      <summary>
            Update is a warning.
            </summary>
    </member>
    <member name="F:Gemstone.UpdateType.Alarm">
      <summary>
            Update is an alarm.
            </summary>
    </member>
    <member name="T:Gemstone.USTimeZones">
      <summary>
            Defines a few common United States time zones.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Alaskan">
      <summary>
            Gets the Alaskan time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Atlantic">
      <summary>
            Gets the Atlantic time zone.
            </summary>
      <remarks>This time zone is used by the Commonwealth of Puerto Rico and the United States Virgin Islands.</remarks>
    </member>
    <member name="P:Gemstone.USTimeZones.Central">
      <summary>
            Gets the Central time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Eastern">
      <summary>
            Gets the Eastern time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Hawaiian">
      <summary>
            Gets the Hawaiian time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Mountain">
      <summary>
            Gets the Mountain time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Pacific">
      <summary>
            Gets the Pacific time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Samoa">
      <summary>
            Gets the Samoa time zone.
            </summary>
      <remarks>This time zone is used by the American Samoa.</remarks>
    </member>
    <member name="P:Gemstone.USTimeZones.WestPacific">
      <summary>
            Gets the West Pacific time zone.
            </summary>
      <remarks>
        <para>This time zone is used by Guam and the Commonwealth of the Northern Mariana Islands.</para>
        <para>This is also known as the Chamorro time zone.</para>
      </remarks>
    </member>
    <member name="T:Gemstone.Word">
      <summary>
            Defines functions related to 16-bit words, 32-bit double-words and 64-bit quad-words.
            </summary>
    </member>
    <member name="M:Gemstone.Word.MakeDoubleWord(System.UInt16,System.UInt16)">
      <summary>
            Makes an unsigned double-word (UInt32) from two unsigned words (UInt16).
            </summary>
      <param name="high">High word.</param>
      <param name="low">Low word.</param>
      <returns>An unsigned 32-bit double-word made from the two specified unsigned 16-bit words.</returns>
    </member>
    <member name="M:Gemstone.Word.MakeQuadWord(System.UInt32,System.UInt32)">
      <summary>
            Makes an unsigned quad-word (UInt64) from two unsigned double-words (UInt32).
            </summary>
      <param name="high">High double-word.</param>
      <param name="low">Low double-word.</param>
      <returns>An unsigned 64-bit quad-word made from the two specified unsigned 32-bit double-words.</returns>
    </member>
    <member name="M:Gemstone.Word.MakeWord(System.Byte,System.Byte)">
      <summary>
            Makes an unsigned word (UInt16) from two bytes.
            </summary>
      <param name="high">High byte.</param>
      <param name="low">Low byte.</param>
      <returns>An unsigned 16-bit word made from the two specified bytes.</returns>
    </member>
    <member name="T:Gemstone.ActionExtensions.ActionExtensions">
      <summary>
            Defines extension methods for actions.
            </summary>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is canceled in time, false if not.
            </returns>
      <remarks>
            End users should attach to the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> or <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />
            events to log exceptions if the <paramref name="exceptionAction" /> is not defined.
            </remarks>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <remarks>
            End users should attach to the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> or <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />
            events to log exceptions if the <paramref name="exceptionAction" /> is not defined.
            </remarks>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is canceled, false if not.
            </returns>
      <remarks>
            End users should attach to the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> or <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />
            events to log exceptions if the <paramref name="exceptionAction" /> is not defined.
            </remarks>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <remarks>
            End users should attach to the <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> or <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException" />
            events to log exceptions if the <paramref name="exceptionAction" /> is not defined.
            </remarks>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.TryExecute(System.Action,System.Action{System.Exception})">
      <summary>
            Attempts to execute an action and processes exceptions using the given exception handler.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="exceptionHandler">The handler to be called in the event of an error.</param>
      <returns>
        <c>true</c> if the action was executed without errors; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="exceptionHandler" /> is null</exception>
    </member>
    <member name="T:Gemstone.ArrayExtensions.ArrayExtensions">
      <summary>
            Defines extension functions related to <see cref="T:System.Array" /> manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32)">
      <summary>
            Returns a copy of the specified portion of the <paramref name="array" /> array.
            </summary>
      <param name="array">Source array.</param>
      <param name="startIndex">Offset into <paramref name="array" /> array.</param>
      <param name="length">Length of <paramref name="array" /> array to copy at <paramref name="startIndex" /> offset.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>An array of data copied from the specified portion of the source array.</returns>
      <remarks>
        <para>
            Returned array will be extended as needed to make it the specified <paramref name="length" />, but
            it will never be less than the source array length - <paramref name="startIndex" />.
            </para>
        <para>
            If an existing array of primitives is already available, using the <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" /> directly
            instead of this extension method may be optimal since this method always allocates a new return array.
            Unlike <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />, however, this function also works with non-primitive types.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source array -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <remarks>
            Only use this function if you need a copy of the combined buffers, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined buffers.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other3">Third buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <remarks>
            Only use this function if you need a copy of the combined buffers, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined buffers.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other3">Third buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other4">Fourth buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <remarks>
            Only use this function if you need a copy of the combined buffers, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined buffers.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[][])">
      <summary>
            Combines an array of buffers together as a single image.
            </summary>
      <param name="buffers">Array of byte buffers.</param>
      <returns>Combined buffers.</returns>
      <remarks>
            Only use this function if you need a copy of the combined buffers, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined buffers.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
      <summary>
            Combines specified portions of arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="sourceOffset">Offset into <paramref name="source" /> array to begin copy.</param>
      <param name="sourceCount">Number of bytes to copy from <paramref name="source" /> array.</param>
      <param name="other">Other array to combine to <paramref name="source" /> array.</param>
      <param name="otherOffset">Offset into <paramref name="other" /> array to begin copy.</param>
      <param name="otherCount">Number of bytes to copy from <paramref name="other" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined specified portions of both arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> is outside the range of valid indexes for the associated array -or-
            <paramref name="sourceCount" /> or <paramref name="otherCount" /> is less than 0 -or- 
            <paramref name="sourceOffset" /> or <paramref name="otherOffset" />, 
            and <paramref name="sourceCount" /> or <paramref name="otherCount" /> do not specify a valid section in the associated array.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other">Other array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <param name="other3">Third array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <param name="other3">Third array to combine to <paramref name="source" /> array.</param>
      <param name="other4">Fourth array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[][])">
      <summary>
            Combines array of arrays together into a single array.
            </summary>
      <param name="arrays">Array of arrays to combine.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of arrays.</typeparam>
      <returns>Combined arrays.</returns>
      <remarks>
        <para>
            Only use this function if you need a copy of the combined arrays, it will be optimal
            to use the Linq function <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" /> if you simply need to
            iterate over the combined arrays.
            </para>
        <para>
            This function can easily throw an out of memory exception if there is not enough
            contiguous memory to create an array sized with the combined lengths.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CompareTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
      <summary>
            Returns comparison results of two binary arrays.
            </summary>
      <param name="source">Source array.</param>
      <param name="sourceOffset">Offset into <paramref name="source" /> array to begin compare.</param>
      <param name="other">Other array to compare to <paramref name="source" /> array.</param>
      <param name="otherOffset">Offset into <paramref name="other" /> array to begin compare.</param>
      <param name="count">Number of bytes to compare in both arrays.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>
        <para>
            A signed integer that indicates the relative comparison of <paramref name="source" /> array and <paramref name="other" /> array.
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>Source array is less than other array.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>Source array is equal to other array.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>Source array is greater than other array.</description>
            </item>
          </list>
        </para>
      </returns>
      <remarks>
            Note that if both arrays are <c>null</c> the arrays will be considered equal.
            If one array is <c>null</c> and the other array is not <c>null</c>, the non-null array will be considered larger.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> is outside the range of valid indexes for the associated array -or-
            <paramref name="count" /> is less than 0 -or- 
            <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> and <paramref name="count" /> do not specify a valid section in the associated array.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CompareTo``1(``0[],``0[])">
      <summary>Returns comparison results of two binary arrays.</summary>
      <param name="source">Source array.</param>
      <param name="other">Other array to compare to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>
        <para>
            A signed integer that indicates the relative comparison of <paramref name="source" /> array and <paramref name="other" /> array.
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>Source array is less than other array.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>Source array is equal to other array.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>Source array is greater than other array.</description>
            </item>
          </list>
        </para>
      </returns>
      <remarks>
            Note that if both arrays are <c>null</c> the arrays will be considered equal.
            If one array is <c>null</c> and the other array is not <c>null</c>, the non-null array will be considered larger.
            If the array lengths are not equal, the array with the larger length will be considered larger.
            If the array lengths are equal, the arrays will be compared based on content.
            </remarks>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CountOfSequence``1(``0[],``0[])">
      <summary>
            Searches for the specified <paramref name="sequenceToCount" /> and returns the occurrence count within the <paramref name="array" />.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToCount">Sequence of items to search for.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The occurrence count of the <paramref name="sequenceToCount" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CountOfSequence``1(``0[],``0[],System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToCount" /> and returns the occurence count within the range of elements in the <paramref name="array" />
            that starts at the specified index.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToCount">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The occurrence count of the <paramref name="sequenceToCount" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CountOfSequence``1(``0[],``0[],System.Int32,System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToCount" /> and returns the occurrence count within the range of elements in the <paramref name="array" />
            that starts at the specified index and contains the specified number of elements.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToCount">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <param name="searchLength">Number of bytes in the <paramref name="array" /> to search through.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The occurrence count of the <paramref name="sequenceToCount" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sequenceToCount" /> is null or has zero length.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source array -or-
            <paramref name="searchLength" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[])">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the <paramref name="array" />.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[],System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the range of elements in the <paramref name="array" />
            that starts at the specified index.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[],System.Int32,System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the range of elements in the <paramref name="array" />
            that starts at the specified index and contains the specified number of elements.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <param name="length">Number of bytes in the <paramref name="array" /> to search through.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sequenceToFind" /> is null or has zero length.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source array -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ReadStructure``1(System.Byte[])">
      <summary>
            Reads a structure from a byte array.
            </summary>
      <param name="bytes">Bytes containing structure.</param>
      <typeparam name="T">Type of structure to read.</typeparam>
      <returns>A structure from <paramref name="bytes" />.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ReadStructure``1(System.IO.BinaryReader)">
      <summary>
            Reads a structure from a <see cref="T:System.IO.BinaryReader" />.
            </summary>
      <param name="reader">
        <see cref="T:System.IO.BinaryReader" /> positioned at desired structure.</param>
      <typeparam name="T">Type of structure to read.</typeparam>
      <returns>A structure read from <see cref="T:System.IO.BinaryReader" />.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ValidateParameters``1(``0[],System.Int32,System.Int32)">
      <summary>
            Validates that the specified <paramref name="startIndex" /> and <paramref name="length" /> are valid within the given <paramref name="array" />.
            </summary>
      <param name="array">Array to validate.</param>
      <param name="startIndex">0-based start index into the <paramref name="array" />.</param>
      <param name="length">Valid number of items within <paramref name="array" /> from <paramref name="startIndex" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="array" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Zero``1(``0[])">
      <summary>
            Zero the given buffer in a way that will not be optimized away.
            </summary>
      <param name="buffer">Buffer to zero.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
    </member>
    <member name="T:Gemstone.BitExtensions.BitExtensions">
      <summary>
            Defines extension methods related to bit operations.
            </summary>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Byte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.SByte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Byte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.SByte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
      <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitVal(System.Int32)">
      <summary>
            Gets the bit value for the specified bit index (0 - 63).
            </summary>
      <param name="bit">Bit index (0 - 63)</param>
      <returns>Value of the specified <paramref name="bit" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Parameter must be between 0 and 63.</exception>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,System.Byte)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,System.Byte,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,System.Int16)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,System.Int16,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,System.Int32)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,System.Int64)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,System.Int64,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,System.SByte)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,System.SByte,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,System.UInt16)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,System.UInt16,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,System.UInt32)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,System.UInt32,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,System.UInt64)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,System.UInt64,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Byte,System.Byte)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int16,System.Int16)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int32,System.Int32)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int64,System.Int64)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.SByte,System.SByte)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt16,System.UInt16)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt32,System.UInt32)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt64,System.UInt64)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Byte,Gemstone.Bits,System.Byte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Byte,System.Byte,System.Byte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int16,Gemstone.Bits,System.Int16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int16,System.Int16,System.Int16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int32,Gemstone.Bits,System.Int32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int64,Gemstone.Bits,System.Int64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int64,System.Int64,System.Int64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.SByte,Gemstone.Bits,System.SByte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.SByte,System.SByte,System.SByte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt16,Gemstone.Bits,System.UInt16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt16,System.UInt16,System.UInt16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt32,Gemstone.Bits,System.UInt32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt64,Gemstone.Bits,System.UInt64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt64,System.UInt64,System.UInt64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="T:Gemstone.Caching.MemoryCache`1">
      <summary>
            Represents a generic sliding memory cache for a specific type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">Type of value to cache.</typeparam>
      <remarks>
            Each type T should be unique unless cache can be safely shared.
            </remarks>
    </member>
    <member name="M:Gemstone.Caching.MemoryCache`1.GetOrAdd(System.String,System.Double,System.Func{`0},System.Runtime.Caching.CacheEntryRemovedCallback)">
      <summary>
            Gets or adds a value, based on result of <paramref name="valueFactory" />, to the memory cache.
            </summary>
      <param name="cacheName">Name to use as cache key -- this should be unique per <typeparamref name="T" />.</param>
      <param name="expirationTime">Expiration time, in minutes, for cached value.</param>
      <param name="valueFactory">Function to generate value to add to cache -- only called if value is not already cached.</param>
      <param name="removedCallBack">Optional function to call when cache entry is removed.</param>
      <returns>
            Value from cache if already cached; otherwise, new value generated by <paramref name="valueFactory" />.
            </returns>
    </member>
    <member name="M:Gemstone.Caching.MemoryCache`1.GetOrAdd(System.String,System.Func{`0},System.Runtime.Caching.CacheEntryRemovedCallback)">
      <summary>
            Gets or adds a value, based on result of <paramref name="valueFactory" />, to the memory cache. Cache defaults to a 1-minute expiration.
            </summary>
      <param name="cacheName">Name to use as cache key -- this should be unique per <typeparamref name="T" />.</param>
      <param name="valueFactory">Function to generate value to add to cache -- only called if value is not already cached.</param>
      <param name="removedCallBack">Optional function to call when cache entry is removed.</param>
      <returns>
            Value from cache if already cached; otherwise, new value generated by <paramref name="valueFactory" />.
            </returns>
    </member>
    <member name="M:Gemstone.Caching.MemoryCache`1.KeepAlive(System.String)">
      <summary>
            Keeps a cache entry alive by resetting its expiration time.
            </summary>
      <param name="cacheName">Name to use as cache key -- this should be unique per <typeparamref name="T" />.</param>
      <returns>
        <c>true</c> if value was found in cache; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Caching.MemoryCache`1.Remove(System.String)">
      <summary>
            Removes a value from the memory cache.
            </summary>
      <param name="cacheName">Specific named memory cache instance to remove from cache.</param>
    </member>
    <member name="M:Gemstone.Caching.MemoryCache`1.TryGet(System.String,`0@)">
      <summary>
            Try to get a value from the memory cache.
            </summary>
      <param name="cacheName">Name to use as cache key -- this should be unique per <typeparamref name="T" />.</param>
      <param name="value">Value from cache if already cached; otherwise, default value for <typeparamref name="T" />.</param>
      <returns>
        <c>true</c> if value was found in cache; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.CharExtensions.CharExtensions">
      <summary>
            Defines extension functions related to character manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsAnyOf(System.Char,System.Collections.Generic.IEnumerable{System.Char})">
      <summary>
            Determines if a character matches any character in a sent array.
            </summary>
      <param name="value">The character to check.</param>
      <param name="testChars">The array of characters to test.</param>
      <returns>Boolean value indicating a that the character is in the array.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsHex(System.Char)">
      <summary>
            Returns true if char is hexadecimal digit.
            </summary>
      <param name="value">The character to be tested.</param>
      <returns>true if char is hexadecimal digit; false otherwise</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsInRange(System.Char,System.Char,System.Char)">
      <summary>
            Tests a character to determine if it is between a specified character range
            </summary>
      <param name="value">Input character to process.</param>
      <param name="startOfRange">Beginning of range character.</param>
      <param name="endOfRange">End of range character.</param>
      <returns>
        <c>true</c> is the character is within the range.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsNumeric(System.Char)">
      <summary>
            Tests a character to determine if is a common part of a numeric string (digits or one of "+ - , .")
            </summary>
      <param name="value">The character to check.</param>
      <returns>
        <c>true</c> if numeric character.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsWordTerminator(System.Char)">
      <summary>
            Tests a character to determine if it marks the end of a typical English word.
            </summary>
      <param name="value">Input character to check.</param>
      <returns>
        <c>true</c> if character is a work separator.</returns>
      <remarks>
            Performs no testing for ASCII codes &gt; 127.<br />
            Does not separate words based on punctuation of ' %  - _  <br />
            However does include the angle bracket symbols &lt; &gt; as separators<br /><br />
            For reference the standard char tests are:
            <ul><li>"IsSperator (1) == simple space (32 or 160) only.</li><li>IsPunctuation (23) == . , ! ? : ; " ' [ ] { } ( ) \ / @ % # * &amp; - _  (plus other char's &gt; 127)</li><li>IsSymbol (8) == $ + &lt; &gt; = ^ ` ~</li><li>IsWhiteSpace (6) == control char's 9 thru 13, plus 32 -- TAB, LF, VT, FF, CR, SP</li></ul></remarks>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.RegexEncode(System.Char)">
      <summary>
            Encodes the specified Unicode character in proper Regular Expression format.
            </summary>
      <param name="item">Unicode character to encode in Regular Expression format.</param>
      <returns>Specified Unicode character in proper Regular Expression format.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ToLower(System.Char)">
      <summary>
            Converts <paramref name="value" /> to lower case.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> to convert to lower case.</param>
      <returns>
        <paramref name="value" /> converted to lower case.
            </returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ToUpper(System.Char)">
      <summary>
            Converts <paramref name="value" /> to upper case.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> to convert to upper case.</param>
      <returns>
        <paramref name="value" /> converted to upper case.
            </returns>
    </member>
    <member name="T:Gemstone.Collections.IndexedArray`1">
      <summary>
            A self growing array of items. This class is thread safe.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Gemstone.Collections.IndexedArray`1.#ctor">
      <summary>
            Creates an <see cref="T:Gemstone.Collections.IndexedArray`1" />.
            </summary>
    </member>
    <member name="M:Gemstone.Collections.IndexedArray`1.#ctor(`0)">
      <summary>
            Creates an <see cref="T:Gemstone.Collections.IndexedArray`1" />.
            </summary>
      <param name="defaultValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:Gemstone.Collections.IndexedArray`1.#ctor(`0)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.Collections.IndexedArray`1.Clear">
      <summary>
            Sets all items to their default value
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IndexedArray`1.Item(System.Int32)">
      <summary>
            Gets/Sets the items in this array. Returns the default(t) if the item does not exist, 
            or default(t) is the item in the list.
            </summary>
      <param name="index">the index position to lookup</param>
    </member>
    <member name="T:Gemstone.Collections.IPagedList">
      <summary>
            Defines an interface for <see cref="T:Gemstone.Collections.PagedList`1" /> instances that is usable
            regardless of any specified type.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.Page">
      <summary>
            Gets current page number.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.PageCount">
      <summary>
            Gets calculated page count based on page size and total items count.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.PageSize">
      <summary>
            Gets current page size.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.TotalCount">
      <summary>
            Gets total count of elements in enumeration.
            </summary>
    </member>
    <member name="T:Gemstone.Collections.ListCollection`1">
      <summary>
            A faster and functionally equivalent implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" /></summary>
      <typeparam name="T">The type of the element in the collection</typeparam>
      <remarks>
        <para>
          <see cref="T:System.Collections.ObjectModel.Collection`1" /> is based upon an <see cref="T:System.Collections.Generic.IList`1" />. This means any simple call
            to the class is a function call that cannot be in-lined. This implementation forces the underlying
            item to be <see cref="T:System.Collections.Generic.List`1" /> and shadows many of the methods to call <see cref="T:System.Collections.Generic.List`1" /> 
            instead of <see cref="T:System.Collections.Generic.IList`1" />. 
            </para>
        <para>
            Since this class references the same underlying <see cref="T:System.Collections.Generic.List`1" /> object, it can be 
            successfully implemented as a <see cref="T:Gemstone.Collections.ListCollection`1" /> or casted it its underlying type
            <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </para>
        <para>
            Profiling this class yield a ForEach loop and For loop that executes between 
            2-4 times faster than <see cref="T:System.Collections.ObjectModel.Collection`1" />. This depends on the number of items in the
            list. The fewer the faster. Other operations such as Add/Insert/Remove are closer to 50% faster.
            Count is now in-lined (~20 times faster).
            </para>
        <para>
            This performance is negated if accessing this class via the IList interface. When possible, use
            only strongly typed names.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.#ctor">
      <summary>
            Creates a <see cref="T:Gemstone.Collections.ListCollection`1" /></summary>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>
            Creates a <see cref="T:Gemstone.Collections.ListCollection`1" /></summary>
      <param name="list">a list to wrap this class around.</param>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Gemstone.Collections.ListCollection`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:Gemstone.Collections.ListCollection`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>
            The element at the specified index.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:Gemstone.Collections.ListCollection`1.Items">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:Gemstone.Collections.ListCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="T:Gemstone.Collections.PagedList`1">
      <summary>
            Defines a paged list for an enumeration.
            </summary>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1" /> to paginate.</typeparam>
      <remarks>
            This class returns the elements for the specified page number for a given page size and
            also provides the calculated page count based on input parameters.
            </remarks>
    </member>
    <member name="M:Gemstone.Collections.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Collections.PagedList`1" />.
            </summary>
      <param name="source">Source enumeration to paginate.</param>
      <param name="page">Page number (1-based).</param>
      <param name="pageSize">Page size.</param>
      <param name="count">Total records in source if known.</param>
      <remarks>
            If count is known or can be calculated early, specify the value in the
            <paramref name="count" /> parameter as an optimization to prevent a full
            enumeration on <paramref name="source" /> to get a count.
            </remarks>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.Page">
      <summary>
            Gets current page number.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.PageCount">
      <summary>
            Gets calculated page count based on page size and total items count.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.PageSize">
      <summary>
            Gets current page size.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.TotalCount">
      <summary>
            Gets total count of elements in enumeration.
            </summary>
    </member>
    <member name="T:Gemstone.Collections.CollectionExtensions.CollectionExtensions">
      <summary>
            Defines extension functions related to manipulation of arrays and collections.
            </summary>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or updated.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary after updating.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValueFactory">The function used to generate a value for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or updated.</param>
      <param name="value">The value to be assigned to the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary after updating.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValue">The value to be added for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the specified <paramref name="items" /> to the <paramref name="collection" />.
            </summary>
      <param name="collection">The collection to which the <paramref name="items" /> are to be added.</param>
      <param name="items">The elements to be added to the <paramref name="collection" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.All(System.Collections.BitArray,System.Boolean)">
      <summary>
            Returns <c>true</c> if all items in <see cref="T:System.Collections.BitArray" /> are equal to <paramref name="value" />.
            </summary>
      <param name="source">Source <see cref="T:System.Collections.BitArray" />.</param>
      <param name="value">
        <see cref="T:System.Boolean" /> value to test for.</param>
      <returns>
        <c>true</c> if all items in <see cref="T:System.Collections.BitArray" /> are equal to <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AllParallel``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.Tasks.ParallelOptions)">
      <summary>
            Determines whether all elements of a sequence satisfy a condition with each item being tested in parallel.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <param name="options">Any <see cref="T:System.Threading.Tasks.ParallelOptions" /> to apply.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>true</c> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Any(System.Collections.BitArray,System.Boolean)">
      <summary>
            Returns <c>true</c> if any item in <see cref="T:System.Collections.BitArray" /> is equal to <paramref name="value" />.
            </summary>
      <param name="source">Source <see cref="T:System.Collections.BitArray" />.</param>
      <param name="value">
        <see cref="T:System.Boolean" /> value to test for.</param>
      <returns>
        <c>true</c> if any item in <see cref="T:System.Collections.BitArray" /> is equal to <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.CompareTo``1(``0[],``0[],System.Boolean)">
      <summary>Compares two arrays.</summary>
      <param name="array1">The first type array to compare to.</param>
      <param name="array2">The second type array to compare against.</param>
      <param name="orderIsImportant">
        <c>true</c> if order of elements should be considered for equality; otherwise, <c>false</c>.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the array.</typeparam>
      <returns>An <see cref="T:System.Int32" /> which returns 0 if they are equal, 1 if <paramref name="array1" /> is larger, or -1 if <paramref name="array2" /> is larger.</returns>
      <exception cref="T:System.ArgumentException">Cannot compare multidimensional arrays.</exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Copy``1(``0[],System.Int32,System.Int32)">
      <summary>
            Returns a copy of the <see cref="T:System.Array" />.
            </summary>
      <param name="source">The source <see cref="T:System.Array" /> whose elements are to be copied.</param>
      <param name="startIndex">The source array index from where the elements are to be copied.</param>
      <param name="length">The number of elements to be copied starting from the startIndex.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to be copied.</typeparam>
      <returns>An <see cref="T:System.Array" /> of elements copied from the specified portion of the source <see cref="T:System.Array" />.</returns>
      <remarks>
            Returned <see cref="T:System.Array" /> will be extended as needed to make it the specified <paramref name="length" />, but
            it will never be less than the source <see cref="T:System.Array" /> length - <paramref name="startIndex" />.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source <see cref="T:System.Array" /> -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
      <summary>
            Returns only the elements whose keys are distinct.
            </summary>
      <param name="source">The collection of source objects.</param>
      <param name="keySelector">The function used to access the keys of the source objects.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <typeparam name="TSource">The type of the source objects in the collection.</typeparam>
      <typeparam name="TKey">The type of the keys to be compared.</typeparam>
      <returns>The elements from <paramref name="source" /> whose keys are distinct.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetColumn``1(``0[0:,0:],System.Int32)">
      <summary>
            Gets a column of data out of a 2-dimensional array.
            </summary>
      <param name="source">Source array.</param>
      <param name="columnIndex">Column index, i.e., dimension one value, to retrieve.</param>
      <typeparam name="T">Type of array.</typeparam>
      <returns>Values from specified <paramref name="columnIndex" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added to the dictionary if it does not already exist.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added to the dictionary if it does not already exist.</param>
      <param name="value">The value to assign to the key if the key does not already exist.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Attempts to get the value for the given key and returns the default value instead if the key does not exist in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="dictionary">The dictionary to check for the given key.</param>
      <param name="key">The key to be checked for the existence of a value.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary or the default value if no such value exists.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Attempts to get the value for the given key and returns the default value instead if the key does not exist in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="dictionary">The dictionary to check for the given key.</param>
      <param name="key">The key to be checked for the existence of a value.</param>
      <param name="defaultValueFactory">The function used to generate the default value if no value exists for the given key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary or the default value if no such value exists.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Returns elements in the specified range from the <paramref name="collection" />.
            </summary>
      <param name="collection">The collection from which elements are to be retrieved.</param>
      <param name="index">The 0-based index position in the <paramref name="collection" /> from which elements are to be retrieved.</param>
      <param name="count">The number of elements to be retrieved from the <paramref name="collection" /> starting at the <paramref name="index" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetRow``1(``0[0:,0:],System.Int32)">
      <summary>
            Gets a row of data out of a 2-dimensional array.
            </summary>
      <param name="source">Source array.</param>
      <param name="rowIndex">Row index, i.e., dimension zero value, to retrieve.</param>
      <typeparam name="T">Type of array.</typeparam>
      <returns>Values from specified <paramref name="rowIndex" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the index of the first element of the sequence that satisfies a condition or <c>-1</c> if no such element is found.
            </summary>
      <param name="source">A <see cref="T:System.Collections.Generic.IList`1" /> to find an index in.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements of <paramref name="source" />.</typeparam>
      <returns>Index of the first element in <paramref name="source" /> that matches the specified <paramref name="predicate" />; otherwise, <c>-1</c>.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Char,System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="delimiter">The <see cref="T:System.Char" /> value to look for in the <paramref name="delimitedString" /> as the delimiter.</param>
      <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, using the default
            delimiter ("|") into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.String[],System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="delimiters">An array of delimiters to look for in the <paramref name="delimitedString" /> as the delimiter.</param>
      <param name="convertFromString">Delegate that takes a <see cref="T:System.String" /> and converts to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the majority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0},``0,System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the majority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MajorityBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the majority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MajorityBy``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the majority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Returns the largest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A comparer object.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>Returns the largest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Selects the largest item from the enumeration.</summary>
      <param name="source">An enumeration that contains the objects to be selected from.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the objects to be selected from.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>Returns the largest item from the enumeration.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Median``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Gets the median item(s) from an enumeration, i.e., one return item for odd lengths, two for even lengths.
            </summary>
      <param name="source">An enumeration over which to find the median element(s).</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" /></typeparam>
      <returns>The median item(s) from an enumeration, or <c>null</c> if <paramref name="source" /> is <c>null</c>.</returns>
      <remarks>
            If enumeration length is even, two items will be returned representing the items in the middle of the set;
            otherwise, if the enumeration length is odd, one item will be returned from exactly the middle of the set.
            </remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Merge``3(``0,System.Boolean,System.Collections.Generic.IDictionary{``1,``2}[])">
      <summary>
            Merges elements of multiple dictionaries into a single dictionary.
            </summary>
      <param name="source">Source dictionary to merge with another dictionary.</param>
      <param name="overwriteExisting">Set to <c>true</c> to overwrite duplicate key values as they are encountered.</param>
      <param name="others">Other dictionaries to merge with source dictionary.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> to merge.</typeparam>
      <typeparam name="TKey">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> keys.</typeparam>
      <typeparam name="TValue">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> values.</typeparam>
      <returns>A merged collection of all unique dictionary elements, all <paramref name="others" /> merged left to the source.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Merge``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
      <summary>
            Merges elements of multiple dictionaries into a single dictionary with no duplicate key values overwritten.
            </summary>
      <param name="source">Source dictionary to merge with another dictionary.</param>
      <param name="others">Other dictionaries to merge with source dictionary.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> to merge.</typeparam>
      <typeparam name="TKey">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> keys.</typeparam>
      <typeparam name="TValue">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> values.</typeparam>
      <returns>
            A merged collection of all unique dictionary elements, all <paramref name="others" /> merged left to the source with no duplicate
            key values overwritten (i.e., first encountered key value pair is the one that remains in the returned merged dictionary).
            </returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Middle``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Gets the middle item(s) from an enumeration, i.e., one return item for odd lengths, two for even lengths.
            </summary>
      <param name="source">An enumeration over which to find the middle element(s).</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" /></typeparam>
      <returns>The middle item(s) from an enumeration, or <c>null</c> if <paramref name="source" /> is <c>null</c>.</returns>
      <remarks>
            If enumeration length is even, two items will be returned representing the items in the middle of the set;
            otherwise, if the enumeration length is odd, one item will be returned from exactly the middle of the set.
            </remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Returns the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A comparer object.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>Returns the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Selects the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that contains the objects to be selected from.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the objects to be selected from.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>Returns the smallest item from the enumeration.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Minority``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the minority value in the collection, or default type value if no item represents the minority.
            </summary>
      <param name="source">An enumeration over which to find the minority element.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Minority``1(System.Collections.Generic.IEnumerable{``0},``0,System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the minority value in the collection, or <paramref name="defaultValue" /> if no item represents the minority.
            </summary>
      <param name="source">An enumeration over which to find the minority element.</param>
      <param name="defaultValue">Default value to return if no item represents the minority.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinorityBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the minority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinorityBy``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the minority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.RemoveWhere``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
      <summary>
            Iterates through each item in the list. Allowing items to be removed from the list.
            </summary>
      <param name="list">the list to iterate though</param>
      <param name="shouldRemove">the function to call to determine 
            if the items should be removed from the list. </param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.List`1" />.</typeparam>
      <returns>
            The number of items removed from the list.
            </returns>
      <remarks>
            In order to minimize the overhead of a removal. Any item removed with be replaced with
            the last item in the list. Sequence will not be preserved using this method.
            </remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0})">
      <summary>
            Rearranges all the elements in the list into a highly-random order.
            </summary>
      <param name="source">The input list of generic types to scramble.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>This function uses a cryptographically strong random number generator to perform the scramble.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Rearranges all the elements in the list into a repeatable pseudo-random order.
            </summary>
      <param name="source">The input list of generic types to scramble.</param>
      <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>This function uses the <see cref="T:System.Random" /> generator to perform the scramble using a sequence that is repeatable.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts an enumeration to a string, using the default delimiter ("|") that can later be
            converted back to a list using LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by the '|' character.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
      <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <param name="delimiter">The delimiting character used.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by <paramref name="delimiter" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <param name="delimiter">The delimiting <see cref="T:System.String" /> used.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by <paramref name="delimiter" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Converts a name/value collection to a dictionary.
            </summary>
      <param name="collection">Name/value collection.</param>
      <returns>Dictionary converted from a name/value collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a <see cref="T:Gemstone.Collections.PagedList`1" /> to paginate <paramref name="source" /> enumeration for
            a given <paramref name="page" /> and specified <paramref name="pageSize" />.
            </summary>
      <param name="source">Source enumeration to paginate.</param>
      <param name="page">Page number (1-based).</param>
      <param name="pageSize">Page size.</param>
      <param name="count">Total records in source if known.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1" /> to paginate.</typeparam>
      <returns>Set of items on a given <paramref name="page" /> for specified <paramref name="pageSize" />.</returns>
      <remarks>
            If count is known or can be calculated early, specify the value in the
            <paramref name="count" /> parameter as an optimization to prevent a full
            enumeration on <paramref name="source" /> to get a count.
            </remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Unscramble``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Rearranges all the elements in the list previously scrambled with <see cref="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)" /> back into their original order.
            </summary>
      <param name="source">The input list of generic types to unscramble.</param>
      <param name="seed">The same number used in <see cref="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)" /> call to scramble original list.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <remarks>This function uses the <see cref="T:System.Random" /> generator to perform unscramble using a sequence that is repeatable.</remarks>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.UpdateRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Updates <paramref name="collection" /> starting at the <paramref name="index" /> with the specified <paramref name="items" />.
            </summary>
      <param name="collection">The collection whose elements are to be updated with the specified <paramref name="items" />.</param>
      <param name="index">The zero-based index in the <paramref name="collection" /> at which elements are to be updated.</param>
      <param name="items">The elements that will replace the <paramref name="collection" /> elements starting at the <paramref name="index" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index" /> is present in the <paramref name="collection" />.</exception>
    </member>
    <member name="T:Gemstone.Collections.IAsyncEnumerableExtensions.IAsyncEnumerableExtensions">
      <summary>
            Defines extension functions related to manipulation of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> implementations.
            </summary>
    </member>
    <member name="M:Gemstone.Collections.IAsyncEnumerableExtensions.IAsyncEnumerableExtensions.WithAwaitConfiguredCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Boolean)">
      <summary>
            Sets the <see cref="T:System.Threading.CancellationToken" /> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> when
            iterating and configures how awaits on the tasks returned from an async iteration will be performed, defaults to not capturing.
            </summary>
      <param name="source">The source enumerable being iterated.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
      <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
      <typeparam name="T">The type of the objects being iterated.</typeparam>
      <returns>The configured enumerable.</returns>
      <remarks>
            The <see cref="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" /> extension method sets <paramref name="continueOnCapturedContext" /> to
            <c>true</c>, this extension method allows the <param name="continueOnCapturedContext" /> to be set <c>false</c>, the default value for
            this extension method.
            </remarks>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating Acronyms, i.e., expressions
            that consist only of upper case letters, numbers, '!', '-', '@', '#', '_' , '.' or '$'.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating e-mail addresses.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute">
      <summary>
            Defines an attribute that will define an initial value script for a modeled table field
            that will get evaluated and assigned in the target use environment, e.g., Javascript.
            </summary>
      <remarks>
        <para>
            Example to set initial value to 30 days from now using a Javascript expression:
            <c>[InitialValueScript("(new Date()).addDays(30)")]</c></para>
        <para>
            Note that the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> should be used to set any constant values
            for new modeled record instances and the <c>gemstone.expressions.model.DefaultValueExpressionAttribute</c> should
            be used for applying any needed server-side run-time expression defaults, either of these will
            get assigned when using the <c>gemstone.data.model.TableOperations&lt;T&gt;.NewRecord</c> function.
            The <see cref="T:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute" /> is used to initialize the property value using
            an expression that gets evaluated in the target environment.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute" />/
            </summary>
      <param name="initialValueScript">Initial value expression for a modeled table field.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute.InitialValueScript">
      <summary>
            Gets the initial value expression for a modeled table field.
            </summary>
      <remarks>
            Expression should be in target language, e.g., Javascript.
            </remarks>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute">
      <summary>
            Defines an attribute that will define the field name that represents a record marked for deletion.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute" />.
            </summary>
      <param name="fieldName">Field name used as is-deleted record marker.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute.FieldName">
      <summary>
            Field name used as is-deleted record marker.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.LabelAttribute">
      <summary>
            Defines an attribute that will define a UI label.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.LabelAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.LabelAttribute" />.
            </summary>
      <param name="label">UI label for modeled table field.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.LabelAttribute.Label">
      <summary>
            Gets UI label for modeled table field.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute">
      <summary>
            Represents metadata for a method parameter, including its name, a UI label, and an optional description.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.ComponentModel.DataAnnotations.ParameterAttribute</parameter>
          </include>
        </markup>
      </summary>
      <param name="paramName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>paramName</parameter>
            <parameter>M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="label">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>label</parameter>
            <parameter>M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.ComponentModel.DataAnnotations.ParameterAttribute</parameter>
          </include>
        </markup>
      </summary>
      <param name="paramName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>paramName</parameter>
            <parameter>M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="label">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>label</parameter>
            <parameter>M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="description">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>description</parameter>
            <parameter>M:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.#ctor(System.String,System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.Description">
      <summary>
            Optional description.
            </summary>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.Label">
      <summary>
            Label to show in the UI.
            </summary>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.ParameterAttribute.ParamName">
      <summary>
            Name of the method parameter this metadata applies to.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute">
      <summary>
            Defines an attribute that will define the field name that best represents the row identification to a user.
            </summary>
      <remarks>
            An example of when this would be used is during a record deletion confirmation, e.g:
            Are you sure you want to delete "PrimaryLabel.FieldName.Value"?
            </remarks>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute" />.
            </summary>
      <param name="fieldName">Field name used as primary label.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute.FieldName">
      <summary>
            Field name used as primary label.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating URL's.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.ConfigurationOperation">
      <summary>
            Defines the operation mode for configuration settings.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConfigurationOperation.Disabled">
      <summary>
            Configuration settings are disabled.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConfigurationOperation.ReadOnly">
      <summary>
            Configuration settings are read-only.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.ConfigurationOperation.ReadWrite">
      <summary>
            Configuration settings are read-write.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.IDefineSettings">
      <summary>
            Defines as interface that specifies that this object can define settings for a config file.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.IDefineSettings.DefineSettings(Gemstone.Configuration.Settings,System.String)">
      <summary>
            Establishes default settings for the config file.
            </summary>
      <param name="settings">Settings instance used to hold configuration.</param>
      <param name="settingsCategory">The config file settings category under which the settings are defined.</param>
    </member>
    <member name="T:Gemstone.Configuration.IPersistSettings">
      <summary>
            Defines as interface that specifies that this object can persist settings to a config file.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.IPersistSettings.LoadSettings">
      <summary>
            Loads saved settings from the config file.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.IPersistSettings.PersistSettings">
      <summary>
            Determines whether the object settings are to be persisted to the config file.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.IPersistSettings.SaveSettings">
      <summary>
            Saves settings to the config file.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.IPersistSettings.SettingsCategory">
      <summary>
            Gets or sets the category name under which the object settings are persisted in the config file.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.Settings">
      <summary>
            Defines system settings for an application.
            </summary>
      <remarks>
            Configuration settings are loaded from common sources for a Gemstone project. The properties
            <see cref="P:Gemstone.Configuration.Settings.INIFile" />, <see cref="P:Gemstone.Configuration.Settings.SQLite" />, and <see cref="P:Gemstone.Configuration.Settings.EnvironmentalVariables" />
            control the configuration sources that are available and how they are managed. Handling of
            available settings are defined in a hierarchy where the settings are loaded are in the
            following priority order, from lowest to highest:
            <list type="bullet"><item>INI file (defaults.ini) - Machine Level, %programdata% folder</item><item>INI file (settings.ini) - Machine Level, %programdata% folder</item><item>SQLite database (settings.db) - User Level, %appdata% folder</item><item>Environment variables - Machine Level</item><item>Environment variables - User Level</item></list>
            Command line arguments can also be added to the hierarchy to override settings.
            For example:
            <code>
                Settings settings = new()
                {
                    INIFile = ConfigurationOperation.ReadWrite,
                    SQLite = ConfigurationOperation.Disabled         
                };
            
                // Bind settings to configuration sources
                settings.Bind(new ConfigurationBuilder()
                    .ConfigureGemstoneDefaults(settings)
                    .AddCommandLine(args, settings.SwitchMappings));
            </code>
            See the <see cref="P:Gemstone.Configuration.Settings.SwitchMappings" /> property for defining command line switches.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.Settings.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Configuration.Settings" /> instance.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.Settings.Bind(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
      <summary>
            Attempts to bind the <see cref="T:Gemstone.Configuration.Settings" /> instance to configuration values by matching property
            names against configuration keys recursively.
            </summary>
      <param name="builder">Configuration builder used to bind settings.</param>
    </member>
    <member name="P:Gemstone.Configuration.Settings.Configuration">
      <summary>
            Gets the source <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for settings.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.Settings.ConfigureAppSettings(Gemstone.Configuration.AppSettings.IAppSettingsBuilder)">
      <summary>
            Configures the <see cref="T:Gemstone.Configuration.AppSettings.IAppSettingsBuilder" /> for <see cref="T:Gemstone.Configuration.Settings" />.
            </summary>
      <param name="builder">Builder used to configure settings.</param>
    </member>
    <member name="P:Gemstone.Configuration.Settings.Count">
      <summary>
            Gets the sections count for the settings.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.Default">
      <summary>
            Gets the default instance of <see cref="T:Gemstone.Configuration.Settings" /> as a dynamic object.
            </summary>
      <returns>Default instance of <see cref="T:Gemstone.Configuration.Settings" /> as a dynamic object.</returns>
      <exception cref="T:System.InvalidOperationException">Settings have not been initialized.</exception>
    </member>
    <member name="P:Gemstone.Configuration.Settings.EnvironmentalVariables">
      <summary>
            Gets or sets configuration operation mode for environmental variables.
            </summary>
      <exception cref="T:System.InvalidOperationException">Environmental variables cannot be used for read-write configuration operations.</exception>
    </member>
    <member name="M:Gemstone.Configuration.Settings.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="P:Gemstone.Configuration.Settings.INIFile">
      <summary>
            Gets or sets configuration operation mode for INI file settings.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.Instance">
      <summary>
            Gets the default instance of <see cref="T:Gemstone.Configuration.Settings" />.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.IsDirty">
      <summary>
            Gets flag that determines if any settings have been changed.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.Item(System.String)">
      <summary>
            Gets the <see cref="T:Gemstone.Configuration.SettingsSection" /> for the specified key.
            </summary>
      <param name="key">Section key.</param>
    </member>
    <member name="M:Gemstone.Configuration.Settings.Save(Gemstone.Configuration.Settings,System.Boolean)">
      <summary>
            Saves any changed settings.
            </summary>
      <param name="settings">Settings instance.</param>
      <param name="forceSave">Determines if save operation should be forced, i.e., whether settings are dirty or not.</param>
      <remarks>
            This method will not return until the save operation has completed.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.Settings.Save(System.Boolean,System.Boolean)">
      <summary>
            Saves any changed settings.
            </summary>
      <param name="waitForSave">Determines if save operation should wait for completion.</param>
      <param name="forceSave">Determines if save operation should be forced, i.e., whether settings are dirty or not.</param>
    </member>
    <member name="P:Gemstone.Configuration.Settings.SectionNames">
      <summary>
            Gets the names for the settings sections.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.SplitDescriptionLines">
      <summary>
            Gets or sets flag that determines if description lines, e.g., those encoded into an INI file,
            should be split into multiple lines.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.SQLite">
      <summary>
            Gets or sets configuration operation mode for SQLite settings.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.Settings.SwitchMappings">
      <summary>
            Gets the command line switch mappings for <see cref="T:Gemstone.Configuration.Settings" />.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.Settings.SystemSettingsCategory">
      <summary>
            Defines the configuration section name for system settings.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.Settings.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:Gemstone.Configuration.Settings.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed. For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:Gemstone.Configuration.Settings.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:Gemstone.Configuration.Settings.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member to which the value is being assigned. For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="M:Gemstone.Configuration.Settings.UpdateInstance(Gemstone.Configuration.Settings)">
      <summary>
            Updates the default instance of <see cref="T:Gemstone.Configuration.Settings" />.
            </summary>
      <param name="settings">New default instance of <see cref="T:Gemstone.Configuration.Settings" />.</param>
      <remarks>
            This changes the default singleton instance of <see cref="T:Gemstone.Configuration.Settings" /> to the specified instance.
            Use this method with caution as it can lead to unexpected behavior if the default instance is changed.
            </remarks>
    </member>
    <member name="T:Gemstone.Configuration.SettingsSection">
      <summary>
            Defines a dynamic <see cref="T:Gemstone.Configuration.Settings" /> section with typed values.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.Define(System.String,System.Object,System.String,System.String[])">
      <summary>
            Defines a setting for the section.
            </summary>
      <param name="key">Key name of setting to get, case-insensitive.</param>
      <param name="defaultValue">Default value if key does not exist.</param>
      <param name="description">Description of the setting.</param>
      <param name="switchMappings">Optional array of switch mappings for the setting.</param>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.GenerateTypedPrefixedValue(System.Object)">
      <summary>
            Converts a value to a typed string representation.
            </summary>
      <param name="value">Value to convert to a typed representation.</param>
      <returns>String formatted as a type-prefixed value, e.g.: <c>[int]:123</c>.</returns>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.GetOrAdd(System.String,System.Object,System.String,System.String[])">
      <summary>
            Gets the value of the setting with the specified key, if it exists;
            otherwise, the default value for the parameter.
            </summary>
      <param name="key">Key name of setting to get, case-insensitive.</param>
      <param name="defaultValue">Default value if key does not exist.</param>
      <param name="description">Description of the setting.</param>
      <param name="switchMappings">Optional array of switch mappings for the setting.</param>
      <returns>
            Value of the setting with the specified key, if it exists; otherwise,
            the default value for the parameter.
            </returns>
    </member>
    <member name="P:Gemstone.Configuration.SettingsSection.IsDirty">
      <summary>
            Gets flag that determines if the settings section has been modified.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SettingsSection.Item(System.String)">
      <summary>
            Gets the typed value for the specified key.
            </summary>
      <param name="key">Setting key name.</param>
    </member>
    <member name="P:Gemstone.Configuration.SettingsSection.Keys">
      <summary>
            Gets the keys for the settings section.
            </summary>
    </member>
    <member name="P:Gemstone.Configuration.SettingsSection.Name">
      <summary>
            Gets the name of the settings section.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.ParseTypedPrefixedValue(System.String)">
      <summary>
            Gets the parsed type and value of a configuration setting value.
            </summary>
      <param name="setting">Configuration setting value that can be prefixed with a type.</param>
      <returns>Tuple containing the parsed type and, value.</returns>
      <remarks>
        <para>
            Type name is parsed from the beginning of the setting value, if it exists, and is enclosed in brackets,
            e.g.: <c>[int]:123</c> or <c>[System.Int32]:123</c>. If no type name is specified, the assumed default
            type will always be <see cref="T:System.String" />.
            </para>
        <para>
            Common C# names like <c>long</c> and <c>DateTime</c> can be used as type names as well as custom type names.
            Custom type names require the full type name with a namespace, e.g.: <c>[MyNamespace.MyType]:TypeValue</c>.
            Type name lookups are not case-sensitive.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Failed to load specified type.</exception>
      <exception cref="T:System.TypeLoadException">Failed to load type.</exception>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed. For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
    </member>
    <member name="M:Gemstone.Configuration.SettingsSection.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The <c>binder.Name</c> property provides the name of the member to which the value is being assigned. For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty". The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
      <returns>
        <see langword="true" /> if the operation is successful; otherwise, <see langword="false" />. If this method returns <see langword="false" />, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
    </member>
    <member name="T:Gemstone.Configuration.AppSettings.AppSettingsExtensions">
      <summary>
            Defines extensions for managing app settings.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.AppSettingsExtensions.AddAppSettings(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Gemstone.Configuration.AppSettings.IAppSettingsBuilder})">
      <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" /> for app settings to the given <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.
            </summary>
      <param name="configurationBuilder">The configuration builder.</param>
      <param name="buildAction">The action to build app settings.</param>
      <returns>The configuration builder.</returns>
      <remarks>
            This extension provides a simple way to add default values as well as descriptions for app settings
            directly into an application. The source for these is a simple in-memory collection, and additional
            key/value pairs are added so that the initial value and descriptions of these settings can still be
            retrieved even if the settings themselves get overridden by another configuration source.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.AppSettingsExtensions.GetAppSettingDescription(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
      <summary>
            Gets the description of the app setting with the given name.
            </summary>
      <param name="configuration">The configuration that contains the app setting.</param>
      <param name="name">The name of the app setting.</param>
      <returns>The initial value of the app setting.</returns>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.AppSettingsExtensions.GetAppSettingDescription(Microsoft.Extensions.Configuration.IConfigurationSection)">
      <summary>
            Gets the description of the given app setting.
            </summary>
      <param name="setting">The app setting.</param>
      <returns>The description of the app setting.</returns>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.AppSettingsExtensions.GetAppSettingInitialValue(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
      <summary>
            Gets the initial value of the app setting with the given name.
            </summary>
      <param name="configuration">The configuration that contains the app setting.</param>
      <param name="name">The name of the app setting.</param>
      <returns>The initial value of the app setting.</returns>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.AppSettingsExtensions.GetAppSettingInitialValue(Microsoft.Extensions.Configuration.IConfigurationSection)">
      <summary>
            Gets the initial value of the given app setting.
            </summary>
      <param name="setting">The app setting.</param>
      <returns>The initial value of the app setting.</returns>
    </member>
    <member name="T:Gemstone.Configuration.AppSettings.IAppSettingsBuilder">
      <summary>
            Builder for app settings with descriptions.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.IAppSettingsBuilder.Add(System.String,System.String,System.String)">
      <summary>
            Adds an app setting to the builder.
            </summary>
      <param name="name">The name of the setting.</param>
      <param name="value">The value of the setting.</param>
      <param name="description">A description of the setting.</param>
      <returns>The app settings builder.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a duplicate of a previously added app setting</exception>
    </member>
    <member name="M:Gemstone.Configuration.AppSettings.IAppSettingsBuilder.Build">
      <summary>
            Converts the app settings into a collection of key/value pairs.
            </summary>
      <returns>The collection of key/value pairs.</returns>
    </member>
    <member name="T:Gemstone.Configuration.INIConfigurationExtensions.INIConfigurationExtensions">
      <summary>
            Defines extensions for setting up configuration defaults for Gemstone projects.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.INIConfigurationExtensions.INIConfigurationExtensions.GenerateINIFileContents(Microsoft.Extensions.Configuration.IConfiguration,Gemstone.Configuration.INIConfigurationExtensions.INIGenerationOption,System.Boolean)">
      <summary>
            Generates the contents of an INI file based on the configuration settings.
            </summary>
      <param name="configuration">Source configuration.</param>
      <param name="generationOption">Setting for how to generate values in the INI file.</param>
      <param name="splitDescriptionLines">Flag that determines whether long description lines should be split into multiple lines.</param>
      <returns>Generated INI file contents.</returns>
    </member>
    <member name="T:Gemstone.Configuration.INIConfigurationExtensions.INIGenerationOption">
      <summary>
            Defines the options for generating INI files.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.INIConfigurationExtensions.INIGenerationOption.CommentedValue">
      <summary>
            Generate all settings with their values commented.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.INIConfigurationExtensions.INIGenerationOption.UncommentedValue">
      <summary>
            Generate all settings with their values uncommented.
            </summary>
    </member>
    <member name="F:Gemstone.Configuration.INIConfigurationExtensions.INIGenerationOption.UncommentedValueIfDifferent">
      <summary>
            Generate all settings with their values uncommented, but only if the value is different from the default.
            </summary>
    </member>
    <member name="T:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationExtensions">
      <summary>
            Defines extensions for adding read-only configuration providers.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationExtensions.AsReadOnly(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
      <summary>
            Converts the most recently added configuration source into a read-only configuration source.
            </summary>
      <param name="builder">The configuration builder.</param>
      <returns>The configuration builder.</returns>
      <remarks>
        <para>
            This method is intended to be chained after each source that needs to be made read-only.
            </para>
        <code>
            IConfiguration configuration = new ConfigurationBuilder()
                .AddInMemoryCollection(defaultSettings).AsReadOnly()
                .AddIniFile("usersettings.ini").AsReadOnly()
                .AddSQLite()
                .Build();
                
            // This will only update the SQLite configuration provider
            configuration["Hello"] = "World";
            </code>
      </remarks>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationExtensions.ConfigureReadOnly(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
      <summary>
            Configures an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> with read-only configuration sources.
            </summary>
      <param name="builder">The configuration builder.</param>
      <param name="builderAction">The action to set up configuration sources that will be made read-only.</param>
      <returns>The configuration builder.</returns>
      <remarks>
        <para>
            This method is intended to encapsulate the builder action that creates a group of read-only providers.
            </para>
        <code>
            IConfiguration configuration = new ConfigurationBuilder()
                .ConfigureReadOnly(readOnlyBuilder =&gt; readOnlyBuilder
                    .AddInMemoryCollection(defaultSettings)
                    .AddIniFile("usersettings.ini"))
                .AddSQLite()
                .Build();
                
            // This will only update the SQLite configuration provider
            configuration["Hello"] = "World";
            </code>
      </remarks>
    </member>
    <member name="T:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider">
      <summary>
            Wrapper for <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> to block calls
            to <see cref="M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)" />.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.IConfigurationProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider" /> class.
            </summary>
      <param name="provider"></param>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Returns the immediate descendant configuration keys for a given parent path based
            on this <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s data and the set of keys returned by
            all the preceding <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />s.
            </summary>
      <param name="earlierKeys">The child keys returned by the preceding providers for the same parent path.</param>
      <param name="parentPath">The parent path.</param>
      <returns>The child keys.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.GetReloadToken">
      <summary>
            Returns a change token if this provider supports change tracking, null otherwise.
            </summary>
      <returns>The change token.</returns>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.Load">
      <summary>
            Loads configuration values from the source represented by this <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" />.
            </summary>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.Set(System.String,System.String)">
      <summary>
            Sets a configuration value for the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationProvider.TryGet(System.String,System.String@)">
      <summary>
            Tries to get a configuration value for the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>True if a value for the specified key was found, otherwise false.</returns>
    </member>
    <member name="T:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationSource">
      <summary>
            Wrapper for <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource" /> to block calls
            to <see cref="M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)" />.
            </summary>
      <remarks>
            Configuration providers are typically designed to load configuration into an in-memory
            dictionary from their configuration source. Subsequently, the in-memory dictionary can be
            modified programmatically via the <see cref="P:IConfiguration.Item(int)" /> indexer.
            This class blocks calls to <see cref="M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)" />
            on the underlying configuration source's provider so that static defaults won't be
            modified when updating configuration.
            </remarks>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationSource.#ctor(Microsoft.Extensions.Configuration.IConfigurationSource)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationSource" /> class.
            </summary>
      <param name="source">The source to be made read-only.</param>
    </member>
    <member name="M:Gemstone.Configuration.ReadOnly.ReadOnlyConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
      <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> for this source.
            </summary>
      <param name="builder">The configuration builder</param>
      <returns>The read-only configuration provider.</returns>
    </member>
    <member name="T:Gemstone.Console.Arguments">
      <summary>
             Represents an ordered set of arguments along with optional arguments parsed from a command-line.
             </summary>
    </member>
    <member name="M:Gemstone.Console.Arguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.Arguments" /> from serialization parameters.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with populated with data.</param>
      <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext" /> for this deserialization.</param>
    </member>
    <member name="M:Gemstone.Console.Arguments.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Console.Arguments" /> class.
            </summary>
      <param name="commandLine">The command-line command to be parsed.</param>
    </member>
    <member name="M:Gemstone.Console.Arguments.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Console.Arguments" /> class.
            </summary>
      <param name="commandLine">The command-line command to be parsed.</param>
      <param name="skipFirstArgument">true if the first argument in the command-line command is to be skipped from being processed; otherwise false.</param>
    </member>
    <member name="M:Gemstone.Console.Arguments.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Console.Arguments" /> class.
            </summary>
      <param name="commandLine">The command-line command to be parsed.</param>
      <param name="orderedArgID">The prefix to be used in the identifier of ordered arguments.</param>
    </member>
    <member name="M:Gemstone.Console.Arguments.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Console.Arguments" /> class.
            </summary>
      <param name="commandLine">The command-line command to be parsed.</param>
      <param name="orderedArgID">The prefix to be used in the identifier of ordered arguments.</param>
      <param name="skipFirstArgument">true if the first argument in the command-line command is to be skipped from being processed; otherwise false.</param>
    </member>
    <member name="P:Gemstone.Console.Arguments.ContainsHelpRequest">
      <summary>
            Gets a boolean value that indicates whether the command-line command contains request for displaying help.
            </summary>
    </member>
    <member name="P:Gemstone.Console.Arguments.Count">
      <summary>
            Gets the total number of arguments (ordered and optional) present in the command-line command.
            </summary>
    </member>
    <member name="F:Gemstone.Console.Arguments.DefaultOrderedArgID">
      <summary>
            Default value for <see cref="P:Gemstone.Console.Arguments.OrderedArgID" />.
            </summary>
    </member>
    <member name="M:Gemstone.Console.Arguments.Escape(System.String)">
      <summary>
            Escapes a string so that it will be parsed as a
            single argument by the <see cref="M:Gemstone.Console.Arguments.ToArgs(System.String)" /> method.
            </summary>
      <param name="arg">The argument to be escaped.</param>
      <returns>The escaped argument.</returns>
    </member>
    <member name="M:Gemstone.Console.Arguments.Exists(System.String)">
      <summary>
            Gets a boolean value that indicates whether the specified argument is present in the command-line command.
            </summary>
      <param name="argument">The argument to be checked.</param>
      <returns>true if the argument exists in the command-line command; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Console.Arguments.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> for iterating through all the command-line command arguments.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the command-line command arguments.</returns>
    </member>
    <member name="M:Gemstone.Console.Arguments.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
    </member>
    <member name="P:Gemstone.Console.Arguments.InternalDictionary">
      <summary>
            Gets the dictionary containing all of the arguments present in the command-line command.
            </summary>
    </member>
    <member name="P:Gemstone.Console.Arguments.Item(System.String)">
      <summary>
            Gets the value for the specified argument from the command-line command.
            </summary>
      <param name="argument">The argument whose value is to retrieved.</param>
      <returns>Value for the specified argument if found; otherwise null.</returns>
    </member>
    <member name="P:Gemstone.Console.Arguments.OrderedArgCount">
      <summary>
            Gets the total number of ordered arguments in the command-line command.
            </summary>
    </member>
    <member name="P:Gemstone.Console.Arguments.OrderedArgID">
      <summary>
            Gets the prefix text in the identifier of ordered arguments present in the command-line command.
            </summary>
    </member>
    <member name="P:Gemstone.Console.Arguments.OrderedArgs">
      <summary>
            Gets the ordered arguments as an array of strings.
            </summary>
    </member>
    <member name="M:Gemstone.Console.Arguments.ParseCommand(System.String)">
      <summary>
            This function can be used to parse a single parameterized string and turn it into an array of parameters.
            </summary>
      <param name="command">String of parameters.</param>
      <returns>Array of parameters.</returns>
    </member>
    <member name="M:Gemstone.Console.Arguments.ToArgs(System.String)">
      <summary>
            Provides an array of arguments parsed from the given command
            using parsing rules similar to those used in POSIX environments.
            </summary>
      <param name="command">The command to be parsed.</param>
      <returns>An array of arguments.</returns>
      <remarks>
        <para>
            This function processes a set of command line arguments using a simple set of rules based on
            those used in popular POSIX command shells. It is important to note that these rules do not apply
            to instances of the <see cref="T:Gemstone.Console.Arguments" /> class or the <see cref="M:Gemstone.Console.Arguments.ParseCommand(System.String)" /> function.
            </para>
        <para>
            The motivation for this function was to provide a more user-friendly set of rules by which to
            specify command-line arguments. This is of course helpful for the user who has to type the
            command-line arguments by hand, but it also ends up being useful for systems that have to
            programmatically escape arguments to be consumed by other command-line applications (see
            the <see cref="M:Gemstone.Console.Arguments.Escape(System.String)" /> function).
            </para>
        <para>
            Also note that Windows has historically not provided a standard method for handling
            command-line arguments and that some of the command-line tools in Windows have rolled their
            own (potentially faulty) methods for doing so. More recently, Microsoft has provided the
            <see cref="M:System.Environment.GetCommandLineArgs" /> function for .NET applications to retrieve their
            own command line arguments using a standard format, but this function lacks the appropriate
            supporting functions for programmatically handling arbitrary command strings within an
            application. Furthermore, the rules for escaping spaces, quotes, and backslashes are very
            inconsistent, making it difficult to write a robust method for escaping individual arguments,
            let alone fully reproducing the same command parsing rules. For this reason, some programmers
            may be interested in using this method in conjunction with <see cref="P:System.Environment.CommandLine" />
            for parsing their own command line arguments.
            </para>
      </remarks>
    </member>
    <member name="F:Gemstone.Console.Arguments.TokenRegex">
      <summary>
            Regular expression pattern for tokenizing a list of arguments.
            </summary>
    </member>
    <member name="M:Gemstone.Console.Arguments.ToString">
      <summary>
            Gets a string representation of the <see cref="T:Gemstone.Console.Arguments" /> object.
            </summary>
      <returns>A string representation of the <see cref="T:Gemstone.Console.Arguments" /> object.</returns>
    </member>
    <member name="M:Gemstone.Console.Arguments.TryGetValue(System.String,System.String@)">
      <summary>
            Gets the value associated with the specified argument in the command-line command.
            </summary>
      <param name="argument">The argument whose value is to be retrieved.</param>
      <param name="value">Value associated with the specified argument if it exists in the command-line command, otherwise null.</param>
      <returns>
        <c>true</c> if argument existed and was returned; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.Console.Command">
      <summary>
            Defines methods related to command line operations
            </summary>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)">
      <summary>
            Executes a command line operation and returns its standard output and exit code or throws an exception with the standard error.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="timeout">Timeout, in milliseconds, to wait for command line operation to complete.</param>
      <returns>A <see cref="T:Gemstone.Console.CommandResponse" /> containing the standard output received from command and the exit code.</returns>
      <exception cref="T:Gemstone.Console.CommandException">
            Exception occurs when executed command process reports standard error output or process times-out.
            </exception>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.String@,System.String@,System.Boolean@,System.Int32@,System.Int32)">
      <summary>
            Executes a command line operation and returns <c>true</c> if there was no standard error reported.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="standardOutput">Any standard output reported by the command line operation.</param>
      <param name="standardError">Any standard error reported by the command line operation.</param>
      <param name="processCompleted">Flag that determines if process completed or timed-out. This is only relevant if <paramref name="timeout" /> is not -1.</param>
      <param name="exitCode">Exit code of the process, assuming process successfully completed.</param>
      <param name="timeout">Timeout, in milliseconds, to wait for command line operation to complete. Set to <see cref="F:System.Threading.Timeout.Infinite" />, i.e., -1, for infinite wait.</param>
      <returns>
        <c>true</c> if there was no standard error reported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>
            Executes a command line operation and returns <c>true</c> if there was no standard error reported.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="standardOutput">Any standard output reported by the command line operation.</param>
      <param name="standardError">Any standard error reported by the command line operation.</param>
      <param name="exitCode">Exit code of the process, assuming process successfully completed.</param>
      <returns>
        <c>true</c> if there was no standard error reported; otherwise, <c>false</c>.</returns>
      <remarks>This function waits indefinitely for the command line operation to complete.</remarks>
    </member>
    <member name="M:Gemstone.Console.Command.ShellDecode(System.String)">
      <summary>
            Decodes a command line parameter previously encoded by <see cref="M:Gemstone.Console.Command.ShellEncode(System.String)" />.
            </summary>
      <param name="parameter">Parameter to decode.</param>
      <returns>Decoded <paramref name="parameter" />.</returns>
    </member>
    <member name="M:Gemstone.Console.Command.ShellEncode(System.String)">
      <summary>
            Shell encodes a command line parameter by converting "\" to "\\".
            </summary>
      <param name="parameter">Parameter to shell encode.</param>
      <returns>Shell encoded <paramref name="parameter" />.</returns>
    </member>
    <member name="T:Gemstone.Console.CommandException">
      <summary>
            Represents an exception that is thrown when <see cref="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)" /> reports standard error output.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandException.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandException" />.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandException.#ctor(System.String,System.Boolean,System.Int32,System.Exception)">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandException" /> with the specified parameters.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="processCompleted">Flag that determines if the source of command exception completed processing.</param>
      <param name="exitCode">Exit code of command process, assuming process successfully completed.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
    </member>
    <member name="P:Gemstone.Console.CommandException.ExitCode">
      <summary>
            Gets exit code from command process, assuming successful process completion.
            </summary>
    </member>
    <member name="P:Gemstone.Console.CommandException.ProcessCompleted">
      <summary>
            Gets flag that determines if the source of this command exception completed processing.
            </summary>
    </member>
    <member name="T:Gemstone.Console.CommandResponse">
      <summary>
            Represents a response that is returned from <see cref="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)" /> with standard output and exit code.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandResponse.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandResponse" />.
            </summary>
      <param name="standardOutput">Standard output of command process.</param>
      <param name="exitCode">Exit code of command process.</param>
    </member>
    <member name="P:Gemstone.Console.CommandResponse.ExitCode">
      <summary>
            Gets exit code from command process.
            </summary>
    </member>
    <member name="P:Gemstone.Console.CommandResponse.StandardOutput">
      <summary>
            Gets standard output reported by command process.
            </summary>
    </member>
    <member name="T:Gemstone.DateTimeExtensions.DateTimeExtensions">
      <summary>
            Defines extension functions related to Date/Time manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.AbbreviatedMonthName(System.DateTime)">
      <summary>Gets the abbreviated month name for month of the timestamp.</summary>
      <param name="timestamp">Timestamp from which month name is extracted.</param>
      <returns>String representation of the month name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.AbbreviatedWeekdayName(System.DateTime)">
      <summary>Gets the abbreviated weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.BaselinedTimestamp(System.DateTime,Gemstone.BaselineTimeInterval)">
      <summary>Creates a baselined timestamp which begins at the specified time interval.</summary>
      <param name="timestamp">Timestamp to baseline.</param>
      <param name="interval">
        <see cref="T:Gemstone.BaselineTimeInterval" /> to which <paramref name="timestamp" /> should be baselined.
            </param>
      <returns>
            A new <see cref="T:System.DateTime" /> value that represents a baselined timestamp that begins at the
            specified <see cref="T:Gemstone.BaselineTimeInterval" />.
            </returns>
      <remarks>
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Second" /> would return the <see cref="T:System.DateTime" />
            value starting at zero milliseconds.<br />
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Minute" /> would return the <see cref="T:System.DateTime" />
            value starting at zero seconds and milliseconds.<br />
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Hour" /> would return the <see cref="T:System.DateTime" />
            value starting at zero minutes, seconds and milliseconds.<br />
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Day" /> would return the <see cref="T:System.DateTime" />
            value starting at zero hours, minutes, seconds and milliseconds.<br />
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Month" /> would return the <see cref="T:System.DateTime" />
            value starting at day one, zero hours, minutes, seconds and milliseconds.<br />
            Baselining to the <see cref="F:Gemstone.BaselineTimeInterval.Year" /> would return the <see cref="T:System.DateTime" />
            value starting at month one, day one, zero hours, minutes, seconds and milliseconds.
            </remarks>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.DistanceBeyondSecond(System.DateTime)">
      <summary>Gets the distance, in <see cref="T:Gemstone.Ticks" />, beyond the top of the <paramref name="timestamp" /> second.</summary>
      <param name="timestamp">Timestamp to evaluate.</param>
      <returns>Timestamp's tick distance from the top of the second.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeIsValid(System.DateTime,System.Double,System.Double)">
      <summary>Determines if the specified local time is valid, by comparing it to the system clock.</summary>
      <param name="localTime">Time to test for validity.</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <remarks>
        <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
        <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeTo(System.DateTime,System.String)">
      <summary>Converts given local time to time in specified time zone.</summary>
      <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
      <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given
            timestamp.</param>
      <returns>
        <para>Timestamp in specified time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeTo(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts given local time to time in specified time zone.</summary>
      <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
      <param name="destinationTimeZone">Desired end time zone for given timestamp.</param>
      <returns>
        <para>Timestamp in specified time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToCentralTime(System.DateTime)">
      <summary>Converts given local time to Central time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Central time.</param>
      <returns>
        <para>Timestamp in Central time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToEasternTime(System.DateTime)">
      <summary>Converts given local time to Eastern time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Eastern time.</param>
      <returns>
        <para>Timestamp in Eastern time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToMountainTime(System.DateTime)">
      <summary>Converts given local time to Mountain time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Mountain time.</param>
      <returns>
        <para>Timestamp in Mountain time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToPacificTime(System.DateTime)">
      <summary>Converts given local time to Pacific time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Pacific time.</param>
      <returns>
        <para>Timestamp in Pacific time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToUniversalTime(System.DateTime)">
      <summary>Converts given local time to Universally Coordinated Time (a.k.a., Greenwich Meridian Time).</summary>
      <param name="timestamp">Timestamp in local time to be converted to Universal time.</param>
      <returns>
        <para>Timestamp in UniversalTime (a.k.a., GMT).</para>
      </returns>
      <remarks>This function is only provided for the sake of completeness. All it does is call the
            "ToUniversalTime" property on the given timestamp.</remarks>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.MonthName(System.DateTime)">
      <summary>Gets the full month name for month of the timestamp.</summary>
      <param name="timestamp">Timestamp from which month name is extracted.</param>
      <returns>String representation of the month name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.ShortWeekdayName(System.DateTime)">
      <summary>Gets the shortest weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the short weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.TimeIsValid(System.DateTime,System.DateTime,System.Double,System.Double)">
      <summary>Determines if time is valid, by comparing it to the specified current time.</summary>
      <param name="testTime">Time to test for validity.</param>
      <param name="currentTime">Specified current time (e.g., could be Date.Now or Date.UtcNow).</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <remarks>
        <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
        <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.String,System.String)">
      <summary>Converts given timestamp from one time zone to another using standard names for time zones.</summary>
      <param name="timestamp">Timestamp in source time zone to be converted to time in destination time zone.</param>
      <param name="sourceTimeZoneStandardName">Standard name of time zone for given source timestamp.</param>
      <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given source
            timestamp.</param>
      <returns>
        <para>Timestamp in destination time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>Converts given timestamp from one time zone to another.</summary>
      <param name="timestamp">Timestamp in source time zone to be converted to time in destination time
            zone.</param>
      <param name="sourceTimeZone">Time zone for given source timestamp.</param>
      <param name="destinationTimeZone">Desired end time zone for given source timestamp.</param>
      <returns>
        <para>Timestamp in destination time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.String)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <param name="destinationTimeZoneStandardName">The time zone standard name to which the Universally
            Coordinated Time timestamp is to be converted to.</param>
      <returns>The timestamp in the specified time zone.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.TimeZoneInfo)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <param name="destinationTimeZone">The time zone to which the Universally Coordinated Time timestamp
            is to be converted to.</param>
      <returns>The timestamp in the specified time zone.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToCentralTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Central time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Central time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToEasternTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Eastern time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Eastern time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToMountainTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Mountain time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Mountain time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToPacificTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Pacific time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Pacific time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UtcTimeIsValid(System.DateTime,System.Double,System.Double)">
      <summary>Determines if the specified UTC time is valid, by comparing it to the system clock.</summary>
      <param name="utcTime">UTC time to test for validity.</param>
      <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
      <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
      <returns>True, if time is within the specified range.</returns>
      <remarks>
        <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
        <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.WeekdayName(System.DateTime)">
      <summary>Gets the full weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="T:Gemstone.Diagnostics.LogSuppression">
      <summary>
            Manages the suppression of log messages
            </summary>
    </member>
    <member name="M:Gemstone.Diagnostics.LogSuppression.OverrideSuppressLogMessages">
      <summary>
            Sets a flag that will allow log messages to be raised again.
            Remember to dispose of the callback to remove this override.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Diagnostics.LogSuppression.OverrideSuppressLogMessages</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Gemstone.Diagnostics.LogSuppression.ShouldSuppressFirstChanceLogMessages">
      <summary>
            Gets if First Chance Exception Log Messages should be suppressed.
            </summary>
    </member>
    <member name="P:Gemstone.Diagnostics.LogSuppression.ShouldSuppressLogMessages">
      <summary>
            Gets if Log Messages should be suppressed.
            </summary>
    </member>
    <member name="M:Gemstone.Diagnostics.LogSuppression.SuppressFirstChanceExceptionLogMessages">
      <summary>
            Sets a flag that will prevent First Chance Exception log messages from being raised on this thread.
            Remember to dispose of the callback to remove this suppression.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Diagnostics.LogSuppression.SuppressFirstChanceExceptionLogMessages</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Diagnostics.LogSuppression.SuppressLogMessages">
      <summary>
            Sets a flag that will prevent log messages from being raised on this thread.
            Remember to dispose of the callback to remove this suppression.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Diagnostics.LogSuppression.SuppressLogMessages</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.EnumExtensions.EnumExtensions">
      <summary>
            Defines extension methods related to enumerations.
            </summary>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetDescription(System.Enum)">
      <summary>
            Retrieves the description of the value that this <see cref="T:System.Enum" /> represents extracted from the <see cref="T:System.ComponentModel.DescriptionAttribute" />, or the enumeration name
            if no description is available.
            </summary>
      <param name="enumeration">
        <see cref="T:System.Enum" /> to operate on.</param>
      <returns>Description of the <see cref="T:System.Enum" /> if specified, otherwise the <see cref="T:System.String" /> representation of this <paramref name="enumeration" />.</returns>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueByDescription(System.String,System.Type,System.Boolean)">
      <summary>
            Gets the enumeration of the specified <paramref name="type" /> whose description matches this <paramref name="description" />.
            </summary>
      <param name="description">Description to be used for lookup of the enumeration.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
      <returns>An enumeration of the specified <paramref name="type" /> if a match is found, otherwise null.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> is not an enumeration.</exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueByName(System.String,System.Type,System.Boolean)">
      <summary>
            Gets the enumeration value with the specified name.
            </summary>
      <param name="name">Name to search for.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
      <returns>Specific value of the enumerated constant in terms of its underlying type associated with the specified <paramref name="name" />, or <c>null</c>
            if no matching enumerated value was found.</returns>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueOrDefault``1(System.Object,System.Object)">
      <summary>
            Gets the enumeration constant for this value, if defined in the enumeration, or a default value.
            </summary>
      <param name="value">Value to attempt to return from enumeration.</param>
      <param name="defaultValue">Value to return if enumeration value is not found.</param>
      <typeparam name="T">Type of enumeration.</typeparam>
      <returns>Enumeration value specified, if found, or a default value.</returns>
      <remarks>
            If a default value is not defined, first enumeration value will be used.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> is not an enum. -or-
            The type of <paramref name="value" /> is not of type <typeparamref name="T" />. -or-
            The type of <paramref name="value" /> is not an underlying type of <typeparamref name="T" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />,
            <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />,
            <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.
            </exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueOrDefault(System.Object,System.Type,System.Object)">
      <summary>
            Gets the enumeration constant for value, if defined in the enumeration, or a default value.
            </summary>
      <param name="value">Value to attempt to return from enumeration.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="defaultValue">Value to return if enumeration value is not found.</param>
      <returns>Enumeration value specified, if found, or a default value.</returns>
      <remarks>
            If a default value is not defined, first enumeration value will be used.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not an enum. -or-
            The type of <paramref name="value" /> is not of type <paramref name="type" />. -or-
            The type of <paramref name="value" /> is not an underlying type of <paramref name="type" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />,
            <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />,
            <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.
            </exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetFormattedName(System.Enum)">
      <summary>
            Retrieves a formatted name of the value that this <see cref="T:System.Enum" /> represents for visual display.
            Enum string name is converted to a label with spaces before each capital letter, other than the first.
            </summary>
      <param name="enumeration">
        <see cref="T:System.Enum" /> to operate on.</param>
      <returns>Formatted enumeration name of the specified value for visual display.</returns>
    </member>
    <member name="T:Gemstone.EventHandlerExtensions.EventHandlerExtensions">
      <summary>
            Defines extension methods related to event handlers.
            </summary>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.GetHandlerName``1(``0)">
      <summary>
            Gets the method name attached to an event handler.
            </summary>
      <param name="handler">Attached event handler.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.Delegate" /> type representing single handler of <see cref="T:System.EventHandler" />.</typeparam>
      <returns>Name of event handler method including parameters and class name.</returns>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvoke``2(``0,System.Action{System.Exception},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation with custom exception handler, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            </remarks>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvoke``2(``0,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation with custom exception handler that accepts user handler delegate, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions which includes parameter for event handler that threw the exception; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            </remarks>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvoke``2(``0,System.Object,System.Action{System.Exception},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation with custom exception handler, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="eventLock">Locking object for accessing event handler invocation list; when set to <c>null</c>, lock will be on <paramref name="eventHandler" />.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvoke``2(``0,System.Object,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation with custom event lock and exception handler that accepts user handler delegate, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="eventLock">Locking object for accessing event handler invocation list; when set to <c>null</c>, lock will be on <paramref name="eventHandler" />.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions which includes parameter for event handler that threw the exception; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvoke``2(``0,System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            Any exceptions will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> and other overloads for custom exception handling.
            </remarks>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Action{System.Exception},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation asynchronously with custom exception handler, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Action{System.Exception},System.Object,``1,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            </remarks>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation asynchronously with custom exception handler that accepts user handler delegate, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions which includes parameter for event handler that threw the exception; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            </remarks>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,System.Action{System.Exception},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation asynchronously with custom exception handler, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="eventLock">Locking object for accessing event handler invocation list; when set to <c>null</c>, lock will be on <paramref name="eventHandler" />.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,System.Action{System.Exception},System.Object,``1,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation asynchronously with custom event lock and exception handler that accepts user handler delegate, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="eventLock">Locking object for accessing event handler invocation list; when set to <c>null</c>, lock will be on <paramref name="eventHandler" />.</param>
      <param name="exceptionHandler">Custom delegate to handle encountered exceptions which includes parameter for event handler that threw the exception; when set to <c>null</c>, exception will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" />.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,System.Action{System.Exception,System.Delegate},System.Object,``1,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,``1,System.Boolean)">
      <summary>
            Safely invokes event propagation asynchronously, continuing even if an attached user handler throws an exception.
            </summary>
      <param name="eventHandler">Source <see cref="T:System.EventHandler" /> to safely invoke.</param>
      <param name="sender">Event source.</param>
      <param name="args">Event arguments.</param>
      <param name="parallel">Call event handlers in parallel, when attached handlers are greater than one.</param>
      <typeparam name="TEventHandler">
        <see cref="T:System.MulticastDelegate" /> type commonly derived from <see cref="T:System.EventHandler" />.</typeparam>
      <typeparam name="TEventArgs">Type derived from <see cref="T:System.EventArgs" />.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.EventHandlerExtensions.EventHandlerExtensions.SafeInvokeAsync``2(``0,System.Object,``1,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
      <remarks>
            Event handler invocation list access will be locked on <paramref name="eventHandler" />.
            Any exceptions will be suppressed, see <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> and other overloads for custom exception handling.
            </remarks>
    </member>
    <member name="T:Gemstone.GuidExtensions.GuidExtensions">
      <summary>
            Extension methods for <see cref="T:System.Guid" />.
            </summary>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.CopyLittleEndianBytes(System.Guid,System.Byte*)">
      <summary>
            Writes a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <param name="buffer">where to store the <paramref name="guid" /></param>
      <returns>Bytes written.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.CopyLittleEndianBytes(System.Guid,System.Byte[],System.Int32)">
      <summary>
            Writes a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <param name="buffer">where to store the <paramref name="guid" /></param>
      <param name="startingIndex">the starting index in <paramref name="buffer" /></param>
      <returns>Bytes written.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianBytes(System.Guid)">
      <summary>
            Gets the little endian encoded bytes of the <see cref="T:System.Guid" />.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <returns>A <see cref="T:System.Byte" />[] that represents a big endian encoded Guid.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte*)">
      <summary>
            Reads a Guid in Little Endian byte order.
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte[])">
      <summary>
            Reads a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte[],System.Int32)">
      <summary>
            Mimicks the encoding that was present in LittleEndianOrder on a Little Endian CPU. 
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <param name="startingIndex">the starting index in <paramref name="buffer" /></param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">
        <see cref="T:System.Guid" /> to serialize.</param>
      <returns>A <see cref="T:System.Byte" /> array that represents a big-endian encoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid,System.Byte*)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> to serialize.</param>
      <param name="buffer">Destination buffer to hold serialized <paramref name="guid" />.</param>
      <returns>Bytes encoded.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid,System.Byte[],System.Int32)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> to serialize.</param>
      <param name="buffer">Destination buffer to hold serialized <paramref name="guid" />.</param>
      <param name="startingIndex">Starting index in <paramref name="buffer" />.</param>
      <returns>Bytes encoded.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte*)">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte[])">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte[],System.Int32)">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <param name="startingIndex">Starting index in <paramref name="buffer" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="T:Gemstone.Identity.UserInfo">
      <summary>
            Represents information about a local user or a domain user (e.g., from Active Directory).
            </summary>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Identity.UserInfo" /> class.
            </summary>
      <param name="loginID">
            Login ID in 'domain\accountName' format of the user's account whose information is to be retrieved. Login ID 
            can also be specified in 'accountName' format without the domain name, in which case the domain name will be
            approximated based on the privileged user domain if specified, default login domain of the host machine 
            if available, or the domain of the identity that owns the host process.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loginID" /> is a null or empty string.</exception>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.accountName">
      <summary>
            Gets the user name of the user.
            </summary>
    </member>
    <member name="F:Gemstone.Identity.UserInfo.BuiltInGroupName">
      <summary>
            Localized version of Windows "BUILTIN" local permissions group name.
            </summary>
      <remarks>
            For non-English based OS languages, this name may be different. For example, on a German OS this is "VORDEFINIERT".
            </remarks>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.CurrentUserID">
      <summary>
            Gets the ID name of the current user.
            </summary>
      <remarks>
            The ID name returned is that of the user account under which the code is executing.
            </remarks>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.CurrentUserInfo">
      <summary>
            Gets the <see cref="T:Gemstone.Identity.UserInfo" /> object for the <see cref="P:Gemstone.Identity.UserInfo.CurrentUserID" />.
            </summary>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.Domain">
      <summary>
            Gets the domain for the user.
            </summary>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.GroupNameToSID(System.String)">
      <summary>
            Converts the given group name to the SID corresponding to that name.
            </summary>
      <param name="groupName">The group name for which to look up the SID.</param>
      <returns>The SID for the given group name, or the group name if no SID can be found.</returns>
      <remarks>
            If the <paramref name="groupName" /> cannot be converted to a SID, <paramref name="groupName" />
            will be the return value.
            </remarks>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.IsGroupSID(System.String)">
      <summary>
            Determines whether the given security identifier identifies a group.
            </summary>
      <param name="sid">The security identifier.</param>
      <returns>
        <c>true</c> if the security identifier identifies a group; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.IsLocalDomain(System.String)">
      <summary>
            Determines if specified <paramref name="domain" /> is the local domain (i.e., local machine).
            </summary>
      <param name="domain">Domain name to check.</param>
      <returns>
        <c>true</c>if specified <paramref name="domain" /> is the local domain (i.e., local machine); otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.IsUserSID(System.String)">
      <summary>
            Determines whether the given security identifier identifies a user account.
            </summary>
      <param name="sid">The security identifier.</param>
      <returns>
        <c>true</c> if the security identifier identifies a user account; <c>false</c> otherwise.</returns>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.LdapID">
      <summary>
            Gets the ID of the user in LDAP format.
            </summary>
    </member>
    <member name="P:Gemstone.Identity.UserInfo.LoginID">
      <summary>
            Gets the Login ID of the user.
            </summary>
    </member>
    <member name="F:Gemstone.Identity.UserInfo.NTAuthorityGroupName">
      <summary>
            Localized version of Windows "NT AUTHORITY" local permissions group name.
            </summary>
      <remarks>
            For non-English based OS languages, this name may be different. For example, on a French OS this is "NT-AUTORITÄT".
            </remarks>
    </member>
    <member name="F:Gemstone.Identity.UserInfo.NTServiceGroupName">
      <summary>
            Localized version of Windows "NT SERVICE" local Windows services group name.
            </summary>
      <remarks>
            For non-English based OS languages, this name may be different.
            </remarks>
    </member>
    <member name="M:Gemstone.Identity.UserInfo.UserNameToSID(System.String)">
      <summary>
            Converts the given user name to the SID corresponding to that name.
            </summary>
      <param name="accountName">The user name for which to look up the SID.</param>
      <returns>The SID for the given user name, or the user name if no SID can be found.</returns>
      <remarks>
            If the <paramref name="accountName" /> cannot be converted to a SID, <paramref name="accountName" />
            will be the return value.
            </remarks>
    </member>
    <member name="T:Gemstone.Interop.IIniFile">
      <summary>
            Represents an interface for common INI functions.
            </summary>
    </member>
    <member name="P:Gemstone.Interop.IIniFile.FileName">
      <summary>
            File name of the INI file.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.IIniFile.GetSectionKeys(System.String)">
      <summary>
            Gets an array of keys from the specified section in the INI file.
            </summary>
      <param name="section">Section to retrieve keys from.</param>
      <returns>Array of <see cref="T:System.String" /> keys from the specified section of the INI file.</returns>
    </member>
    <member name="M:Gemstone.Interop.IIniFile.GetSectionNames">
      <summary>
            Gets an array of that section names that exist in the INI file.
            </summary>
      <returns>Array of <see cref="T:System.String" /> section names from the INI file.</returns>
    </member>
    <member name="P:Gemstone.Interop.IIniFile.Item(System.String,System.String)">
      <summary>
            Gets or sets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <returns>Value of key.</returns>
      <value>The new key value to store in the INI file.</value>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="P:Gemstone.Interop.IIniFile.Item(System.String,System.String,System.String)">
      <summary>
            Gets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <param name="defaultValue">Default value of key.</param>
      <returns>Value of key.</returns>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="T:Gemstone.Interop.IniFile">
      <summary>
            Represents a Windows INI style configuration file.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.IniFile.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Interop.IniFile" />.
            </summary>
      <remarks>INI file name defaults to "Win.ini" - change using FileName property.</remarks>
    </member>
    <member name="M:Gemstone.Interop.IniFile.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Interop.IniFile" /> using the specified INI file name.
            </summary>
      <param name="fileName">Specified INI file name to use.</param>
    </member>
    <member name="P:Gemstone.Interop.IniFile.FileName">
      <summary>
            File name of the INI file.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.IniFile.GetKeyValue(System.String,System.String)">
      <summary>
            Gets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <returns>Value of key.</returns>
    </member>
    <member name="M:Gemstone.Interop.IniFile.GetKeyValue(System.String,System.String,System.String)">
      <summary>
            Gets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <param name="defaultValue">Default value of key.</param>
      <returns>Value of key.</returns>
    </member>
    <member name="M:Gemstone.Interop.IniFile.GetSectionKeys(System.String)">
      <summary>
            Gets an array of keys from the specified section in the INI file.
            </summary>
      <param name="section">Section to retrieve keys from.</param>
      <returns>Array of <see cref="T:System.String" /> keys from the specified section of the INI file.</returns>
    </member>
    <member name="M:Gemstone.Interop.IniFile.GetSectionNames">
      <summary>
            Gets an array of that section names that exist in the INI file.
            </summary>
      <returns>Array of <see cref="T:System.String" /> section names from the INI file.</returns>
    </member>
    <member name="P:Gemstone.Interop.IniFile.Item(System.String,System.String)">
      <summary>
            Gets or sets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <returns>Value of key.</returns>
      <value>The new key value to store in the INI file.</value>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="P:Gemstone.Interop.IniFile.Item(System.String,System.String,System.String)">
      <summary>
            Gets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <param name="defaultValue">Default value of key.</param>
      <returns>Value of key.</returns>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="M:Gemstone.Interop.IniFile.SetKeyValue(System.String,System.String,System.String)">
      <summary>
            Sets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <param name="newValue">The new key value to store in the INI file.</param>
    </member>
    <member name="T:Gemstone.Interop.VBArrayDescriptor">
      <summary>
            Represents an old style Visual Basic array descriptor.
            </summary>
      <remarks>
            This class is used to mimic the binary array descriptor used when an array is serialized
            into a file using older Visual Basic applications (VB 6 and prior), this way old VB apps
            can still deserialize an array stored in a file written by a .NET application and vice versa.
            </remarks>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.#ctor(System.Int32[],System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> class.
            </summary>
      <param name="arrayLengths">Length of array per dimension.</param>
      <param name="arrayLowerBounds">Lower bound of array per dimension.</param>
    </member>
    <member name="P:Gemstone.Interop.VBArrayDescriptor.BinaryLength">
      <summary>
            Gets the length of serialized <see cref="T:Gemstone.Interop.VBArrayDescriptor" />.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.GenerateBinaryImage(System.Byte[],System.Int32)">
      <summary>
            Generates binary image of the object and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> will exceed <paramref name="buffer" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.OneBasedOneDimensionalArray(System.Int32)">
      <summary>
            Returns a <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object for a one dimensional array with one-based index.
            </summary>
      <param name="arrayLength">Length of the array.</param>
      <returns>A <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object.</returns>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.OneBasedTwoDimensionalArray(System.Int32,System.Int32)">
      <summary>
            Returns a <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object for a two dimensional array with one-based index.
            </summary>
      <param name="dimensionOneLength">Length of array in dimension one.</param>
      <param name="dimensionTwoLength">Length of array in dimension two.</param>
      <returns>A <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object.</returns>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.ZeroBasedOneDimensionalArray(System.Int32)">
      <summary>
            Returns a <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object for a one dimensional array with zero-based index.
            </summary>
      <param name="arrayLength">Length of the array.</param>
      <returns>A <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object.</returns>
    </member>
    <member name="M:Gemstone.Interop.VBArrayDescriptor.ZeroBasedTwoDimensionalArray(System.Int32,System.Int32)">
      <summary>
            Returns a <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object for a two dimensional array with zero-based index.
            </summary>
      <param name="dimensionOneLength">Length of array in dimension one.</param>
      <param name="dimensionTwoLength">Length of array in dimension two.</param>
      <returns>A <see cref="T:Gemstone.Interop.VBArrayDescriptor" /> object.</returns>
    </member>
    <member name="T:Gemstone.Interop.WindowsApi">
      <summary>
            Defines common Windows API constants, enumerations, structures and functions.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)">
      <summary>
            Win32 FormatMessage function.
            </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpSource</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="dwMessageId">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwMessageId</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="dwLanguageId">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwLanguageId</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpBuffer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpBuffer</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="nSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nSize</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <param name="Arguments">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Arguments</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lpDirectoryName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpDirectoryName</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpFreeBytesAvailable">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpFreeBytesAvailable</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpTotalNumberOfBytes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpTotalNumberOfBytes</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpTotalNumberOfFreeBytes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpTotalNumberOfFreeBytes</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.GetErrorMessage(System.Int32)">
      <summary>
            Formats and returns a .NET string containing the Windows API level error message corresponding to the specified error code.
            </summary>
      <param name="errorCode">An <see cref="T:System.Int32" /> value corresponding to the specified error code.</param>
      <returns>A formatted error message corresponding to the specified error code.</returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.GetLastErrorMessage">
      <summary>
            Formats and returns a .NET string containing the Windows API level error message from the last Win32 call.
            </summary>
      <returns>A formatted error message corresponding to the last Win32 call error code.</returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.GlobalMemoryStatusEx(Gemstone.Interop.WindowsApi.MEMORYSTATUSEX)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GlobalMemoryStatusEx(Gemstone.Interop.WindowsApi.MEMORYSTATUSEX)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lpBuffer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpBuffer</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GlobalMemoryStatusEx(Gemstone.Interop.WindowsApi.MEMORYSTATUSEX)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.GlobalMemoryStatusEx(Gemstone.Interop.WindowsApi.MEMORYSTATUSEX)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.RESOURCETYPE_DISK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.RESOURCETYPE_DISK</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lpNetResource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpNetResource</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpPassword">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpPassword</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lpUsername">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpUsername</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetAddConnection2(Gemstone.Interop.WindowsApi.NETRESOURCE@,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lpName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lpName</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="fForce">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fForce</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Interop.WindowsApi.WNetCancelConnection2(System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Interop.WindowsApi.MEMORYSTATUSEX</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.dwLength">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.dwLength</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.dwMemoryLoad">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.dwMemoryLoad</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailExtendedVirtual">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailExtendedVirtual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailPageFile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailPageFile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailPhys">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailPhys</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailVirtual">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullAvailVirtual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalPageFile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalPageFile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalPhys">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalPhys</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalVirtual">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.MEMORYSTATUSEX.ullTotalVirtual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Gemstone.Interop.WindowsApi.NETRESOURCE">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Gemstone.Interop.WindowsApi.NETRESOURCE</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwDisplayType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwDisplayType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwScope">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwScope</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwUsage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.dwUsage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpComment">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpComment</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpLocalName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpLocalName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpProvider">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpRemoteName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Gemstone.Interop.WindowsApi.NETRESOURCE.lpRemoteName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Gemstone.Interop.WindowsIniFile">
      <summary>
            Represents a Windows INI style configuration file.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.WindowsIniFile.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.Interop.WindowsIniFile" /> using the specified INI file name.
            </summary>
      <param name="fileName">Specified INI file name to use.</param>
    </member>
    <member name="P:Gemstone.Interop.WindowsIniFile.FileName">
      <summary>
            File name of the INI file.
            </summary>
    </member>
    <member name="M:Gemstone.Interop.WindowsIniFile.GetSectionKeys(System.String)">
      <summary>
            Gets an array of keys from the specified section in the INI file.
            </summary>
      <param name="section">Section to retrieve keys from.</param>
      <returns>Array of <see cref="T:System.String" /> keys from the specified section of the INI file.</returns>
    </member>
    <member name="M:Gemstone.Interop.WindowsIniFile.GetSectionNames">
      <summary>
            Gets an array of that section names that exist in the INI file.
            </summary>
      <returns>Array of <see cref="T:System.String" /> section names from the INI file.</returns>
    </member>
    <member name="P:Gemstone.Interop.WindowsIniFile.Item(System.String,System.String)">
      <summary>
            Gets or sets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <returns>Value of key.</returns>
      <value>The new key value to store in the INI file.</value>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="P:Gemstone.Interop.WindowsIniFile.Item(System.String,System.String,System.String)">
      <summary>
            Gets the value of the specified key.
            </summary>
      <param name="section">Section key exists in.</param>
      <param name="entry">Name of key.</param>
      <param name="defaultValue">Default value of key.</param>
      <returns>Value of key.</returns>
      <remarks>This is the default member of this class.</remarks>
    </member>
    <member name="T:Gemstone.IO.BlockAllocatedMemoryStream">
      <summary>
            Defines a stream whose backing store is memory. Externally this class operates similar to a <see cref="T:System.IO.MemoryStream" />,
            internally it uses dynamically allocated buffer blocks instead of one large contiguous array of data.
            </summary>
      <remarks>
        <para>
            The <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> has two primary benefits over a normal <see cref="T:System.IO.MemoryStream" />, first, the
            allocation of a large contiguous array of data in <see cref="T:System.IO.MemoryStream" /> can fail when the requested amount of contiguous
            memory is unavailable - the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> prevents this; second, a <see cref="T:System.IO.MemoryStream" /> will
            constantly reallocate the buffer size as the stream grows and shrinks and then copy all the data from the old buffer to the
            new - the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> maintains its blocks over its life cycle, unless manually cleared, thus
            eliminating unnecessary allocations and garbage collections when growing and reusing a stream.
            </para>
        <para>
            Important: Unlike <see cref="T:System.IO.MemoryStream" />, the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> will not use a user provided buffer
            as its backing buffer. Any user provided buffers used to instantiate the class will be copied into internally managed reusable
            memory buffers. Subsequently, the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> does not support the notion of a non-expandable
            stream. If you are using a <see cref="T:System.IO.MemoryStream" /> with your own buffer, the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> will
            not provide any immediate benefit.
            </para>
        <para>
            Note that the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> will maintain all allocated blocks for stream use until the
            <see cref="M:Gemstone.IO.BlockAllocatedMemoryStream.Clear" /> method is called or the class is disposed.
            </para>
        <para>
            No members in the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> are guaranteed to be thread safe. Make sure any calls are
            synchronized when simultaneously accessed from different threads.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> from specified <paramref name="buffer" />.
            </summary>
      <param name="buffer">Initial buffer to copy into stream.</param>
      <remarks>
            Unlike <see cref="T:System.IO.MemoryStream" />, the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> will not use the provided
            <paramref name="buffer" /> as its backing buffer. The buffer will be copied into internally managed reusable
            memory buffers. Subsequently, the notion of a non-expandable stream is not supported.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> from specified region of <paramref name="buffer" />.
            </summary>
      <param name="buffer">Initial buffer to copy into stream.</param>
      <param name="startIndex">0-based start index into the <paramref name="buffer" />.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <remarks>
            Unlike <see cref="T:System.IO.MemoryStream" />, the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> will not use the provided
            <paramref name="buffer" /> as its backing buffer. The buffer will be copied into internally managed reusable
            memory buffers. Subsequently, the notion of a non-expandable stream is not supported.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> for specified <paramref name="capacity" />.
            </summary>
      <param name="capacity">Initial length of the stream.</param>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanRead">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports reading.
            </summary>
      <remarks>
            This is always <c>true</c>.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanSeek">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports seeking.
            </summary>
      <remarks>
            This is always <c>true</c>.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanWrite">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports writing.
            </summary>
      <remarks>
            This is always <c>true</c>.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Clear">
      <summary>
            Clears the entire <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> contents and releases any allocated memory blocks.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; otherwise, <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Flush">
      <summary>
            Overrides the <see cref="M:System.IO.Stream.Flush" /> method so that no action is performed.
            </summary>
      <remarks>
        <para>
            This method overrides the <see cref="M:System.IO.Stream.Flush" /> method.
            </para>
        <para>
            Because any data written to a <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object is
            written into RAM, this method is superfluous.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.Length">
      <summary>
            Gets current stream length for this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> instance.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.Position">
      <summary>
            Gets current stream position for this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> instance.
            </summary>
      <exception cref="T:System.IO.IOException">Seeking was attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a block of bytes from the current stream and writes the data to <paramref name="buffer" />.
            </summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="startIndex" /> and (<paramref name="startIndex" /> + <paramref name="length" /> - 1) replaced by the characters read from the current stream.</param>
      <param name="startIndex">The byte offset in <paramref name="buffer" /> at which to begin reading.</param>
      <param name="length">The maximum number of bytes to read.</param>
      <returns>
            The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ReadByte">
      <summary>
            Reads a byte from the current stream.
            </summary>
      <returns>
            The current byte cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ReadFrom(System.IO.Stream,System.Int64)">
      <summary>
            Reads specified number of bytes from source stream into this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" />
            starting at the current position.
            </summary>
      <param name="source">The stream containing the data to copy</param>
      <param name="length">The number of bytes to copy</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" /> within the current stream to the specified value relative the <paramref name="origin" />.
            </summary>
      <param name="offset">The new position within the stream. This is relative to the <paramref name="origin" /> parameter, and can be positive or negative.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" />, which acts as the seek reference point.</param>
      <returns>
            The new position within the stream, calculated by combining the initial reference point and the offset.
            </returns>
      <exception cref="T:System.IO.IOException">Seeking was attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.SetLength(System.Int64)">
      <summary>
            Sets the length of the current stream to the specified value.
            </summary>
      <param name="value">The value at which to set the length.</param>
      <remarks>
            If this length is larger than the previous length, the data is initialized to 0's between the previous length and the current length.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ToArray">
      <summary>
            Writes the stream contents to a byte array, regardless of the <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" /> property.
            </summary>
      <returns>A <see cref="T:System.Byte" />[] containing the current data in the stream</returns>
      <remarks>
            This may fail if there is not enough contiguous memory available to hold current size of stream.
            When possible use methods which operate on streams directly instead.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a block of bytes to the current stream using data read from <paramref name="buffer" />.
            </summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="startIndex">The byte offset in <paramref name="buffer" /> at which to begin writing from.</param>
      <param name="length">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.WriteByte(System.Byte)">
      <summary>
            Writes a byte to the current stream at the current position.
            </summary>
      <param name="value">The byte to write.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.WriteTo(System.IO.Stream)">
      <summary>
            Writes the entire stream into destination, regardless of <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" />, which remains unchanged.
            </summary>
      <param name="destination">The stream onto which to write the current contents.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="T:Gemstone.IO.FilePath">
      <summary>
            Contains File and Path manipulation methods.
            </summary>
    </member>
    <member name="M:Gemstone.IO.FilePath.AddPathSuffix(System.String)">
      <summary>
            Makes sure path is suffixed with standard <see cref="F:System.IO.Path.DirectorySeparatorChar" />.
            </summary>
      <param name="filePath">The file path to be suffixed.</param>
      <returns>Suffixed path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.ConnectToNetworkShare(System.String,System.String,System.String,System.String)">
      <summary>
            Connects to a network share with the specified user's credentials.
            </summary>
      <param name="shareName">UNC share name to connect to.</param>
      <param name="userName">Username to use for connection.</param>
      <param name="password">Password to use for connection.</param>
      <param name="domain">Domain name to use for connection. Specify the computer name for local system accounts.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.DisconnectFromNetworkShare(System.String)">
      <summary>
            Disconnects the specified network share.
            </summary>
      <param name="shareName">UNC share name to disconnect from.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.DisconnectFromNetworkShare(System.String,System.Boolean)">
      <summary>
            Disconnects the specified network share.
            </summary>
      <param name="shareName">UNC share name to disconnect from.</param>
      <param name="force">
        <c>true</c> to force a disconnect; otherwise <c>false</c>.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.DropPathRoot(System.String)">
      <summary>
            Remove any path root present in the path.
            </summary>
      <param name="filePath">The file path whose root is to be removed.</param>
      <returns>The path with the root removed if it was present.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of subdirectories that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="directory">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in the <paramref name="directory" />. This parameter can contain a combination of valid literal and wildcard characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An enumerable collection of the <see cref="T:System.IO.DirectoryInfo" /> objects representing the subdirectories that match the specified search criteria.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of subdirectories that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of files that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="directory">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of files in the <paramref name="directory" />. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An enumerable collection of the <see cref="T:System.IO.FileInfo" /> objects representing the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateFiles(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetAbsolutePath(System.String)">
      <summary>
            Gets the absolute file path for the specified file name or relative file path.
            </summary>
      <param name="filePath">File name or relative file path.</param>
      <returns>Absolute file path for the specified file name or relative file path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetApplicationDataFolder">
      <summary>
            Gets the path to the folder where data related to the current application can be stored.
            </summary>
      <returns>Path to the folder where data related to the current application can be stored.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetAvailableFreeSpace(System.String,System.Int64@,System.Int64@)">
      <summary>
            Tries to get the free space values for a given path. This path can be a network share or a mount point.
            </summary>
      <param name="pathName">The path to the location</param>
      <param name="freeSpace">The number of user space bytes</param>
      <param name="totalSize">The total number of bytes on the drive.</param>
      <returns>
        <c>true</c> if successful; otherwise <c>false</c> if there was an error.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetCommonApplicationDataFolder">
      <summary>
            Gets the path to the folder where data related to the current
            application can be stored as well as shared among different users.
            </summary>
      <returns>Path to the folder where data related to the current application can be stored.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the subdirectories that match the specified search pattern in the specified directory, and optionally searches subdirectories.
            </summary>
      <param name="directory">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in the <paramref name="directory" />. This parameter can contain a combination of valid literal and wildcard characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An array of the <see cref="T:System.IO.DirectoryInfo" /> objects representing the subdirectories that match the specified search criteria.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetDirectories(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wild-card characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetDirectoryName(System.String)">
      <summary>
            Gets the directory information from the specified file path.
            </summary>
      <param name="filePath">The file path from which the directory information is to be obtained.</param>
      <returns>Directory information.</returns>
      <remarks>
            This differs from <see cref="M:System.IO.Path.GetDirectoryName(System.String)" /> in that it will see if last name in path is
            a directory and, if it exists, will properly treat that part of path as a directory. The .NET path
            function always assumes last entry is a file name if path is not suffixed with a slash. For example:
                Path.GetDirectoryName(@"C:\Music") will return "C:\", however, 
            FilePath.GetDirectoryName(@"C:\Music") will return "C:\Music\", so long as Music directory exists.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetExtension(System.String)">
      <summary>
            Gets the extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the extension is to be obtained.</param>
      <returns>File extension.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileLength(System.String)">
      <summary>
            Gets the size of the specified file.
            </summary>
      <param name="fileName">Name of file whose size is to be retrieved.</param>
      <returns>The size of the specified file.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileList(System.String,System.Action{System.Exception})">
      <summary>
            Gets a list of files under the specified path. Search wild card pattern (c:\Data\*.dat) can be used for 
            including only the files matching the pattern or path wild-card pattern (c:\Data\*\*.dat) to indicate the 
            inclusion of files under all subdirectories in the list.
            </summary>
      <param name="path">The path for which a list of files is to be returned.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>A list of files under the given path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileLock``1(System.String,System.Func{System.String,``0},System.Double,System.Int32)">
      <summary>
             Gets a lock on the file using the given lock function.
             </summary>
      <param name="fileName">The name of the on which the lock is to be obtained.</param>
      <param name="lockFunction">The function to be called in order to get the file lock.</param>
      <param name="secondsToWait">The number of seconds to wait before giving up on the file lock.</param>
      <param name="retryMilliseconds">The number of milliseconds to wait between attempts to obtain the file lock.</param>
      <typeparam name="T">The return value of the lock function.</typeparam>
      <returns>The return value of the lock function.</returns>
      <remarks>
        <para>
             The intent of this function is to provide a sane method for opening
             a file which may produce errors due to read/write contention.
             Usage of this class is fairly simple using the static methods
             built into the <see cref="T:System.IO.File" /> class.
             </para>
        <code>
             using (StreamReader reader = GetFileLock(File.OpenText))
             {
                 // Read lines from the file
             }
             </code>
        <code>
             using (FileStream stream = GetFileLock(File.Create))
             {
                 // Write bytes into the file
             }
             </code>
        <para>
             This method will only retry if an <see cref="T:System.IO.IOException" />
             occurs while executing the <paramref name="lockFunction" />.
             After retrying for at least <paramref name="secondsToWait" />
             seconds, this function will throw the last IOException it encountered.
             </para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileName(System.String)">
      <summary>
            Gets the file name and extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the file name and extension is to be obtained.</param>
      <returns>File name and extension if the file path has it; otherwise empty string.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileNameWithoutExtension(System.String)">
      <summary>
            Gets the file name without extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the file name is to be obtained.</param>
      <returns>File name without the extension if the file path has it; otherwise empty string.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFilePatternRegularExpression(System.String)">
      <summary>
            Gets a regular expression pattern that simulates wild-card matching for filenames (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpec">The file spec for which the regular expression pattern if to be generated.</param>
      <returns>Regular expression pattern that simulates wild-card matching for filenames.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the files that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
      <param name="directory">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of files in the <paramref name="directory" />. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An array of the <see cref="T:System.IO.FileInfo" /> objects representing the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFiles(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. This parameter can contain a combination of valid literal path and wild-card (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetLastDirectoryName(System.String)">
      <summary>
            Gets the last directory name from a file path.
            </summary>
      <param name="filePath">The file path from where the last directory name is to be retrieved.</param>
      <returns>The last directory name from a file path.</returns>
      <remarks>
        <see cref="M:Gemstone.IO.FilePath.GetLastDirectoryName(System.String)" /> would return sub2 from c:\windows\sub2\filename.ext.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetUniqueFilePath(System.String)">
      <summary>
            Gets a unique file path for the given file by checking for name collisions and
            adding a sequence number to the end of the file name if there is a collision.
            </summary>
      <param name="originalFilePath">The path to the original file before adding the sequence number.</param>
      <returns>The unique path to the file.</returns>
      <remarks>
            This method is designed to handle the case where the user wishes to create a file in a folder
            with a given name when there is a possibility that the name is already taken. Using this method,
            it is possible to create files with names in the following format:
            
            <ul><li>File.ext</li><li>File (1).ext</li><li>File (2).ext</li><li>...</li></ul>
            
            This method uses a linear search to find a unique file name, so it is suitable for situations where
            there are a small number of collisions for each file name. This will detect and fill gaps that can
            occur when files are deleted (for instance, if "File (1).ext" were deleted from the list above).
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetUniqueFilePathWithBinarySearch(System.String)">
      <summary>
            Gets a unique file path for the given file by checking for name collisions and
            adding a sequence number to the end of the file name if there is a collision.
            </summary>
      <param name="originalFilePath">The path to the original file before adding the sequence number.</param>
      <returns>The unique path to the file.</returns>
      <remarks>
            This method is designed to handle the case where the user wishes to create a file in a folder
            with a given name when there is a possibility that the name is already taken. Using this method,
            it is possible to create files with names in the following format:
            
            <ul><li>File.ext</li><li>File (1).ext</li><li>File (2).ext</li><li>...</li></ul>
            
            This method uses a binary search to find a unique file name, so it is suitable for situations where
            a large number of files will be created with the same file name, and the next unique file name needs
            to be found relatively quickly. It will not always detect gaps in the sequence numbers that can occur
            when files are deleted (for instance, if "File (1).ext" were deleted from the list above).
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetValidFileName(System.String,System.Char)">
      <summary>
            Gets a valid file name by replacing invalid file name characters with <paramref name="replaceWithCharacter" />.
            </summary>
      <param name="fileName">File name to validate.</param>
      <param name="replaceWithCharacter">Character to replace invalid file name characters with. Set to '\0' to remove invalid file name characters.</param>
      <returns>A valid file name with no invalid file name characters.</returns>
      <remarks>
            This function expects a file name, not a file name with a path. To properly get a valid file path, where all directory
            names and the file name are validated, use the <see cref="M:Gemstone.IO.FilePath.GetValidFilePath(System.String,System.Char)" />. Calling the <see cref="M:Gemstone.IO.FilePath.GetValidFileName(System.String,System.Char)" />
            function will a full path will yield all directory separators replaced with the <paramref name="replaceWithCharacter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetValidFilePath(System.String,System.Char)">
      <summary>
            Gets a valid file path by replacing invalid file or directory name characters with <paramref name="replaceWithCharacter" />.
            </summary>
      <param name="filePath">File path to validate.</param>
      <param name="replaceWithCharacter">Character to replace invalid file or directory name characters with. Set to '\0' to remove invalid file or directory name characters.</param>
      <returns>A valid file path with no invalid file or directory name characters.</returns>
    </member>
    <member name="P:Gemstone.IO.FilePath.HostApplicationPath">
      <summary>
            Gets the application path of the host application.
            </summary>
      <exception cref="T:System.NullReferenceException">Failed to derive host application path.</exception>
    </member>
    <member name="P:Gemstone.IO.FilePath.HostAssemblyInfo">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> instance of the host application.
            </summary>
      <exception cref="T:System.NullReferenceException">Failed to derive host assembly info.</exception>
    </member>
    <member name="M:Gemstone.IO.FilePath.InApplicationPath(System.String)">
      <summary>
            Determines if the specified <paramref name="filePath" /> is contained with the current executable path.
            </summary>
      <param name="filePath">File name or relative file path.</param>
      <returns>
        <c>true</c> if the specified <paramref name="filePath" /> is contained with the current executable path; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsFilePatternMatch(System.String,System.String,System.Boolean)">
      <summary>
            Determines whether the specified file name matches the given file spec (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpec">The file spec used for matching the specified file name.</param>
      <param name="filePath">The file path to be tested against the specified file spec for a match.</param>
      <param name="ignoreCase">
        <c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
      <returns>
        <c>true</c> if the specified file name matches the given file spec; otherwise <c>false</c>.</returns>
      <remarks>
            The syntax for <paramref name="fileSpec" /> adheres to the following rules:
            
            <ul><li>Either '\' or '/' (as defined by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> and <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />) can match the other.</li><li>A single '\' or '/' at the beginning of the pattern matches any valid path root (such as "C:\" or "\\server\share").</li><li>A '?' matches a single character which would be valid in a file name (as defined by <see cref="M:System.IO.Path.GetInvalidFileNameChars" />).</li><li>A '*' matches any number of characters which would be valid in a file name.</li><li>A sequence of "**\" or "**/" matches any number of sequential directories.</li><li>Any other character matches itself.</li></ul></remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsFilePatternMatch(System.String[],System.String,System.Boolean)">
      <summary>
            Determines whether the specified file name matches any of the given file specs (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpecs">The file specs used for matching the specified file name.</param>
      <param name="filePath">The file path to be tested against the specified file specs for a match.</param>
      <param name="ignoreCase">
        <c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
      <returns>
        <c>true</c> if the specified file name matches any of the given file specs; otherwise <c>false</c>.</returns>
      <remarks>
            The syntax for <paramref name="fileSpecs" /> adheres to the following rules:
            
            <ul><li>Either '\' or '/' (as defined by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> and <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />) can match the other.</li><li>A single '\' or '/' at the beginning of the pattern matches any valid path root (such as "C:\" or "\\server\share").</li><li>A '?' matches a single character which would be valid in a file name (as defined by <see cref="M:System.IO.Path.GetInvalidFileNameChars" />).</li><li>A '*' matches any number of characters which would be valid in a file name.</li><li>A sequence of "**\" or "**/" matches any number of sequential directories.</li><li>Any other character matches itself.</li></ul></remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsValidFileName(System.String)">
      <summary>
            Determines if the specified file name and path is valid.
            </summary>
      <param name="filePath">The file name with optional path to test for validity.</param>
      <returns>
        <c>true</c> if the specified <paramref name="filePath" /> is a valid name; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.RemovePathSuffix(System.String)">
      <summary>
            Makes sure path is not suffixed with <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />.
            </summary>
      <param name="filePath">The file path to be unsuffixed.</param>
      <returns>Unsuffixed path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TrimFileName(System.String,System.Int32)">
      <summary>
            Returns a file name, for display purposes, of the specified length using "..." to indicate a longer name.
            </summary>
      <param name="filePath">The file path to be trimmed.</param>
      <param name="length">The maximum length of the trimmed file path.</param>
      <returns>Trimmed file path.</returns>
      <remarks>
            Minimum value for the <paramref name="length" /> parameter is 12. 12 will be used for any value 
            specified as less than 12.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetReadLock(System.String)">
      <summary>
            Attempts to get read access on a file.
            </summary>
      <param name="fileName">The file to check for read access.</param>
      <returns>True if read access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetReadLockExclusive(System.String)">
      <summary>
            Attempts to get read access on a file.
            </summary>
      <param name="fileName">The file to check for read access.</param>
      <returns>True if read access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetWriteLock(System.String)">
      <summary>
            Attempts to get write access on a file.
            </summary>
      <param name="fileName">The file to check for write access.</param>
      <returns>True if write access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.ValidatePathName(System.String)">
      <summary>
            Ensures the supplied path name is valid.
            </summary>
      <param name="filePath">The file path to be validated.</param>
      <remarks>
            Throws argument exceptions if the <see param="pathName" /> is invalid.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLock(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for read access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLock(System.String,System.Double)">
      <summary>
            Waits for read access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain read access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLockExclusive(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for read access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLockExclusive(System.String,System.Double)">
      <summary>
            Waits for read access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain read access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForWriteLock(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for write access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain write access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForWriteLock(System.String,System.Double)">
      <summary>
            Waits for write access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain write access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain write access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitTillExists(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for a file to exist.
            </summary>
      <param name="fileName">The name of the file to wait for until it is created.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitTillExists(System.String,System.Double)">
      <summary>
            Waits for a file to exist for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for until it is created.</param>
      <param name="secondsToWait">The time to wait for in seconds for the file to be created. Set to zero to wait infinitely.</param>
    </member>
    <member name="T:Gemstone.IO.InterprocessCache">
      <summary>
            Represents a serialized data cache that can be saved or read from multiple applications using inter-process synchronization.
            </summary>
      <remarks>
        <para>
            Note that all file data in this class gets serialized to and from memory, as such, the design intention for this class is for
            use with smaller data sets such as serialized lists or dictionaries that need inter-process synchronized loading and saving.
            </para>
        <para>
            The <see cref="T:Gemstone.IO.InterprocessCache" /> uses a <see cref="T:Gemstone.Threading.NamedSemaphore" /> to synchronize access to cache as an inter-process shared resource.
            On POSIX systems, the <see cref="T:Gemstone.Threading.NamedSemaphore" /> exhibits kernel persistence, meaning instances will remain active beyond the lifespan of
            the creating process. The named semaphore must be explicitly removed by invoking <see cref="M:Gemstone.IO.InterprocessCache.ReleaseInterprocessResources" /> when the last
            interprocess cache instance is no longer needed. Kernel persistence necessitates careful design consideration regarding process
            responsibility for invoking the <see cref="M:Gemstone.IO.InterprocessCache.ReleaseInterprocessResources" /> method. Since the common use case for named semaphores is across
            multiple applications, it is advisable for the last exiting process to handle the cleanup. In cases where an application may crash before
            calling the <see cref="M:Gemstone.IO.InterprocessCache.ReleaseInterprocessResources" /> method, the semaphore persists in the system, potentially leading to resource leakage.
            Implementations should include strategies to address and mitigate this risk.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.InterprocessCache" /> with the specified number of <paramref name="maximumConcurrentLocks" />.
            </summary>
      <param name="maximumConcurrentLocks">Maximum concurrent reader locks to allow.</param>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.AutoSave">
      <summary>
            Gets or sets flag that determines if <see cref="T:Gemstone.IO.InterprocessCache" /> should automatically initiate a save when <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> has been updated.
            </summary>
    </member>
    <member name="F:Gemstone.IO.InterprocessCache.DefaultMaximumRetryAttempts">
      <summary>
            Default maximum retry attempts allowed for loading <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="F:Gemstone.IO.InterprocessCache.DefaultRetryDelayInterval">
      <summary>
            Default wait interval, in milliseconds, before retrying load of <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.InterprocessCache" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.InterprocessCache" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.FileData">
      <summary>
            Gets or sets file data for the cache to be saved or that has been loaded.
            </summary>
      <remarks>
            Setting value to <c>null</c> will create a zero-length file.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.FileName">
      <summary>
            Path and file name for the cache needing inter-process synchronization.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.IO.InterprocessCache" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Load">
      <summary>
            Initiates inter-process synchronized cache file load.
            </summary>
      <remarks>
            Subclasses should always call <see cref="M:Gemstone.IO.InterprocessCache.WaitForLoad" /> before calling this method.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.LoadFileData(System.IO.FileStream)">
      <summary>
            Handles deserialization of file from disk; virtual method allows customization (e.g., pre-load decryption and/or data merge).
            </summary>
      <param name="fileStream">
        <see cref="T:System.IO.FileStream" /> used to deserialize data.</param>
      <returns>Deserialized file data.</returns>
      <remarks>
            Consumers overriding this method should not directly call <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> property to avoid potential dead-locks.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.MaximumConcurrentLocks">
      <summary>
            Gets the maximum concurrent reader locks allowed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts">
      <summary>
            Maximum retry attempts allowed for loading or saving cache file data.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.ReleaseInterprocessResources">
      <summary>
            Releases the inter-process resources used by the <see cref="T:Gemstone.IO.InterprocessCache" />.
            </summary>
      <remarks>
            On POSIX systems, calling this method removes the named semaphore used by the inter-process cache.
            The semaphore name is removed immediately and is destroyed once all other processes that have the
            semaphore open close it. Calling this method on Windows systems does nothing.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.ReloadOnChange">
      <summary>
            Gets or sets flag that enables system to monitor for changes in <see cref="P:Gemstone.IO.InterprocessCache.FileName" /> and automatically reload <see cref="P:Gemstone.IO.InterprocessCache.FileData" />.
            </summary>
    </member>
    <member name="P:Gemstone.IO.InterprocessCache.RetryDelayInterval">
      <summary>
            Wait interval, in milliseconds, before retrying load or save of cache file data.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.Save">
      <summary>
            Initiates inter-process synchronized cache file save.
            </summary>
      <remarks>
            Subclasses should always call <see cref="M:Gemstone.IO.InterprocessCache.WaitForLoad" /> before calling this method.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.SaveFileData(System.IO.FileStream,System.Byte[])">
      <summary>
            Handles serialization of file to disk; virtual method allows customization (e.g., pre-save encryption and/or data merge).
            </summary>
      <param name="fileStream">
        <see cref="T:System.IO.FileStream" /> used to serialize data.</param>
      <param name="fileData">File data to be serialized.</param>
      <remarks>
            Consumers overriding this method should not directly call <see cref="P:Gemstone.IO.InterprocessCache.FileData" /> property to avoid potential dead-locks.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForLoad">
      <summary>
            Blocks current thread and waits for any pending load to complete; wait time is <c><see cref="P:Gemstone.IO.InterprocessCache.RetryDelayInterval" /> * <see cref="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts" /></c>.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForLoad(System.Int32)">
      <summary>
            Blocks current thread and waits for specified <paramref name="millisecondsTimeout" /> for any pending load to complete.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForSave">
      <summary>
            Blocks current thread and waits for any pending save to complete; wait time is <c><see cref="P:Gemstone.IO.InterprocessCache.RetryDelayInterval" /> * <see cref="P:Gemstone.IO.InterprocessCache.MaximumRetryAttempts" /></c>.
            </summary>
    </member>
    <member name="M:Gemstone.IO.InterprocessCache.WaitForSave(System.Int32)">
      <summary>
            Blocks current thread and waits for specified <paramref name="millisecondsTimeout" /> for any pending save to complete.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely.</param>
    </member>
    <member name="T:Gemstone.IO.Outage">
      <summary>
            Represents an outage as a start time and an end time.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Outage.#ctor(Gemstone.Range{System.DateTimeOffset})">
      <summary>
            Creates a new <see cref="T:Gemstone.IO.Outage" /> with the same start and end time as the given range.
            </summary>
      <param name="range">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>range</parameter>
            <parameter>M:Gemstone.IO.Outage.#ctor(Gemstone.Range{System.DateTimeOffset})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Gemstone.IO.Outage.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
            Creates a new <see cref="T:Gemstone.IO.Outage" /> with the specified start and end time.
            </summary>
      <param name="startTime">Start time for outage.</param>
      <param name="endTime">End time for outage.</param>
    </member>
    <member name="M:Gemstone.IO.Outage.Equals(Gemstone.IO.Outage)">
      <summary>
            Determines if this <see cref="T:Gemstone.IO.Outage" /> equals another outage.
            </summary>
      <param name="other">The outage to be compared.</param>
      <returns>True if the outages are equal; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.Outage.Equals(System.Object)">
      <summary>
            Determines if this <see cref="T:Gemstone.IO.Outage" /> equals another object.
            </summary>
      <param name="obj">The object to be compared.</param>
      <returns>True if the objects are equal; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.Outage.GetHashCode">
      <summary>
            Gets the hash code for this <see cref="T:Gemstone.IO.Outage" />.
            </summary>
      <returns>The hash code for the outage.</returns>
    </member>
    <member name="M:Gemstone.IO.Outage.MergeOverlapping(System.Collections.Generic.IEnumerable{Gemstone.IO.Outage})">
      <summary>
            Merges all consecutive groups of overlapping ranges in a
            collection and returns the resulting collection of outages.
            </summary>
      <param name="outages">The collection of outages.</param>
      <returns>The collection of merged outages.</returns>
      <remarks>This method does not preserve the order of the source collection.</remarks>
    </member>
    <member name="T:Gemstone.IO.OutageLog">
      <summary>
            Represents a persisted log of outages as a list of start and stop times.
            </summary>
      <remarks>
        <para>
            This class serializes a list of outages (e.g., a connection outage or data loss) where each outage
            consists of a start and end time. The outages are persisted in a log file so that the log can be
            operated on even through host application restarts until the outages are processed.
            </para>
        <para>
            All members in the <see cref="T:Gemstone.IO.OutageLog" /> are guaranteed to be thread safe. File locks are used to
            provide synchronization so that the file can stay up-to-date with changes made in the application.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.OutageLog.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Add(Gemstone.IO.Outage)">
      <summary>
            Adds an outage to the <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
      <param name="outage">Outage to be added.</param>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Add(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
            Adds an outage to the <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
      <param name="startTime">Start time of outage.</param>
      <param name="endTime">End time of outage.</param>
    </member>
    <member name="P:Gemstone.IO.OutageLog.Count">
      <summary>
            Gets the number of outages in the log.
            </summary>
    </member>
    <member name="F:Gemstone.IO.OutageLog.DateTimeFormat">
      <summary>
            Date-time format used by <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.OutageLog" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.OutageLog" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:Gemstone.IO.OutageLog.Disposed">
      <summary>
            Raised after the outage log has been properly disposed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.OutageLog.FileName">
      <summary>
            Gets or sets the file name for the outage log; file name can be set with a relative path.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.IO.OutageLog" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLog.First">
      <summary>
            Gets the first outage in the list of outages.
            </summary>
      <returns>The first outage, or null if there are no outages.</returns>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Initialize">
      <summary>
            Initialize the outage log.
            </summary>
      <remarks>
        <para>
            Initialization performs initial outage log read.
            </para>
        <para>
            It is important to separate initialization from construction such that consumer can attach to events before class
            is initialized in case initialization causes events to be raised.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.IO.OutageLog.IsDisposed">
      <summary>
            Gets a flag that indicates whether the object has been disposed.
            </summary>
    </member>
    <member name="E:Gemstone.IO.OutageLog.LogModified">
      <summary>
            Event is raised when the outage log is modified.
            </summary>
    </member>
    <member name="P:Gemstone.IO.OutageLog.Outages">
      <summary>
            Gets the full list of outages in the log.
            </summary>
    </member>
    <member name="E:Gemstone.IO.OutageLog.ProcessException">
      <summary>
            Event is raised when there is an exception encountered while processing outage log.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the exception that was thrown.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.OutageLog.Remove(Gemstone.IO.Outage)">
      <summary>
            Removes the given outage from the outage log.
            </summary>
      <param name="outage">The outage to be removed from the outage log.</param>
      <returns>True if the outage was removed; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.IO.OutageLog.Status">
      <summary>
            Gets the current status details about <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
    </member>
    <member name="T:Gemstone.IO.OutageLogProcessor">
      <summary>
            Represents a thread-safe <see cref="T:Gemstone.IO.OutageLog" /> processor that will operate on each <see cref="T:Gemstone.IO.Outage" /> with a consumer provided function on independent threads.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLogProcessor.#ctor(Gemstone.IO.OutageLog,System.Action{Gemstone.IO.Outage},System.Func{Gemstone.IO.Outage,System.Boolean},System.Action{System.Exception},System.Int32)">
      <summary>
            Creates a <see cref="T:Gemstone.IO.OutageLogProcessor" /> using a pre-initialized <see cref="T:Gemstone.IO.OutageLog" />.
            </summary>
      <param name="outageLog">Pre-initialized <see cref="T:Gemstone.IO.OutageLog" /> to process.</param>
      <param name="processOutageFunction">A delegate that defines a processing function for an <see cref="T:Gemstone.IO.Outage" />.</param>
      <param name="canProcessOutageFunction">A delegate that determines if an <see cref="T:Gemstone.IO.Outage" /> can currently be processed.</param>
      <param name="processExceptionHandler">Delegate to handle any exceptions encountered while processing as <see cref="T:Gemstone.IO.Outage" />.</param>
      <param name="processingInterval">Processing interval, in milliseconds.</param>
    </member>
    <member name="M:Gemstone.IO.OutageLogProcessor.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.OutageLogProcessor" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLogProcessor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.OutageLogProcessor" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.IO.OutageLogProcessor.Enabled">
      <summary>
            Enables or disables the <see cref="T:Gemstone.IO.OutageLogProcessor" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.OutageLogProcessor.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.IO.OutageLogProcessor" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="T:Gemstone.IO.RunTimeLog">
      <summary>
            Represents a persisted run-time log that tracks last start, stop and running times.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.#ctor">
      <summary>
            Creates a new run-time log.
            </summary>
    </member>
    <member name="F:Gemstone.IO.RunTimeLog.DateTimeFormat">
      <summary>
            Date-time format used by <see cref="T:Gemstone.IO.RunTimeLog" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.RunTimeLog" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.RunTimeLog" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="E:Gemstone.IO.RunTimeLog.Disposed">
      <summary>
            Raised after the run-time log has been properly disposed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.Enabled">
      <summary>        
            Gets or sets a boolean value that indicates whether the run-time log is enabled.
            </summary>
      <remarks>
            This property controls the automatic write log timer.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.FileName">
      <summary>
            Gets or sets the file name for the run-time log; file name can be set with a relative path.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.IO.RunTimeLog" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.Initialize">
      <summary>
            Initialize the run-time log.
            </summary>
      <remarks>
        <para>
            Initialization performs initial run-time log read, establishes new start time and enables automatic write log timer.
            </para>
        <para>
            Last logged stop time will be validated against last logged running time. If the last logged running time is later
            than the last logged stop time, the stop time will be set to the running time with the assumption that the log file
            was not properly shut down (e.g., due to abnormal host termination).
            </para>
        <para>
            It is important to separate initialization from construction such that consumer can attach to events before class
            is initialized in case initialization causes events to be raised.
            </para>
      </remarks>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.IsDisposed">
      <summary>
            Gets a flag that indicates whether the object has been disposed.
            </summary>
    </member>
    <member name="F:Gemstone.IO.RunTimeLog.LastRunningTimeKey">
      <summary>
            Log file key name for last running time used by <see cref="T:Gemstone.IO.RunTimeLog" />.
            </summary>
    </member>
    <member name="F:Gemstone.IO.RunTimeLog.LastStartTimeKey">
      <summary>
            Log file key name for last start time used by <see cref="T:Gemstone.IO.RunTimeLog" />.
            </summary>
    </member>
    <member name="F:Gemstone.IO.RunTimeLog.LastStopTimeKey">
      <summary>
            Log file key name for last stop time used by <see cref="T:Gemstone.IO.RunTimeLog" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.OnProcessException(System.Exception)">
      <summary>
            Raises <see cref="E:Gemstone.IO.RunTimeLog.ProcessException" /> event.
            </summary>
      <param name="ex">Processing <see cref="T:System.Exception" />.</param>
    </member>
    <member name="E:Gemstone.IO.RunTimeLog.ProcessException">
      <summary>
            Event is raised when there is an exception encountered while processing run-time log.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the exception that was thrown.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.ReadLog">
      <summary>
            Reads the run-time log.
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.RunningTime">
      <summary>
            Gets last known running-time (10-second resolution).
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.StartTime">
      <summary>
            Gets last known start-time.
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.Status">
      <summary>
            Gets the current status details about <see cref="T:Gemstone.IO.RunTimeLog" />.
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.StopTime">
      <summary>
            Gets last known stop-time.
            </summary>
    </member>
    <member name="P:Gemstone.IO.RunTimeLog.UpTime">
      <summary>
            Gets the up-time calculation for run-time log, i.e., <see cref="P:Gemstone.IO.RunTimeLog.RunningTime" /> - <see cref="P:Gemstone.IO.RunTimeLog.StartTime" /> (10-second resolution).
            </summary>
    </member>
    <member name="M:Gemstone.IO.RunTimeLog.WriteLog">
      <summary>
            Writes the run-time log - times are in a human-readable format.
            </summary>
    </member>
    <member name="T:Gemstone.IO.SafeFileWatcher">
      <summary>
            Represents a wrapper around the native .NET <see cref="T:System.IO.FileSystemWatcher" /> that avoids problems with
            dangling references when using a file watcher instance as a class member that never gets disposed.
            </summary>
      <remarks>
        <para>
            The design goal of the SafeFileWatcher is to avoid accidental memory leaks caused by use of .NET's native
            file system watcher when used as a member of a class that consumers fail to properly dispose. If a class
            has a reference to a file watcher as a member variable and attaches to the file watcher's events, the
            file watcher will maintain a reference the parent class so it can call its event handler. If the parent
            class is not disposed properly, the file watcher will thus not be disposed and will maintain the
            reference to the parent class - the garbage collector will never collect the parent because it has a
            valid reference and no collection means the parent finalizer will never get called and the file system
            watcher will never get disposed. Creating multiple instances of parent class and not disposing of them
            will cause a memory leak even with a properly designed disposable pattern. Using the SafeFileWatcher
            instead of directly using the FileSystemWatcher will resolve this potential issue.
            </para>
        <para>
            Note that component model implementation is not fully replicated - if you are using a file system watcher
            on a design surface, this safety wrapper will usually not be needed. This class has benefit when a class
            will dynamically use a file watcher and needs to make sure any unmanaged resources get properly released
            even if a consumer neglects to call the dispose function.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class, given the specified directory to monitor.
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
            </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="path" /> parameter is an empty string (""). -or-
            The path specified through the <paramref name="path" /> parameter does not exist.
            </exception>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.IO.SafeFileWatcher" /> class, given the specified directory and type of files to monitor.
            </summary>
      <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
      <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="path" /> parameter is null. -or-
            The <paramref name="filter" /> parameter is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="path" /> parameter is an empty string (""). -or-
            The path specified through the <paramref name="path" /> parameter does not exist.
            </exception>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.BeginInit">
      <summary>
            Begins the initialization of a <see cref="T:Gemstone.IO.SafeFileWatcher" /> used on a form or used by another component. The initialization occurs at run time.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Changed">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is changed.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Created">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is created.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Deleted">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is deleted.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.IO.SafeFileWatcher" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.SafeFileWatcher" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.EnableRaisingEvents">
      <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
      <returns>
            true if the component is enabled; otherwise, false. The default is false. If you are using the component on a designer in Visual Studio 2005, the default is true.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> could not be found.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> has not been set or is invalid.</exception>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.EndInit">
      <summary>
            Ends the initialization of a <see cref="T:Gemstone.IO.SafeFileWatcher" /> used on a form or used by another component. The initialization occurs at run time.
            </summary>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Error">
      <summary>
            Occurs when the internal buffer overflows.
            </summary>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Filter">
      <summary>
            Gets or sets the filter string used to determine what files are monitored in a directory.
            </summary>
      <returns>
            The filter string. The default is "*.*" (Watches all files.) 
            </returns>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.Finalize">
      <summary>
            Terminates <see cref="T:Gemstone.IO.SafeFileWatcher" /> instance making sure to release unmanaged resources.
            </summary>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.IncludeSubdirectories">
      <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
      <returns>
            true if you want to monitor subdirectories; otherwise, false. The default is false.
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.InternalBufferSize">
      <summary>
            Gets or sets the size of the internal buffer.
            </summary>
      <returns>
            The internal buffer size. The default is 8192 (8K).
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.NotifyFilter">
      <summary>
            Gets or sets the type of changes to watch for.
            </summary>
      <returns>
            One of the <see cref="T:System.IO.NotifyFilters" /> values. The default is the bitwise OR combination of LastWrite, FileName, and DirectoryName.</returns>
      <exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Path">
      <summary>
            Gets or sets the path of the directory to watch.
            </summary>
      <returns>
            The path to monitor. The default is an empty string ("").
            </returns>
      <exception cref="T:System.ArgumentException">
            The specified path does not exist or could not be found. -or-
            The specified path contains wildcard characters. -or-
            The specified path contains invalid path characters.
            </exception>
    </member>
    <member name="E:Gemstone.IO.SafeFileWatcher.Renamed">
      <summary>
            Occurs when a file or directory in the specified <see cref="P:Gemstone.IO.SafeFileWatcher.Path" /> is renamed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.Site">
      <summary>
            Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:Gemstone.IO.SafeFileWatcher" />.
            </summary>
      <returns>
            An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:Gemstone.IO.SafeFileWatcher" />.
            </returns>
    </member>
    <member name="P:Gemstone.IO.SafeFileWatcher.SynchronizingObject">
      <summary>
            Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.
            </summary>
      <returns>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is null.
            </returns>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>
            A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.
            </summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
      <returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
    </member>
    <member name="M:Gemstone.IO.SafeFileWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>
            A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.
            </summary>
      <param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param>
      <param name="timeout">The time (in milliseconds) to wait before timing out.</param>
      <returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
    </member>
    <member name="T:Gemstone.IO.Parsing.BinaryImageBase">
      <summary>
            Defines a base class that represents binary images for parsing or generation in terms of a header, body and footer.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.IO.Parsing.BinaryImageBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageBase.BinaryLength">
      <summary>
            Gets the length of the <see cref="T:Gemstone.IO.Parsing.BinaryImageBase" /> object.
            </summary>
      <remarks>
            This property is not typically overridden since it is the sum of the header, body and footer lengths.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageBase.BodyLength">
      <summary>
            Gets the length of the body portion of the <see cref="T:Gemstone.IO.Parsing.BinaryImageBase" /> object.
            </summary>
      <remarks>
            This property is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageBase.FooterLength">
      <summary>
            Gets the length of the footer portion of the <see cref="T:Gemstone.IO.Parsing.BinaryImageBase" /> object.
            </summary>
      <remarks>
            This property is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.GenerateBinaryImage(System.Byte[],System.Int32)">
      <summary>
            Generates binary image of the object and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <remarks>
            This property is not typically overridden since it is the generates the combination of the header, body and footer images.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> will exceed <paramref name="buffer" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.GenerateBodyImage(System.Byte[],System.Int32)">
      <summary>
            Generates the binary body image and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.BinaryImageBase.BodyLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.GenerateFooterImage(System.Byte[],System.Int32)">
      <summary>
            Generates the binary footer image and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.BinaryImageBase.FooterLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.GenerateHeaderImage(System.Byte[],System.Int32)">
      <summary>
            Generates the binary header image and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.BinaryImageBase.HeaderLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageBase.HeaderLength">
      <summary>
            Gets the length of the header portion of the <see cref="T:Gemstone.IO.Parsing.BinaryImageBase" /> object.
            </summary>
      <remarks>
            This property is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.ParseBinaryImage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initializes object by parsing the specified <paramref name="buffer" /> containing a binary image.
            </summary>
      <param name="buffer">Buffer containing binary image to parse.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start parsing.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <returns>The number of bytes used for initialization in the <paramref name="buffer" /> (i.e., the number of bytes parsed).</returns>
      <remarks>
            This method is not typically overridden since it is parses the header, body and footer images in sequence.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.ParseBodyImage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Parses the binary body image.
            </summary>
      <param name="buffer">Buffer containing binary image to parse.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start parsing.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <returns>The number of bytes used for initialization in the <paramref name="buffer" /> (i.e., the number of bytes parsed).</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.ParseFooterImage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Parses the binary footer image.
            </summary>
      <param name="buffer">Buffer containing binary image to parse.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start parsing.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <returns>The number of bytes used for initialization in the <paramref name="buffer" /> (i.e., the number of bytes parsed).</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageBase.ParseHeaderImage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Parses the binary header image.
            </summary>
      <param name="buffer">Buffer containing binary image to parse.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start parsing.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <returns>The number of bytes used for initialization in the <paramref name="buffer" /> (i.e., the number of bytes parsed).</returns>
      <remarks>
            This method is typically overridden by a specific protocol implementation.
            </remarks>
    </member>
    <member name="T:Gemstone.IO.Parsing.BinaryImageParserBase">
      <summary>
            This class defines the fundamental functionality for parsing any stream of binary data.
            </summary>
      <remarks>
            This parser is designed as a write-only stream such that data can come from any source.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> class.
            </summary>
    </member>
    <member name="E:Gemstone.IO.Parsing.BinaryImageParserBase.BufferParsed">
      <summary>
            Occurs when buffer parsing has completed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.CanRead">
      <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
      <remarks>
            The <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> is implemented as a WriteOnly stream, so this defaults to false.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.CanSeek">
      <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
      <remarks>
            The <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> is implemented as a WriteOnly stream, so this defaults to false.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.CanWrite">
      <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
      <remarks>
            The <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> is implemented as a WriteOnly stream, so this defaults to true.
            </remarks>
    </member>
    <member name="E:Gemstone.IO.Parsing.BinaryImageParserBase.DataDiscarded">
      <summary>
            Occurs when data image fails deserialized due to an exception.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the remaining portion of the binary image that failed to parse.
            </remarks>
    </member>
    <member name="F:Gemstone.IO.Parsing.BinaryImageParserBase.DefaultProtocolSyncBytes">
      <summary>
            Specifies the default value for the <see cref="P:Gemstone.IO.Parsing.BinaryImageParserBase.ProtocolSyncBytes" /> property.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.Enabled">
      <summary>
            Gets or sets a boolean value that indicates whether the data parser is currently enabled.
            </summary>
      <remarks>
            Setting <see cref="P:Gemstone.IO.Parsing.BinaryImageParserBase.Enabled" /> to true will start the <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> if it is not started,
            setting to false will stop the <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> if it is started.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Flush">
      <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data
            to be written to the underlying device.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.Length">
      <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
      <remarks>
            WriteOnly stream has no length. Returned value will always be -1.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.Name">
      <summary>
            Gets the name of <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.OnBufferParsed">
      <summary>
            Raises the <see cref="E:Gemstone.IO.Parsing.BinaryImageParserBase.BufferParsed" /> event.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.OnDataDiscarded(System.Byte[])">
      <summary>
            Raises the <see cref="E:Gemstone.IO.Parsing.BinaryImageParserBase.DataDiscarded" /> event.
            </summary>
      <param name="buffer">Source buffer that contains output that failed to parse.</param>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.OnParsingException(System.Exception)">
      <summary>
            Raises the <see cref="E:Gemstone.IO.Parsing.BinaryImageParserBase.ParsingException" /> event.
            </summary>
      <param name="ex">The <see cref="T:System.Exception" /> that was encountered during parsing.</param>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Parse(Gemstone.IO.Parsing.ISupportBinaryImage)">
      <summary>
            Parses the object implementing the <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> interface.
            </summary>
      <param name="image">Object to be parsed that implements the <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> interface.</param>
      <remarks>
            This function takes the binary image from <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> and writes the buffer to the <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> stream for parsing.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.ParseFrame(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Protocol specific frame parsing algorithm.
            </summary>
      <param name="buffer">Buffer containing data to parse.</param>
      <param name="offset">Offset index into buffer that represents where to start parsing.</param>
      <param name="length">Maximum length of valid data from offset.</param>
      <returns>The length of the data that was parsed.</returns>
      <remarks>
        <para>
            Implementers can choose to focus on parsing a single frame in the buffer even if there are other frames available in the buffer.
            Base class will continue to move through buffer on behalf of derived class until all the buffer has been processed.  Just return
            the total amount of data was parsed and the remaining unparsed will be prepended to next received buffer.
            </para>
        <para>
            Derived implementations should return an integer value that represents the length of the data that was parsed, and zero if not
            enough data was able to be parsed. Note that exceptions are expensive when parsing fast moving streaming data and a good coding
            practice for implementations of this method will be to not throw an exception when there is not enough data to parse the data,
            instead check the <paramref name="length" /> property to verify there is enough buffer data to represent the desired image. If
            there is not enough data to represent the image return zero and base class will prepend buffer onto next incoming set of data.
            </para>
        <para>
            Because of the expense incurred when an exception is thrown, any exceptions encountered in the derived implementations of this method
            will cause the current data buffer to be discarded and a <see cref="E:Gemstone.IO.Parsing.BinaryImageParserBase.ParsingException" /> event to be raised.  Doing this prevents
            exceptions from being thrown repeatedly for the same data. If your code implementation recognizes a malformed image, you can raise
            a custom event to indicate this instead of throwing as exception and keep moving through the buffer as an optimization.
            </para>
      </remarks>
    </member>
    <member name="E:Gemstone.IO.Parsing.BinaryImageParserBase.ParsingException">
      <summary>
            Occurs when an <see cref="T:System.Exception" /> is encountered while attempting to parse data.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the <see cref="T:System.Exception" /> encountered while parsing data.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.Position">
      <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
      <remarks>
            WriteOnly stream has no position. Returned value will always be -1 and any assigned value will be ignored.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.ProtocolSyncBytes">
      <summary>
            Gets or sets synchronization bytes for this parsing implementation, if used.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.ProtocolUsesSyncBytes">
      <summary>
            Gets flag that determines if this protocol parsing implementation uses synchronization bytes.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
      <param name="buffer">Array of <see cref="T:System.Byte" />s.</param>
      <param name="count">An <see cref="T:System.Int32" /> value for the offset.</param>
      <param name="offset">An <see cref="T:System.Int32" /> value for the count.</param>
      <returns>An <see cref="T:System.Int32" /> as the number of bytes read. Well. It would, if implemented.</returns>
      <exception cref="T:System.NotImplementedException">Cannot read from WriteOnly stream.</exception>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.RunTime">
      <summary>
            Gets the total amount of time, in seconds, that the <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" /> has been active.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
      <param name="offset">A <see cref="T:System.Int64" /> value for the offset.</param>
      <param name="origin">A <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>Returns a <see cref="T:System.Int64" /> value indicating the point that was sought.</returns>
      <exception cref="T:System.NotImplementedException">WriteOnly stream has no position.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.SetLength(System.Int64)">
      <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
      <param name="value">A <see cref="T:System.Int64" /> value.</param>
      <exception cref="T:System.NotImplementedException">WriteOnly stream has no length.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Start">
      <summary>
            Start the streaming data parser.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.Status">
      <summary>
            Gets current status of <see cref="T:Gemstone.IO.Parsing.BinaryImageParserBase" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Stop">
      <summary>
            Stops the streaming data parser.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Parsing.BinaryImageParserBase.StreamInitialized">
      <summary>
            Tracks if data stream has been initialized.
            </summary>
      <remarks>
            Only relevant if <see cref="P:Gemstone.IO.Parsing.BinaryImageParserBase.ProtocolUsesSyncBytes" /> is true.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.BinaryImageParserBase.TotalProcessedBuffers">
      <summary>
            Gets the total number of buffer images processed so far.
            </summary>
      <returns>Total number of buffer images processed so far.</returns>
    </member>
    <member name="F:Gemstone.IO.Parsing.BinaryImageParserBase.UnparsedBuffer">
      <summary>
            Remaining unparsed buffer from last parsing execution, if any.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BinaryImageParserBase.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes onto the stream for parsing.
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="T:Gemstone.IO.Parsing.BooleanExpression">
      <summary>
            Represents a boolean expression that can be parsed and executed at runtime.
            </summary>
      <remarks>
            Binary operators have the same level of precedence and are evaluated from right to left.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BooleanExpression.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Parsing.BooleanExpression" /> class.
            </summary>
      <param name="expressionText">The expression text to be parsed as a boolean expression.</param>
      <remarks>
            The default comparer for identifiers is <see cref="P:System.StringComparer.OrdinalIgnoreCase" />.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.BooleanExpression.#ctor(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Parsing.BooleanExpression" /> class.
            </summary>
      <param name="expressionText">The expression text to be parsed as a boolean expression.</param>
      <param name="identifierComparer">Comparer used to compare identifiers.</param>
    </member>
    <member name="M:Gemstone.IO.Parsing.BooleanExpression.Evaluate">
      <summary>
            Evaluates the expression using the
            current values of the variables.
            </summary>
      <returns>The result of the evaluation.</returns>
    </member>
    <member name="P:Gemstone.IO.Parsing.BooleanExpression.Item(System.String)">
      <summary>
            Gets the variable identified by the given identifier.
            </summary>
      <param name="identifier">The identifier used to refer to the variable.</param>
      <returns>The variable identified by the given identifier.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.BooleanExpression.TryGetVariable(System.String,Gemstone.IO.Parsing.BooleanExpression.Variable@)">
      <summary>
            Attempts to get the variable identified by the given identifier.
            </summary>
      <param name="identifier">The identifier used to refer to the variable.</param>
      <param name="variable">The variable identified by the given identifier.</param>
      <returns>True if the variable is present in the expression; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.IO.Parsing.BooleanExpression.Variables">
      <summary>
            Gets the list of variables found while parsing the boolean expression.
            </summary>
    </member>
    <member name="T:Gemstone.IO.Parsing.BooleanExpression.Variable">
      <summary>
            Represents a variable that can be tweaked at runtime.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.BooleanExpression.Variable.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.IO.Parsing.BooleanExpression.Variable" /> class.
            </summary>
      <param name="identifier">The identifier used to refer to the variable.</param>
    </member>
    <member name="F:Gemstone.IO.Parsing.BooleanExpression.Variable.Identifier">
      <summary>
            The identifier used to refer to the variable.
            </summary>
    </member>
    <member name="F:Gemstone.IO.Parsing.BooleanExpression.Variable.Value">
      <summary>
            The value of the variable.
            </summary>
    </member>
    <member name="T:Gemstone.IO.Parsing.IBinaryImageParser">
      <summary>
            This interface represents the protocol independent representation of a streaming data parser.
            </summary>
    </member>
    <member name="E:Gemstone.IO.Parsing.IBinaryImageParser.DataDiscarded">
      <summary>
            Occurs when data image fails deserialization due to an exception.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the remaining portion of the binary image that failed to parse.
            </remarks>
    </member>
    <member name="P:Gemstone.IO.Parsing.IBinaryImageParser.Enabled">
      <summary>
            Gets or sets a boolean value that indicates whether the data parser is currently enabled.
            </summary>
    </member>
    <member name="E:Gemstone.IO.Parsing.IBinaryImageParser.ParsingException">
      <summary>
            Occurs when an <see cref="T:System.Exception" /> is encountered while attempting to parse data.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the <see cref="T:System.Exception" /> encountered while parsing data.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.IBinaryImageParser.Start">
      <summary>
            Start the streaming data parser.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.IBinaryImageParser.Stop">
      <summary>
            Stops the streaming data parser.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.IBinaryImageParser.TotalProcessedBuffers">
      <summary>
            Gets the total number of buffer images processed so far.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.IBinaryImageParser.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes onto the <see cref="T:Gemstone.IO.Parsing.IBinaryImageParser" /> stream for parsing.
            </summary>
      <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="T:Gemstone.IO.Parsing.ISupportBinaryImage">
      <summary>
            Specifies that an object can support production or consumption of a binary image that represents the object.
            </summary>
    </member>
    <member name="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength">
      <summary>
            Gets the length of the binary image.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImage.GenerateBinaryImage(System.Byte[],System.Int32)">
      <summary>
            Generates binary image of the object and copies it into the given buffer, for <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> bytes.
            </summary>
      <param name="buffer">Buffer used to hold generated binary image of the source object.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start writing.</param>
      <returns>The number of bytes written to the <paramref name="buffer" />.</returns>
      <remarks>
            Implementers should validate <paramref name="startIndex" /> and <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" /> against <paramref name="buffer" /> length.
            The <see cref="M:Gemstone.ArrayExtensions.ArrayExtensions.ValidateParameters``1(``0[],System.Int32,System.Int32)" /> method can be used to perform this validation.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImage.ParseBinaryImage(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initializes object by parsing the specified <paramref name="buffer" /> containing a binary image.
            </summary>
      <param name="buffer">Buffer containing binary image to parse.</param>
      <param name="startIndex">0-based starting index in the <paramref name="buffer" /> to start parsing.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> to read from <paramref name="startIndex" />.</param>
      <returns>The number of bytes used for initialization in the <paramref name="buffer" /> (i.e., the number of bytes parsed).</returns>
      <remarks>
            Implementers should validate <paramref name="startIndex" /> and <paramref name="length" /> against <paramref name="buffer" /> length.
            The <see cref="M:Gemstone.ArrayExtensions.ArrayExtensions.ValidateParameters``1(``0[],System.Int32,System.Int32)" /> method can be used to perform this validation.
            </remarks>
    </member>
    <member name="T:Gemstone.IO.Parsing.ISupportBinaryImageExtensions">
      <summary>
            Defines extension functions related to <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> implementations.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.BinaryImage(Gemstone.IO.Parsing.ISupportBinaryImage,System.Boolean)">
      <summary>
            Returns a binary image of an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />.
            </summary>
      <param name="imageSource">
        <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> source.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <returns>A binary image of an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />.</returns>
      <remarks>
            This is a convenience method. It is often optimal to use <see cref="M:Gemstone.IO.Parsing.ISupportBinaryImage.GenerateBinaryImage(System.Byte[],System.Int32)" />
            directly using a common buffer instead of always allocating new buffers.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="imageSource" /> cannot be null.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.BinaryImageAsync(Gemstone.IO.Parsing.ISupportBinaryImage,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously returns a binary image of an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />.
            </summary>
      <param name="imageSource">The <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> source from which the binary image is generated.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <param name="cancellationToken">A token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous operation. The task result contains the binary image of the object.</returns>
      <remarks>
            This method provides an asynchronous alternative to <see cref="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.BinaryImage(Gemstone.IO.Parsing.ISupportBinaryImage,System.Boolean)" />. It is often optimal to use
            <see cref="M:Gemstone.IO.Parsing.ISupportBinaryImage.GenerateBinaryImage(System.Byte[],System.Int32)" /> directly with a common buffer instead of always
            allocating new buffers.
            </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="imageSource" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.CopyBinaryImageToStream(Gemstone.IO.Parsing.ISupportBinaryImage,System.IO.Stream,System.Boolean)">
      <summary>
            Copies the binary image of the specified <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> to the provided <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="imageSource">The source object implementing <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> whose binary image will be copied.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which the binary image will be written.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageSource" /> or <paramref name="stream" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.CopyBinaryImageToStreamAsync(Gemstone.IO.Parsing.ISupportBinaryImage,System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously copies the binary image of an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> to the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="imageSource">The <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> source whose binary image will be copied.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which the binary image will be written.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <param name="cancellationToken">A token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous operation.</returns>
      <remarks>
            This method uses a buffer rented from a shared <see cref="T:System.Buffers.ArrayPool`1" /> to optimize memory usage.
            The buffer is returned to the pool after the operation completes.
            </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageSource" /> or <paramref name="stream" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.ParseBinaryImageFromStream(Gemstone.IO.Parsing.ISupportBinaryImage,System.IO.Stream,System.Boolean)">
      <summary>
            Parses a binary image from the specified <see cref="T:System.IO.Stream" /> into an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />.
            </summary>
      <param name="imageSource">The <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> instance into which the binary image will be parsed.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which the binary image will be read.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <returns>The number of bytes successfully read and parsed from the stream.</returns>
      <remarks>
            This method reads a binary image from the provided <see cref="T:System.IO.Stream" /> and parses it into the specified
            <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> instance. It uses a shared buffer pool to minimize memory allocations.
            </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageSource" /> or <paramref name="stream" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageExtensions.ParseBinaryImageFromStreamAsync(Gemstone.IO.Parsing.ISupportBinaryImage,System.IO.Stream,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously parses a binary image from the specified <see cref="T:System.IO.Stream" /> into an object that implements <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />.
            </summary>
      <param name="imageSource">The <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" /> instance into which the binary image will be parsed.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which the binary image will be read.</param>
      <param name="readExactly">
            Specifies whether the method should read exactly the number of bytes required to
            fill the binary image. If <c>true</c>, the method will ensure the exact number of
            bytes is read; otherwise, it reads as many bytes as are available.
            </param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <param name="cancellationToken">A token to monitor for cancellation requests.</param>
      <returns>A task that represents the asynchronous operation. The task result contains the number of bytes successfully parsed.</returns>
      <remarks>
            This method uses a buffer rented from a shared <see cref="T:System.Buffers.ArrayPool`1" /> to read the binary image.
            The buffer is returned to the pool after the operation completes.
            </remarks>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageSource" /> or <paramref name="stream" /> is <c>null</c>.</exception>
      <exception cref="T:System.OperationCanceledException">Thrown if the operation is canceled via the <paramref name="cancellationToken" />.</exception>
    </member>
    <member name="T:Gemstone.IO.Parsing.ISupportBinaryImageSpan">
      <summary>
            Span-optimized binary image production/consumption with buffered I/O helpers.
            Optional companion to <see cref="T:Gemstone.IO.Parsing.ISupportBinaryImage" />; most callers only need to
            implement the two span methods. Everything else has sensible defaults.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.GenerateBinaryImage(System.Span{System.Byte})">
      <summary>
            Writes this object's binary image to <paramref name="destination" />.
            </summary>
      <param name="destination">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destination</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.GenerateBinaryImage(System.Span{System.Byte})</parameter>
          </include>
        </markup>
      </param>
      <returns>The number of bytes written.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.GetRequiredLength(System.Buffers.ReadOnlySequence{System.Byte})">
      <summary>
            Determines how many bytes are required to parse this instance from the given sequence.
            Default assumes fixed-size and returns <see cref="P:Gemstone.IO.Parsing.ISupportBinaryImage.BinaryLength" />.
            Override for variable-length formats (peek a header, etc.).
            </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.GetRequiredLength(System.Buffers.ReadOnlySequence{System.Byte})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.GetRequiredLength(System.Buffers.ReadOnlySequence{System.Byte})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.ParseBinaryImage(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean)">
      <summary>
            Parses from a <see cref="T:System.Buffers.ReadOnlySequence`1" /> and returns bytes consumed.
            </summary>
      <param name="source">The source sequence from which to parse.</param>
      <param name="clearArray">
            Clears any rented buffers of their contents so that a subsequent consumer will not
            see the previous consumer's content. If <c>false</c>, default, the array's contents
            are left unchanged.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.ParseBinaryImage(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
      <remarks>
            Default: fixed-size fast paths, pooled copy only when necessary.
            Override for variable-length formats to avoid copies entirely.
            </remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.ParseBinaryImage(System.ReadOnlySpan{System.Byte})">
      <summary>
            Parses this object's state from <paramref name="source" />.
            </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.ParseBinaryImage(System.ReadOnlySpan{System.Byte})</parameter>
          </include>
        </markup>
      </param>
      <returns>The number of bytes consumed.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.TryGenerateBinaryImage(System.Span{System.Byte},System.Int32@)">
      <summary>
            Attempts to write this object's binary image to the specified <paramref name="destination" /> span.
            </summary>
      <param name="destination">The span to which the binary image will be written.</param>
      <param name="written">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <c>true</c> if the binary image was successfully written to <paramref name="destination" />; 
            otherwise, <c>false</c> if the <paramref name="destination" /> span is too small.
            </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.TryParse(System.Buffers.SequenceReader{System.Byte}@)">
      <summary>
            Parses from a streaming reader; advances by bytes consumed.
            Implemented in terms of <see cref="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.ParseBinaryImage(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean)" />.
            </summary>
      <param name="reader">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reader</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.TryParse(System.Buffers.SequenceReader{System.Byte}@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.TryParse(System.Buffers.SequenceReader{System.Byte}@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.TryParseBinaryImage(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>
            Attempts to parse this object's state from the specified <paramref name="source" /> span.
            </summary>
      <param name="source">The span from which the binary image will be parsed.</param>
      <param name="consumed">
            When this method returns, contains the number of bytes consumed from <paramref name="source" /> 
            if the parsing was successful; otherwise, <c>0</c>.
            </param>
      <returns>
        <c>true</c> if the binary image was successfully parsed from <paramref name="source" />; 
            otherwise, <c>false</c> if the <paramref name="source" /> span is too small.
            </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.ISupportBinaryImageSpan.WriteBinaryImage(System.Buffers.IBufferWriter{System.Byte})">
      <summary>
            Writes this object's binary image to the specified <paramref name="writer" />.
            </summary>
      <param name="writer">The <see cref="T:System.Buffers.IBufferWriter`1" /> to which the binary image will be written.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="writer" /> is <c>null</c>.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the number of bytes written exceeds the available buffer space.</exception>
    </member>
    <member name="T:Gemstone.IO.Parsing.StringParser">
      <summary>
            Like the Excel CSV Parser, only better.
            </summary>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.ExpectedFieldNamesMatch(System.String[],System.String[],System.Boolean,System.Int32,System.Int32)">
      <summary>
            Validates that expected field names match field names found.
            </summary>
      <param name="expectedFieldNames">The string array of expected field names.</param>
      <param name="actualFieldNames">The string array of actual field names.</param>
      <param name="matchCase">Set to TRUE to require case to match.</param>
      <param name="length">The number of fields to check.  Less than 1 sets length to expectedFieldName length</param>
      <param name="startIndex">The index to use to start matching test.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.ExpectedFieldNamesMatch(System.String[],System.String[],System.Boolean,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.FindIndex(System.String,System.String[],System.Boolean,System.Boolean)">
      <summary>
            Finds the index of the first matching (or containing) field name
            </summary>
      <param name="fieldNameValueSought">the field name to find</param>
      <param name="fieldNames">the string array of fields</param>
      <param name="matchCase">set to FALSE for case insensitive tests</param>
      <param name="contains">Set to TRUE to find index that CONTAINS the fileNameValueSought</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.FindIndex(System.String,System.String[],System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.GetBetweenDelimiters(System.String,System.Int32@,System.Char,System.Char,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Returns the string that is between two delimiter strings beginning the first startDelimiter found.
            ALSO, returns the index of the payload (the index of the first char past the startDelimiter)
            </summary>
      <param name="inString">The input string</param>
      <param name="startToken">The beginning token or delimiter</param>
      <param name="endToken">The ending token or delimiter</param>
      <param name="startIndex">The index on which to begin searching inString</param>
      <param name="matchCase">set to FALSE for case insensitive test for delimiters</param>
      <param name="includeTokensInReturn">set to TRUE for the return string to include the opening and closing tokens.</param>
      <param name="payloadIndex">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>payloadIndex</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.GetBetweenDelimiters(System.String,System.Int32@,System.Char,System.Char,System.Int32,System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>A string, and the string starting index (payload Index)</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.Char,System.Char,System.Int32,System.Boolean)">
      <summary>
            Looks to the RIGHT for the first open token and returns the matching close token
            </summary>
      <param name="inString">The string to process</param>
      <param name="openToken">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>openToken</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.Char,System.Char,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="closeToken">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>closeToken</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.Char,System.Char,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="startIndex">The index from with to begin processing inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.Char,System.Char,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Looks to the RIGHT for the first open token and returns the matching close token
            </summary>
      <param name="inString">The string to process</param>
      <param name="openToken">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>openToken</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.String,System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="closeToken">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>closeToken</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.String,System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="startIndex">The index from with to begin processing inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndexOfMatchingCloseToken(System.String,System.String,System.String,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfNextToken(System.String,System.Char,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Finds the index of the "n" occurrence of a character (a token) within a string
            </summary>
      <param name="inString">The string to process.</param>
      <param name="token">The token character sought</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="occurrenceCount">The occurrence sought</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>Returns the starting index of the nth occurrence of a character.
             Returns -1 if nth occurrence does not exist.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfNextToken(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Finds the index of the "n" occurrence of one string (a token) within another
            </summary>
      <param name="inString">The string to process.</param>
      <param name="token">The string to find</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="occurrenceCount">The occurrence of the token sought</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>Returns the starting index of the nth occurrence of a string. 
            Returns -1 if nth occurrence does not exist.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfNextTokens(System.String,System.Char[],System.Int32,System.Boolean)">
      <summary>
             Finds the index of the "n" occurrence any one of the chars in the token array within a string
            </summary>
      <param name="inString">The string to process.</param>
      <param name="tokens">The token characters sought</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>Returns the starting index of the nth occurrence of a character.
             Returns -1 if nth occurrence does not exist.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfPreviousToken(System.String,System.Char,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Processing from RIGHT to LEFT, finds the index of the "n" occurrence of a character (a token) within a string
            </summary>
      <param name="inString">The string to process.</param>
      <param name="token">The token character sought</param>
      <param name="startIndex">Default of zero (0) begins testing end of inString, otherwise
            The index from with to begin processing inString from RIGHT to LEFT</param>
      <param name="occurrenceCount">The occurrence sought</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>Returns the starting index of the nth occurrence of a character.
            Returns -1 if nth occurrence does not exist.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndexOfPreviousToken(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Processing from RIGHT to LEFT, finds the index of the "n"occurrence of one string (a token) within a string
            </summary>
      <param name="inString">The string to process.</param>
      <param name="token">The token string sought</param>
      <param name="startIndex">Default of zero (0) begins testing end of inString, otherwise
            The index from with to begin processing inString from RIGHT to LEFT</param>
      <param name="occurrenceCount">The occurrence sought</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>Returns the starting index of the nth occurrence of a string.
            Returns -1 if nth occurrence does not exist.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndicesOfToken(System.String,System.Char,System.Int32,System.Boolean)">
      <summary>
            Returns an array indices where the token char was found.  Null for no tokens found.
            </summary>
      <param name="inString">The string to process</param>
      <param name="token">The token string sought</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndicesOfToken(System.String,System.Char,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndicesOfToken(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Returns an array of indices where the token string was found
            </summary>
      <param name="inString">The string to process</param>
      <param name="token">The token string sought</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>null for no tokens found</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.IndicesOfTokens(System.String,System.Char[],System.Int32,System.Boolean)">
      <summary>
            Returns an array of the indices where the token chars were found.  Null for no tokens found.
            </summary>
      <param name="inString">The string to process</param>
      <param name="tokens">The char array of the tokens</param>
      <param name="startIndex">The index from which to begin searching inString</param>
      <param name="matchCase">Set to FALSE for case insensitive search</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.IndicesOfTokens(System.String,System.Char[],System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.ParseCheck(System.String[],System.TypeCode[],System.Object[]@)">
      <summary>
            Parses strings and validates they match expected type codes.
            </summary>
      <param name="parsedStrings">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parsedStrings</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.ParseCheck(System.String[],System.TypeCode[],System.Object[]@)</parameter>
          </include>
        </markup>
      </param>
      <param name="expectedTypeCodes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expectedTypeCodes</parameter>
            <parameter>M:Gemstone.IO.Parsing.StringParser.ParseCheck(System.String[],System.TypeCode[],System.Object[]@)</parameter>
          </include>
        </markup>
      </param>
      <param name="values">the returned values from the try parse.</param>
      <returns>TRUE if all values parse successfully.</returns>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.ParseLine(System.String,System.Char[],System.Char[],System.Int32,System.Boolean)">
      <summary>
            Parses a line based on a collection of quote and delimiter characters,
            </summary>
      <param name="inString">The string to parse</param>
      <param name="quoteChars">
                          An array of characters to be used as the framing within fields or the "quote" characters.  Quotes must matched. 
                          Set to null to disable (split line at delimiter regardless of quotes).</param>
      <param name="delimiters">An array of characters to be used as delimiter characters.  These characters have equal weight in breaking up the line.</param>
      <param name="startIndex">The index in the line from which to start parsing.</param>
      <param name="removeResultQuotes">Set to TRUE to unwrap quotes in returned array vis-a-vis Excel.</param>
      <returns>An array of the parsed strings</returns>
      <remarks>The string.split method is about 12 times faster.</remarks>
    </member>
    <member name="M:Gemstone.IO.Parsing.StringParser.ParseStandardCSV(System.String,System.Int32,System.Boolean)">
      <summary>
            Parses a line based on a comma as the separator.  Commas wrapped in matched double quotes are not separators.  
            Matched double quotes are normally removed prior to field return.  Fields are NOT trimmed of white spaces prior to return.
            </summary>
      <param name="inString">The string to parse.</param>
      <param name="startIndex">The index in the line from which to start parsing.</param>
      <param name="removeResultQuotes">Set to TRUE to unwrap quotes in returned array vis-a-vis Excel.</param>
      <returns>An array of the parsed strings (the fields within the line)</returns>
      <remarks>The string.split method is about 4 times faster.</remarks>
    </member>
    <member name="T:Gemstone.IO.StreamExtensions.StreamExtensions">
      <summary>
            Defines extension functions related to <see cref="T:System.IO.Stream" /> manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Byte[])">
      <summary>
            Writes the contents of a stream to the provided stream.
            </summary>
      <param name="destination">the destination stream.</param>
      <param name="source">the source stream</param>
      <param name="length">the number of bytes to copy. If the source is not long enough,
            and end of stream exception will be thrown.</param>
      <param name="buffer">A buffer to use to copy the data from one stream to another. 
            This keeps the function from always allocating a new buffer for the copy</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Read7BitUInt32(System.IO.Stream)">
      <summary>
            Reads the 7-bit encoded value from the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadAll(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads all of the provided bytes. Will not return prematurely, 
            but continue to execute a <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> command until the entire
            <paramref name="length" /> has been read.
            </summary>
      <param name="stream">The stream to read from</param>
      <param name="buffer">The buffer to write to</param>
      <param name="position">the start position in the <paramref name="buffer" /></param>
      <param name="length">the number of bytes to read</param>
      <exception cref="T:System.IO.EndOfStreamException">occurs if the end of the stream has been reached.</exception>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadBoolean(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadBytes(System.IO.Stream)">
      <summary>
            Reads a byte array from a <see cref="T:System.IO.Stream" />. 
            The number of bytes should be prefixed in the stream.
            </summary>
      <param name="stream">the stream to read from</param>
      <returns>A new array containing the bytes.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
      <summary>
            Reads a byte array from a <see cref="T:System.IO.Stream" />. 
            The number of bytes should be prefixed in the stream.
            </summary>
      <param name="stream">the stream to read from</param>
      <param name="length">gets the number of bytes to read.</param>
      <returns>A new array containing the bytes.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadChar(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadDateTime(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadDecimal(System.IO.Stream)">
      <summary>
            Reads a decimal from the stream in Little Endian bytes.
            </summary>
      <param name="stream">the stream to read the decimal from.</param>
      <returns>the decimal value</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadDouble(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadGuid(System.IO.Stream)">
      <summary>
            Reads a Guid from the stream in Little Endian bytes.
            </summary>
      <param name="stream">the stream to read the guid from.</param>
      <returns>the guid value</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadInt16(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadInt32(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadInt32Collection(System.IO.Stream)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Integers read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadInt64(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadNextByte(System.IO.Stream)">
      <summary>
            Read a byte from the stream. 
            Will throw an exception if the end of the stream has been reached.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadNullableString(System.IO.Stream)">
      <summary>
            Reads a string from a <see cref="T:System.IO.Stream" /> that was encoded in UTF8. 
            Value can be null and is prefixed with a boolean.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadObject(System.IO.Stream)">
      <summary>
            Reads an object from a stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Decoded object.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadSByte(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadSingle(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadStream(System.IO.Stream)">
      <summary>
            Reads entire <see cref="T:System.IO.Stream" /> contents, and returns <see cref="T:System.Byte" /> array of data.
            </summary>
      <param name="source">The <see cref="T:System.IO.Stream" /> to be converted to <see cref="T:System.Byte" /> array.</param>
      <returns>An array of <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadString(System.IO.Stream)">
      <summary>
            Reads a string from a <see cref="T:System.IO.Stream" /> that was encoded in UTF8.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadStringCollection(System.IO.Stream)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Strings read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadUInt16(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadUInt32(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.ReadUInt64(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Boolean)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Byte)">
      <summary>
            Writes the supplied <paramref name="value" /> to
            <pararef name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
      <summary>
            Writes the entire buffer to the <paramref name="stream" /></summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Char)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.DateTime)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Decimal)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Double)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Guid)">
      <summary>
            Writes a guid in little endian bytes to the stream
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int16)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int32)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int64)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.SByte)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Single)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.String)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt16)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt32)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt64)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.WriteCollection(System.IO.Stream,System.Collections.Generic.ICollection{System.Int32})">
      <summary>
            Writes the supplied Collection to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="collection">Collection to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.WriteCollection(System.IO.Stream,System.Collections.Generic.ICollection{System.String})">
      <summary>
            Writes the supplied Collection to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="collection">Collection to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.WriteNullable(System.IO.Stream,System.String)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> 
            in UTF8 encoding with a prefix if the value is null
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.WriteObject(System.IO.Stream,System.Object)">
      <summary>
            Encodes an object on a stream.
            </summary>
      <param name="stream">Destination stream.</param>
      <param name="value">Object to encode.</param>
    </member>
    <member name="M:Gemstone.IO.StreamExtensions.StreamExtensions.WriteWithLength(System.IO.Stream,System.Byte[])">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> along with prefixing the length 
            so it can be properly read as a unit.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="T:Gemstone.JArrayExtensions.JArrayExtensions">
      <summary>
            Defines extension methods for JArray.
            </summary>
    </member>
    <member name="M:Gemstone.JArrayExtensions.JArrayExtensions.MergeByKey(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String)">
      <summary>
            Rebuilds original array so that items from originalArray are replaced by any same‑key items in the override array
            </summary>
      <param name="originalArray">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>originalArray</parameter>
            <parameter>M:Gemstone.JArrayExtensions.JArrayExtensions.MergeByKey(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="overrideArray">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>overrideArray</parameter>
            <parameter>M:Gemstone.JArrayExtensions.JArrayExtensions.MergeByKey(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="uniqueKeyField">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>uniqueKeyField</parameter>
            <parameter>M:Gemstone.JArrayExtensions.JArrayExtensions.MergeByKey(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.JArrayExtensions.JArrayExtensions.MergeByKey(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.Net.Http.URLHelper">
      <summary>
            Defines helper functions for handling URLs.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Http.URLHelper.IsValid(System.String)">
      <summary>
            Determines if the string contains a valid URL.
            </summary>
      <param name="url">The string to check for a valid URL.</param>
      <returns>True if the URL is valid; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.Net.Http.URLHelper.NavigateInDefaultBrowser(System.String)">
      <summary>
            Opens the user's default browser to the given URL.
            </summary>
      <param name="url">The URL to navigate to in the user's browser.</param>
      <exception cref="T:System.Security.SecurityException">The input string is not a valid URL.</exception>
      <exception cref="T:System.NotSupportedException">Navigation attempted on a platform other than Windows, Linux, or OSX.</exception>
    </member>
    <member name="T:Gemstone.Net.Security.CertificateGenerator">
      <summary>
            The CertificateGenerator searches certificate stores for existing certificates and creates
            self-signed certificates if no matching certificate exists in any accessible store.
            It then generates a certificate file at the specified certificate path.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificateGenerator.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Net.Security.CertificateGenerator" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificateGenerator.CertificatePath">
      <summary>
            Gets or sets the path to the certificate file
            that is generated by this certificate generator.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificateGenerator.DebugLog">
      <summary>
            Gets a list of detailed log messages
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificateGenerator.ExportCertificateWithPrivateKey(System.String,System.Security.SecureString)">
      <summary>
            Exports the private key of the certificate that is currently in use to the given path,
            encrypting the file with the given password.
            </summary>
      <param name="exportPath">The path to which the certificate will be exported.</param>
      <param name="password">The password used to encrypt the certificate file.</param>
    </member>
    <member name="M:Gemstone.Net.Security.CertificateGenerator.GenerateCertificate">
      <summary>
            Generates the certificate.
            </summary>
      <returns>The certificate that was generated by this certificate generator.</returns>
    </member>
    <member name="M:Gemstone.Net.Security.CertificateGenerator.ImportCertificateWithPrivateKey(System.String,System.Security.SecureString)">
      <summary>
            Imports the given certificate into the current user store and then exports the public key.
            </summary>
      <param name="importPath">The file with the certificate and private key to be imported.</param>
      <param name="password">The password used to encrypt the certificate file with the private key.</param>
    </member>
    <member name="P:Gemstone.Net.Security.CertificateGenerator.Issuer">
      <summary>
            Gets or sets the name of the entity issuing the certificate.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificateGenerator.SubjectNames">
      <summary>
            Gets or sets the subject names (common names)
            of the entity that this certificate identifies.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificateGenerator.ValidYears">
      <summary>
            Gets or sets the number of years self-signed generated
            certificates should be valid.
            </summary>
      <remarks>
            Defaults to 1.
            </remarks>
    </member>
    <member name="T:Gemstone.Net.Security.CertificatePolicy">
      <summary>
            Represents a set of flags to be checked when validating remote certificates.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicy.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Net.Security.CertificatePolicy" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificatePolicy.ValidChainFlags">
      <summary>
            Gets or sets the set of valid chain flags used when
            validating remote certificates using this policy.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificatePolicy.ValidPolicyErrors">
      <summary>
            Gets or sets the set of valid policy errors used when
            validating remote certificates using this policy.
            </summary>
    </member>
    <member name="T:Gemstone.Net.Security.CertificatePolicyChecker">
      <summary>
            Certificate checker that validates remote certificates based
            on certificate policies associated with each certificate.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Net.Security.CertificatePolicyChecker" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.CertificatePolicyChecker.DefaultCertificatePolicy">
      <summary>
            Gets the default certificate policy used to validate
            certificates that do not have their own certificate policy.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.Distrust(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Removes the given certificate from the list of trusted certificates.
            </summary>
      <param name="certificate">The certificate to be distrusted.</param>
      <returns>
        <c>true</c> if certificate was removed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.DistrustAll">
      <summary>
            Removes all certificates from the list of trusted certificates.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.GetTrustedCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Searches the list of trusted certificates for a certificate that matches the given remote certificate. 
            </summary>
      <param name="remoteCertificate">Remote certificate to search for.</param>
      <returns>Trusted X509 certificate, if found; otherwise, <c>null</c>.</returns>
    </member>
    <member name="P:Gemstone.Net.Security.CertificatePolicyChecker.ReasonForFailure">
      <summary>
            Gets the reason why the remote certificate validation
            failed, or null if certificate validation did not fail.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.Trust(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Trusts the given certificate, using the default policy for validation.
            </summary>
      <param name="certificate">The certificate to be trusted.</param>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.Trust(System.Security.Cryptography.X509Certificates.X509Certificate,Gemstone.Net.Security.CertificatePolicy)">
      <summary>
            Trusts the given certificate, using the given policy for validation.
            </summary>
      <param name="certificate">The certificate to be trusted.</param>
      <param name="policy">The policy by which to evaluate the certificate.</param>
    </member>
    <member name="M:Gemstone.Net.Security.CertificatePolicyChecker.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
      <summary>
            Verifies the remote certificate used for authentication.
            </summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
      <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
      <param name="errors">One or more errors associated with the remote certificate.</param>
      <returns>A flag that determines whether the specified certificate is accepted for authentication.</returns>
    </member>
    <member name="T:Gemstone.Net.Security.ICertificateChecker">
      <summary>
            Defines the interface for a generic X.509 certificate checker.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.ICertificateChecker.ReasonForFailure">
      <summary>
            Gets the reason why the remote certificate validation
            failed, or null if certificate validation did not fail.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.ICertificateChecker.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
      <summary>
            Verifies the remote certificate used for authentication.
            </summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
      <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
      <param name="errors">One or more errors associated with the remote certificate.</param>
      <returns>A flag that determines whether the specified certificate is accepted for authentication.</returns>
    </member>
    <member name="T:Gemstone.Net.Security.SimpleCertificateChecker">
      <summary>
            Simple implementation of <see cref="T:Gemstone.Net.Security.ICertificateChecker" />.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.SimpleCertificateChecker.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Net.Security.SimpleCertificateChecker" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.SimpleCertificateChecker.ReasonForFailure">
      <summary>
            Gets the reason why the remote certificate validation
            failed, or null if certificate validation did not fail.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.SimpleCertificateChecker.TrustedCertificates">
      <summary>
            Gets the list of certificates on the system which are
            considered trusted when validating remote certificates.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.SimpleCertificateChecker.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
      <summary>
            Verifies the remote certificate used for authentication.
            </summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
      <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
      <param name="errors">One or more errors associated with the remote certificate.</param>
      <returns>A flag that determines whether the specified certificate is accepted for authentication.</returns>
    </member>
    <member name="M:Gemstone.Net.Security.SimpleCertificateChecker.ValidateRemoteCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Validates the given remote certificate to determine if the host is trusted.
            </summary>
      <param name="remoteCertificate">Certificate of the remote host.</param>
      <returns>True if the remote certificate is trusted; false otherwise.</returns>
    </member>
    <member name="P:Gemstone.Net.Security.SimpleCertificateChecker.ValidChainFlags">
      <summary>
            Gets or sets the set of invalid chain flags.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.SimpleCertificateChecker.ValidPolicyErrors">
      <summary>
            Gets or sets the set of invalid policy errors.
            </summary>
    </member>
    <member name="T:Gemstone.Net.Security.SimplePolicyChecker">
      <summary>
            Simple implementation of <see cref="T:Gemstone.Net.Security.ICertificateChecker" />.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.SimplePolicyChecker.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Net.Security.SimplePolicyChecker" /> class.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.SimplePolicyChecker.ReasonForFailure">
      <summary>
            Gets the reason why the remote certificate validation
            failed, or null if certificate validation did not fail.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Security.SimplePolicyChecker.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
      <summary>
            Verifies the remote certificate used for authentication.
            </summary>
      <param name="sender">An object that contains state information for this validation.</param>
      <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
      <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
      <param name="errors">One or more errors associated with the remote certificate.</param>
      <returns>A flag that determines whether the specified certificate is accepted for authentication.</returns>
    </member>
    <member name="P:Gemstone.Net.Security.SimplePolicyChecker.ValidChainFlags">
      <summary>
            Gets or sets the set of invalid chain flags.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Security.SimplePolicyChecker.ValidPolicyErrors">
      <summary>
            Gets or sets the set of invalid policy errors.
            </summary>
    </member>
    <member name="T:Gemstone.Net.Smtp.Mail">
      <summary>
             A wrapper class to the <see cref="T:System.Net.Mail.MailMessage" /> class that simplifies sending mail messages.
             </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Net.Smtp.Mail" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Net.Smtp.Mail" /> class.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Net.Smtp.Mail" /> class.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Net.Smtp.Mail" /> class.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.Attachments">
      <summary>
            Gets or sets the comma-separated or semicolon-separated list of file names to be attached to the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.BccRecipients">
      <summary>
            Gets or sets the comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message blank carbon copy (BCC) recipients.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.Body">
      <summary>
            Gets or sets the body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.CcRecipients">
      <summary>
            Gets or sets the comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message carbon copy (CC) recipients.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.Client">
      <summary>
            Gets the <see cref="T:System.Net.Mail.SmtpClient" /> object used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
    </member>
    <member name="F:Gemstone.Net.Smtp.Mail.DefaultSmtpServer">
      <summary>
            Default <see cref="P:Gemstone.Net.Smtp.Mail.SmtpServer" /> to be used if one is not specified.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.Net.Smtp.Mail" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.Net.Smtp.Mail" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.EnableSSL">
      <summary>
            Gets or sets the flag that determines whether
            to use SSL when communicating with the SMTP server.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.Net.Smtp.Mail" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.From">
      <summary>
            Gets or sets the e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.IsBodyHtml">
      <summary>
            Gets or sets a boolean value that indicating whether the <see cref="T:Gemstone.Net.Smtp.Mail" /> message <see cref="P:Gemstone.Net.Smtp.Mail.Body" /> is to be formatted as HTML.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.Password">
      <summary>
            Gets or sets the password used to authenticate to the SMTP server.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.SecurePassword">
      <summary>
            Gets or sets the password used to authenticate to the SMTP server.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send">
      <summary>
            Send the <see cref="T:Gemstone.Net.Smtp.Mail" /> message with <see cref="P:Gemstone.Net.Smtp.Mail.Attachments" /> to the <see cref="P:Gemstone.Net.Smtp.Mail.ToRecipients" />, 
            <see cref="P:Gemstone.Net.Smtp.Mail.CcRecipients" /> and <see cref="P:Gemstone.Net.Smtp.Mail.BccRecipients" /> using the specified <see cref="P:Gemstone.Net.Smtp.Mail.SmtpServer" />.
            </summary>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
      <summary>
            Sends a <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Sends a <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="attachments">A comma-separated or semicolon-separated list of file names to be attached to the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Security.SecureString)">
      <summary>
            Sends a secure <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="username">The username of the account used to authenticate to the SMTP server.</param>
      <param name="password">The password of the account used to authenticate to the SMTP server.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Security.SecureString,System.Boolean)">
      <summary>
            Sends a secure <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="username">The username of the account used to authenticate to the SMTP server.</param>
      <param name="password">The password of the account used to authenticate to the SMTP server.</param>
      <param name="enableSSL">The flag that determines whether to use SSL when communicating with the SMTP server.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
      <summary>
            Sends a secure <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="username">The username of the account used to authenticate to the SMTP server.</param>
      <param name="password">The password of the account used to authenticate to the SMTP server.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Sends a secure <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="username">The username of the account used to authenticate to the SMTP server.</param>
      <param name="password">The password of the account used to authenticate to the SMTP server.</param>
      <param name="enableSSL">The flag that determines whether to use SSL when communicating with the SMTP server.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
      <summary>
            Sends a <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="ccRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message carbon copy (CC) recipients.</param>
      <param name="bccRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message blank carbon copy (BCC) recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
    </member>
    <member name="M:Gemstone.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Sends a <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <param name="from">The e-mail address of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message sender.</param>
      <param name="toRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.</param>
      <param name="ccRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message carbon copy (CC) recipients.</param>
      <param name="bccRecipients">A comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message blank carbon copy (BCC) recipients.</param>
      <param name="subject">The subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="body">The body of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="isBodyHtml">true if the <see cref="T:Gemstone.Net.Smtp.Mail" /> message body is to be formated as HTML; otherwise false.</param>
      <param name="attachments">A comma-separated or semicolon-separated list of file names to be attached to the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
      <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.</param>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.SmtpServer">
      <summary>
            Gets or sets the name or IP address of the SMTP server to be used for sending the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.Subject">
      <summary>
            Gets or sets the subject of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message.
            </summary>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.ToRecipients">
      <summary>
            Gets or sets the comma-separated or semicolon-separated e-mail address list of the <see cref="T:Gemstone.Net.Smtp.Mail" /> message recipients.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
    </member>
    <member name="P:Gemstone.Net.Smtp.Mail.UserName">
      <summary>
            Gets or sets the username used to authenticate to the SMTP server.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AppDomainTypeLookup">
      <summary>
            Defines a lookup class that searches all assemblies in the current <see cref="T:System.AppDomain" /> for all <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AppDomainTypeLookup.#ctor">
      <summary>
            Creates a AppDomainTypeLookup
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AppDomainTypeLookup.FindTypes">
      <summary>
            Searches all assemblies of this <see cref="T:System.AppDomain" /> for all <see cref="T:System.Type" />s.
            </summary>
      <returns>List of found types.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AppDomainTypeLookup.HasChanged">
      <summary>
            Gets flag that determines if there is a possibility that a new assembly has been loaded and new types are available.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyInfo">
      <summary>
            Represents a common information provider for an assembly.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> class.</summary>
      <param name="assemblyInstance">An <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> object.</param>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Assembly">
      <summary>
            Gets the underlying <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> being represented by this <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.BuildDate">
      <summary>
            Gets the date and time when the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> was built.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CallingAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the assembly that invoked the currently executing method.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CLSCompliant">
      <summary>
            Gets a boolean value indicating whether the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is CLS-compliant.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ComCompatibleVersion">
      <summary>
            Gets the string representing the assembly version used to indicate to a COM client that all classes
            in the current version of the assembly are compatible with classes in an earlier version of the assembly.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Company">
      <summary>
            Gets the company name information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ComVisible">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is exposed to COM.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Configuration">
      <summary>
            Gets the configuration information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Copyright">
      <summary>
            Gets the copyright information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CultureName">
      <summary>
            Gets the culture name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Debuggable">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> was built in debug mode.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.DelaySign">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> has been built as delay-signed.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Description">
      <summary>
            Gets the description information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.EntryAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the process executable in the default application domain.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ExecutingAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the assembly that contains the code that is currently executing.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.FindType(System.String)">
      <summary>
            Finds the specified <paramref name="typeName" /> searching through all loaded assemblies.
            </summary>
      <param name="typeName">Fully qualified type name.</param>
      <returns>The <see cref="T:System.Type" /> found; otherwise <c>null</c>.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.FullName">
      <summary>
            Gets the display name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetAttributes">
      <summary>
            Gets a collection of assembly attributes exposed by the assembly.
            </summary>
      <returns>A System.Specialized.KeyValueCollection of assembly attributes.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetCustomAttribute(System.Type)">
      <summary>
            Gets the specified assembly attribute if it is exposed by the assembly.
            </summary>
      <param name="attributeType">Type of the attribute to get.</param>
      <returns>The requested assembly attribute if it exists; otherwise null.</returns>
      <remarks>
            This method always returns <c>null</c> under Mono deployments.
            </remarks>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetEmbeddedResource(System.String)">
      <summary>
            Gets the specified embedded resource from the assembly.
            </summary>
      <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
      <returns>The embedded resource.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Guid">
      <summary>
            Gets the GUID that is used as an ID if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is exposed to COM.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ImageRuntimeVersion">
      <summary>
            Gets the string representing the version of the common language runtime (CLR) saved in the file
            containing the manifest.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.InformationalVersion">
      <summary>
            Gets the version information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.KeyFile">
      <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.LoadAssemblyFromResource(System.String)">
      <summary>
            Loads the specified assembly that is embedded as a resource in the assembly.
            </summary>
      <param name="assemblyName">Name of the assembly to load.</param>
      <remarks>Note that this function cannot be used to load Gemstone.Core itself, since this is where function resides.</remarks>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Location">
      <summary>
            Gets the path or UNC location of the loaded file that contains the manifest.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Name">
      <summary>
            Gets the simple, unencrypted name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Product">
      <summary>
            Gets the product name information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.RootNamespace">
      <summary>
            Gets the root namespace of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.SatelliteContractVersion">
      <summary>
            Gets the assembly version used to instruct the System.Resources.ResourceManager to ask for a particular
            version of a satellite assembly to simplify updates of the main assembly of an application.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Title">
      <summary>
            Gets the title information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Trademark">
      <summary>
            Gets the trademark information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Version">
      <summary>
            Gets the major, minor, revision, and build numbers of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyLoadedVersionNumber">
      <summary>
            Maintains a version number that increments every time an <see cref="E:System.AppDomain.AssemblyLoad" /> event is raised.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyLoadedVersionNumber.VersionNumber">
      <summary>
            The number of times that the AppDomains's assembly could have changed; initial value starts at 1.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions">
      <summary>
            Defines extension functions related to Assemblies.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.BuildDate(System.Reflection.Assembly)">
      <summary>
            Gets the date and time when the assembly was last built.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The date and time when the assembly was last built.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.CLSCompliant(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating whether the indicated program element is CLS-compliant.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the program element is CLS-compliant; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ComCompatibleVersion(System.Reflection.Assembly)">
      <summary>
            Gets the string representing the assembly version used to indicate to a COM client that all classes in the
            current version of the assembly are compatible with classes in an earlier version of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The string representing the assembly version in MajorVersion.MinorVersion.RevisionNumber.BuildNumber format.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Company(System.Reflection.Assembly)">
      <summary>
            Gets the company name information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The company name information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ComVisible(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the assembly is exposed to COM.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly is exposed to COM; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Configuration(System.Reflection.Assembly)">
      <summary>
            Gets the configuration information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The configuration information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Copyright(System.Reflection.Assembly)">
      <summary>
            Gets the copyright information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The copyright information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.CultureName(System.Reflection.Assembly)">
      <summary>
            Gets the culture name of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The culture name of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Debuggable(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the <see cref="T:System.Reflection.Assembly" /> was built in debug mode.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly was built in debug mode; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.DelaySign(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the assembly has been built as delay-signed.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly has been built as delay-signed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Description(System.Reflection.Assembly)">
      <summary>
            Gets the description information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The description information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.GetAttributes(System.Reflection.Assembly)">
      <summary>
            Gets a name/value collection of assembly attributes exposed by the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>A NameValueCollection of assembly attributes.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.GetEmbeddedResource(System.Reflection.Assembly,System.String)">
      <summary>
            Gets the specified embedded resource from the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
      <returns>The embedded resource.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Guid(System.Reflection.Assembly)">
      <summary>
            Gets the assembly GUID that is used as an ID if the assembly is exposed to COM.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The assembly GUID that is used as an ID if the assembly is exposed to COM.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.InformationalVersion(System.Reflection.Assembly)">
      <summary>
            Gets the version information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The version information of the assembly</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.KeyFile(System.Reflection.Assembly)">
      <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Product(System.Reflection.Assembly)">
      <summary>
            Gets the product name information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The product name information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.RootNamespace(System.Reflection.Assembly)">
      <summary>
            Gets the root namespace of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The root namespace of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.SatelliteContractVersion(System.Reflection.Assembly)">
      <summary>
            Gets the assembly version used to instruct the <see cref="T:System.Resources.ResourceManager" /> to ask for
            a particular version of a satellite assembly to simplify updates of the main assembly of an application.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The satellite contract version of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ShortName(System.Reflection.Assembly)">
      <summary>
            Returns only assembly name and version from full assembly name.
            </summary>
      <param name="instance">An <see cref="T:System.Reflection.Assembly" /> to get the short name of.</param>
      <returns>The assembly name and version from the full assembly name.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Title(System.Reflection.Assembly)">
      <summary>
            Gets the title information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The title information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Trademark(System.Reflection.Assembly)">
      <summary>
            Gets the trademark information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The trademark information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.TryLoadAllReferences(System.Reflection.Assembly)">
      <summary>
            Recursively attempts to load all assemblies referenced from the given assembly.
            </summary>
      <param name="instance">The assembly whose references are to be loaded.</param>
      <returns>
        <c>true</c> if the references were successfully loaded; <c>false</c> otherwise.</returns>
      <remarks>
            If an object is created from a type that is loaded from an assembly, and if that
            assembly's references fail to load during instantiation, an exception may be thrown
            from both the constructor and the finalizer of the object that was instantiated.
            This method allows us to ensure that all referenced assemblies can be loaded
            before attempting to instantiate a type from that assembly.
            </remarks>
    </member>
    <member name="T:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions">
      <summary>
            Defines extensions methods related to <see cref="T:System.Reflection.MemberInfo" /> objects and derived types (e.g., <see cref="T:System.Reflection.FieldInfo" />,
            <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, etc.).
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.AttributeExists``2(``0)">
      <summary>
            Returns a boolean flag that determines if the specified <typeparamref name="TAttribute" /> exists.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if attribute exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.GetFriendlyClassName``1(``0)">
      <summary>
            Gets the friendly class name of the provided <see cref="T:System.Reflection.MemberInfo" /> object, trimming generic parameters.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to get friendly class name.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Type" /> of <see cref="T:System.Reflection.MemberInfo" /> instance to retrieve.</typeparam>
      <returns>Friendly class name of the provided member, or <see cref="F:System.String.Empty" /> if <paramref name="member" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``1(``0,System.String,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeName">The name of the type of the <see cref="T:System.Attribute" /> to look for.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
      <remarks>
            If more than of the same type of attribute exists on the member, only the first one is returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``1(``0,System.Type,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeType">The actual type of the <see cref="T:System.Attribute" /> to look for.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
      <remarks>
            If more than of the same type of attribute exists on the member, only the first one is returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``2(``0,``1@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
      <remarks>
            If more than of the same type of attribute exists on the member, only the first one is returned.
            </remarks>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``1(``0,System.String,System.Attribute[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeName">The name of the type of the <see cref="T:System.Attribute" /> objects to look for.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``1(``0,System.Type,System.Attribute[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeType">The actual type of the <see cref="T:System.Attribute" /> objects to look for.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``2(``0,``1[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions">
      <summary>
            Defines extensions methods related to extension functions for <see cref="T:System.Reflection.MethodBase" /> instances.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions.GetFriendlyMethodName(System.Reflection.MethodBase)">
      <summary>
            Gets the friendly method name of the provided type, trimming generic parameters.
            </summary>
      <param name="method">Type to get friendly method name for.</param>
      <returns>Friendly method name of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="method" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions.GetFriendlyMethodNameWithClass(System.Reflection.MethodBase)">
      <summary>
            Gets the friendly method name with class of the provided type, trimming generic parameters.
            </summary>
      <param name="method">Type to get friendly method name with class for.</param>
      <returns>Friendly method name with class of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="method" /> is <c>null</c>.</returns>
    </member>
    <member name="T:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions">
      <summary>
            Defines extensions methods related to <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
      <remarks>
            Many of these functions help generate compiled IL code that can execute a method of a class.
            </remarks>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``1(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``2(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``3(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``1(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``2(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``3(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``4(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the forth parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="T:Gemstone.Scheduling.DateTimePart">
      <summary>
            Indicates the date/time element that a <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents.
            </summary>
      <remarks>This enumeration specifically corresponds to the UNIX crontab date/time elements.</remarks>
    </member>
    <member name="F:Gemstone.Scheduling.DateTimePart.Minute">
      <summary>
        <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents minutes. Legal values are 0 through 59, or 60 which maps to 0.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.DateTimePart.Hour">
      <summary>
        <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents hours. Legal values are 0 through 23, or 24 which maps to 0.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.DateTimePart.Day">
      <summary>
        <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents day of month. Legal values are 1 through 31.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.DateTimePart.Month">
      <summary>
        <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents months. Legal values are 1 through 12.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.DateTimePart.DayOfWeek">
      <summary>
        <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents day of week. Legal values are 0 through 6, or 7 which maps to 0. Sunday is 0 and Saturday is 6.
            </summary>
    </member>
    <member name="T:Gemstone.Scheduling.Schedule">
      <summary>
            Represents a schedule defined using UNIX crontab syntax.
            </summary>
      <remarks>
        <para>
            Operators:
            </para>
        <para>
            There are several ways of specifying multiple date/time values in a field:
            <list type="bullet"><item><description>
                    The comma (',') operator specifies a list of values, for example: "1,3,4,7,8"
                </description></item><item><description>
                    The dash ('-') operator specifies a range of values, for example: "1-6",
                    which is equivalent to "1,2,3,4,5,6"
                </description></item><item><description>
                    The asterisk ('*') operator specifies all possible values for a field.
                    For example, an asterisk in the hour time field would be equivalent to
                    'every hour' (subject to matching other specified fields).
                </description></item><item><description>
                    The slash ('/') operator (called "step"), which can be used to skip a given
                    number of values. For example, "*/3" in the hour time field is equivalent
                    to "0,3,6,9,12,15,18,21". So "*" specifies 'every hour' but the "*/3" means
                    only those hours divisible by 3.
                </description></item></list></para>
        <para>
            Fields:
            </para>
        <para>
          <code>
                +---------------- minute (0 - 59)
                |  +------------- hour (0 - 23)
                |  |  +---------- day of month (1 - 31)
                |  |  |  +------- month (1 - 12)
                |  |  |  |  +---- day of week (0 - 7) (Sunday=0 or 7)
                |  |  |  |  |
                *  *  *  *  *
            </code>
        </para>
        <para>
            Each of the patterns from the first five fields may be either * (an asterisk), which matches all legal values,
            or a list of elements separated by commas. 
            </para>
        <para>
            See <a href="http://en.wikipedia.org/wiki/Cron" target="_blank">http://en.wikipedia.org/wiki/Cron</a> for more information.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Scheduling.Schedule" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Scheduling.Schedule" /> class.
            </summary>
      <param name="name">Name of the schedule.</param>
      <param name="rule">Rule formated in UNIX crontab syntax.</param>
      <param name="useLocalTime">Flag that determines whether to use local time for schedule.</param>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.DayPart">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePart" /> of the <see cref="T:Gemstone.Scheduling.Schedule" /> that represents day of month <see cref="T:Gemstone.Scheduling.DateTimePart" />.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.DaysOfWeekPart">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePart" /> of the <see cref="T:Gemstone.Scheduling.Schedule" /> that represents day of week <see cref="T:Gemstone.Scheduling.DateTimePart" />.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.Description">
      <summary>
            Gets a description of the <see cref="P:Gemstone.Scheduling.Schedule.Rule" />.
            </summary>
      <remarks>
            A default description is created automatically when the <see cref="P:Gemstone.Scheduling.Schedule.Rule" /> is set.
            </remarks>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:Gemstone.Scheduling.Schedule" /> is equal to the current <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
      <param name="obj">The <see cref="T:Gemstone.Scheduling.Schedule" /> to compare with the current <see cref="T:Gemstone.Scheduling.Schedule" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Gemstone.Scheduling.Schedule" /> is equal to the current <see cref="T:Gemstone.Scheduling.Schedule" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.GetHashCode">
      <summary>
            Gets a hash code for the <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
      <returns>An <see cref="T:System.Int32" /> based hash-code.</returns>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.HourPart">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePart" /> of the <see cref="T:Gemstone.Scheduling.Schedule" /> that represents hour <see cref="T:Gemstone.Scheduling.DateTimePart" />.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.IsDue">
      <summary>
            Checks whether the <see cref="T:Gemstone.Scheduling.Schedule" /> is due at the present system time.
            </summary>
      <returns>
        <c>true</c> if the <see cref="T:Gemstone.Scheduling.Schedule" /> is due at the present system time; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.LastDueAt">
      <summary>
            Gets the <see cref="T:System.DateTime" /> when the <see cref="T:Gemstone.Scheduling.Schedule" /> was last due.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.MinutePart">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePart" /> of the <see cref="T:Gemstone.Scheduling.Schedule" /> that represents minute <see cref="T:Gemstone.Scheduling.DateTimePart" />.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.MonthPart">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePart" /> of the <see cref="T:Gemstone.Scheduling.Schedule" /> that represents month <see cref="T:Gemstone.Scheduling.DateTimePart" />.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.Name">
      <summary>
            Gets or sets the name of the <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.NextTimeDue(System.DateTime)">
      <summary>
            Determines the nearest timestamp past the
            given timestamp that matches the schedule.
            </summary>
      <param name="targetDateTime">The target timestamp</param>
      <returns>The timestamp past the target that the schedule will next be due</returns>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.PreviousTimeDue(System.DateTime)">
      <summary>
            Determines the nearest timestamp older than
            the given timestamp that matches the schedule.
            </summary>
      <param name="targetDateTime">The target timestamp</param>
      <returns>The timestamp prior to the target that the schedule was previously due</returns>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.Rule">
      <summary>
            Gets or sets the rule of the <see cref="T:Gemstone.Scheduling.Schedule" /> defined in UNIX crontab syntax.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
      <exception cref="T:System.ArgumentException">The number of <see cref="T:Gemstone.Scheduling.SchedulePart" /> in the rule is not exactly 5.</exception>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.Status">
      <summary>
            Gets the current status of the <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.Schedule.ToString">
      <summary>
            Gets the string representation of <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
      <returns>String representation of <see cref="T:Gemstone.Scheduling.Schedule" />.</returns>
    </member>
    <member name="P:Gemstone.Scheduling.Schedule.UseLocalTime">
      <summary>
            Gets or sets a flag that determines whether the scheduler uses local time or UTC time for scheduling.
            </summary>
    </member>
    <member name="T:Gemstone.Scheduling.ScheduleManager">
      <summary>
             Monitors multiple <see cref="T:Gemstone.Scheduling.Schedule" /> at an interval of one minute to check if they are due.
             </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.AddSchedule(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Attempts to add a new <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
      <param name="scheduleName">Name of the new <see cref="T:Gemstone.Scheduling.Schedule" />.</param>
      <param name="scheduleRule">Rule of the new <see cref="T:Gemstone.Scheduling.Schedule" />.</param>
      <param name="useLocalTime">Flag that determines whether to use local time for schedule.</param>
      <param name="updateExisting">Flag that determines whether to update existing <see cref="T:Gemstone.Scheduling.Schedule" /> with the specified <paramref name="scheduleRule" />.</param>
      <returns>
        <c>true</c> if a new <see cref="T:Gemstone.Scheduling.Schedule" /> was added or an existing one was updated; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.CheckAllSchedules">
      <summary>
            Checks all of the <see cref="P:Gemstone.Scheduling.ScheduleManager.Schedules" /> to determine if they are due.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:Gemstone.Scheduling.ScheduleManager.Enabled">
      <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> object is currently enabled.
            </summary>
      <remarks>
        <see cref="P:Gemstone.Scheduling.ScheduleManager.Enabled" /> property is not be set by user-code directly.
            </remarks>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.FindSchedule(System.String)">
      <summary>
            Searches for the <see cref="T:Gemstone.Scheduling.Schedule" /> with the specified name.
            </summary>
      <param name="scheduleName">Name of the <see cref="T:Gemstone.Scheduling.Schedule" /> to be obtained.</param>
      <returns>
        <see cref="T:Gemstone.Scheduling.Schedule" /> object if a match is found; otherwise <c>null</c>.</returns>
    </member>
    <member name="P:Gemstone.Scheduling.ScheduleManager.IsRunning">
      <summary>
            Gets a boolean value that indicates whether the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> is running.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.ScheduleManager.Name">
      <summary>
            Gets or sets the name of the <see cref="T:Gemstone.Scheduling.ScheduleManager" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.OnScheduleDue(Gemstone.Scheduling.Schedule)">
      <summary>
            Raises the <see cref="E:Gemstone.Scheduling.ScheduleManager.ScheduleDue" /> event.
            </summary>
      <param name="schedule">
        <see cref="T:Gemstone.Scheduling.Schedule" /> to send to <see cref="E:Gemstone.Scheduling.ScheduleManager.ScheduleDue" /> event.</param>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.OnScheduleDueCheck(Gemstone.EventArgs{Gemstone.Scheduling.Schedule})">
      <summary>
            Raises the <see cref="E:Gemstone.Scheduling.ScheduleManager.ScheduleDueCheck" /> event.
            </summary>
      <param name="e">Event data.</param>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.OnStarted">
      <summary>
            Raises the <see cref="E:Gemstone.Scheduling.ScheduleManager.Started" /> event.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.OnStarting">
      <summary>
            Raises the <see cref="E:Gemstone.Scheduling.ScheduleManager.Starting" /> event.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.RemoveSchedule(System.String)">
      <summary>
            Attempts to remove a <see cref="T:Gemstone.Scheduling.Schedule" /> with the specified name if one exists.
            </summary>
      <param name="scheduleName">Name of the <see cref="T:Gemstone.Scheduling.Schedule" /> to be removed.</param>
      <returns>
        <c>true</c> if the <see cref="T:Gemstone.Scheduling.Schedule" /> was removed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="E:Gemstone.Scheduling.ScheduleManager.ScheduleDue">
      <summary>
            Occurs asynchronously when a <see cref="T:Gemstone.Scheduling.Schedule" /> is due according to the rule specified for it.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the <see cref="T:Gemstone.Scheduling.Schedule" /> that is due.
            </remarks>
    </member>
    <member name="E:Gemstone.Scheduling.ScheduleManager.ScheduleDueCheck">
      <summary>
            Occurs when the a particular <see cref="T:Gemstone.Scheduling.Schedule" /> is being checked to see if it is due.
            </summary>
      <remarks>
        <see cref="F:Gemstone.EventArgs`1.Argument" /> is the <see cref="T:Gemstone.Scheduling.Schedule" /> that is being checked to see if it is due.
            </remarks>
    </member>
    <member name="P:Gemstone.Scheduling.ScheduleManager.Schedules">
      <summary>
            Gets a list of all <see cref="T:Gemstone.Scheduling.Schedule" /> monitored by the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.Start">
      <summary>
            Starts the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> asynchronously if not running.
            </summary>
    </member>
    <member name="E:Gemstone.Scheduling.ScheduleManager.Started">
      <summary>
            Occurs when the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> has started at the top of the minute.
            </summary>
    </member>
    <member name="E:Gemstone.Scheduling.ScheduleManager.Starting">
      <summary>
            Occurs while the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> is waiting to start at the top of the minute.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.ScheduleManager.Status">
      <summary>
            Gets the descriptive status of the <see cref="T:Gemstone.Scheduling.ScheduleManager" />.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.ScheduleManager.Stop">
      <summary>
            Stops the <see cref="T:Gemstone.Scheduling.ScheduleManager" /> if running.
            </summary>
    </member>
    <member name="T:Gemstone.Scheduling.SchedulePart">
      <summary>
            Represents a part of the <see cref="T:Gemstone.Scheduling.Schedule" />.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.SchedulePart.#ctor(System.String,Gemstone.Scheduling.DateTimePart)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Scheduling.SchedulePart" /> class.
            </summary>
      <param name="valueText">The text that specifies the values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object.</param>
      <param name="dateTimePart">The <see cref="P:Gemstone.Scheduling.SchedulePart.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object represents.</param>
    </member>
    <member name="P:Gemstone.Scheduling.SchedulePart.DateTimePart">
      <summary>
            Gets the <see cref="P:Gemstone.Scheduling.SchedulePart.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object represents.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.SchedulePart.Description">
      <summary>
            Gets a meaningful description of the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Scheduling.SchedulePart.Matches(System.DateTime)">
      <summary>
            Determines if the <see cref="P:Gemstone.Scheduling.SchedulePart.Values" /> for the <see cref="P:Gemstone.Scheduling.SchedulePart.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> 
            object represents matches the specified <paramref name="dateTime" />.
            </summary>
      <param name="dateTime">The <see cref="T:System.DateTime" /> against which the <see cref="P:Gemstone.Scheduling.SchedulePart.Values" /> are to be matches.</param>
      <returns>
        <c>true</c> if one of the <see cref="P:Gemstone.Scheduling.SchedulePart.Values" /> matches the <paramref name="dateTime" />; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Scheduling.SchedulePart.Values">
      <summary>
            Gets the list of values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object specified using <see cref="P:Gemstone.Scheduling.SchedulePart.ValueText" />.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.SchedulePart.ValueText">
      <summary>
            Gets the text used to specify the values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object.
            </summary>
    </member>
    <member name="P:Gemstone.Scheduling.SchedulePart.ValueTextSyntax">
      <summary>
            Gets the <see cref="T:Gemstone.Scheduling.SchedulePartTextSyntax" /> used in the <see cref="P:Gemstone.Scheduling.SchedulePart.ValueText" /> for specifying the 
            values of the <see cref="T:Gemstone.Scheduling.SchedulePart" /> object.
            </summary>
    </member>
    <member name="T:Gemstone.Scheduling.SchedulePartTextSyntax">
      <summary>
            Indicates the syntax used in a <see cref="T:Gemstone.Scheduling.SchedulePart" /> for specifying its values.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.SchedulePartTextSyntax.Any">
      <summary>
            Values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> were specified using the '*' text syntax. Included values are 
            all legal values for the <see cref="T:Gemstone.Scheduling.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.SchedulePartTextSyntax.EveryN">
      <summary>
            Values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> were specified using the '*/n' text syntax. Included values are 
            legal values for the <see cref="T:Gemstone.Scheduling.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents that are 
            divisible by 'n'. 
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.SchedulePartTextSyntax.Range">
      <summary>
            Values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> were specified using the 'n1-nn' text syntax. Included values 
            are legal values for the <see cref="T:Gemstone.Scheduling.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents that
            are within the specified range.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.SchedulePartTextSyntax.Specific">
      <summary>
            Values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> were specified using the 'n1,n2,nn' text syntax. Included values 
            are specific legal values for the <see cref="T:Gemstone.Scheduling.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents.
            </summary>
    </member>
    <member name="F:Gemstone.Scheduling.SchedulePartTextSyntax.RangeWithEveryN">
      <summary>
            Values for the <see cref="T:Gemstone.Scheduling.SchedulePart" /> were specified using the 'n1-nn/n' text syntax. Included values 
            are legal values for the <see cref="T:Gemstone.Scheduling.DateTimePart" /> that the <see cref="T:Gemstone.Scheduling.SchedulePart" /> represents that
            are within the specified range and that are divisible by 'n'. 
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.CharacterGroup">
      <summary>
            Defines a group of characters that can
            appear in an automatically generated password.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
      <param name="characters">String representing the characters in the character group.</param>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
      <param name="characters">String representing the characters in the character group.</param>
      <param name="minOccurrence">The minimum number of occurrences of this character group in the password.</param>
    </member>
    <member name="P:Gemstone.Security.Cryptography.CharacterGroup.Characters">
      <summary>
            The collection of characters in the character group.
            </summary>
    </member>
    <member name="P:Gemstone.Security.Cryptography.CharacterGroup.MinOccurrence">
      <summary>
            The minimum number of occurrences of any of the
            characters in this character group in the password.
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.DataProtection">
      <summary>
            Provides methods for encrypting and decrypting data.
            </summary>
      <remarks>
            This is a safety wrapper around the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> class such that it can be used with
            <c>LocalMachine</c> scope regardless of current user. This is especially important for applications
            that may be running as user account that has no association to the current user, e.g., an Azure AD
            user or database account when authenticated using <c>AdoSecurityProvider</c>.
            </remarks>
    </member>
    <member name="F:Gemstone.Security.Cryptography.DataProtection.DataProtectionKeysFolder">
      <summary>
            Folder name for data protection keys.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.DataProtection.DefaultSettingsCategory">
      <summary>
            Default settings category for cryptography services.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.DataProtection.DefaultUserDataProtectionTimeout">
      <summary>
            Default timeout, in minutes, for user-specific data protection provider.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.DataProtection.DefineSettings(Gemstone.Configuration.Settings,System.String)">
      <summary>
            Establishes default settings for the config file.
            </summary>
      <param name="settings">Settings instance used to hold configuration.</param>
      <param name="settingsCategory">The config file settings category under which the settings are defined.</param>
    </member>
    <member name="M:Gemstone.Security.Cryptography.DataProtection.Protect(System.Byte[],System.Byte[],System.Boolean,System.String)">
      <summary>
            Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data.
            </summary>
      <param name="unencryptedData">A byte array that contains data to encrypt.</param>
      <param name="optionalEntropy">An optional additional byte array used to increase the complexity of the encryption, or null for no additional complexity.</param>
      <param name="protectToLocalMachine">Set to <c>true</c> to protect data to the local machine; otherwise, set to <c>false</c> to protect data to the current user.</param>
      <param name="settingsCategory">The config file settings category under which the settings are defined.</param>
      <returns>A byte array representing the encrypted data.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="unencryptedData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encryption failed.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.DataProtection.Unprotect(System.Byte[],System.Byte[],System.Boolean,System.String)">
      <summary>
            Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data.
            </summary>
      <param name="encryptedData">A byte array containing data encrypted using the <see cref="M:Gemstone.Security.Cryptography.DataProtection.Protect(System.Byte[],System.Byte[],System.Boolean,System.String)" /> method.</param>
      <param name="optionalEntropy">An optional additional byte array that was used to encrypt the data, or null if the additional byte array was not used.</param>
      <param name="protectToLocalMachine">Set to <c>true</c> to protect data to the local machine; otherwise, set to <c>false</c> to protect data to the current user.</param>
      <param name="settingsCategory">The config file settings category under which the settings are defined.</param>
      <returns>A byte array representing the decrypted data.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="encryptedData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The decryption failed.</exception>
    </member>
    <member name="T:Gemstone.Security.Cryptography.PasswordGenerator">
      <summary>
            Generates random passwords.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.#ctor(System.Collections.Generic.IEnumerable{Gemstone.Security.Cryptography.CharacterGroup})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> class.
            </summary>
      <param name="characterGroups">The list of character groups used to generate passwords.</param>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.AllCharacters">
      <summary>
            Gets a string representing the total collection
            of characters across all character groups.
            </summary>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.CharacterGroups">
      <summary>
            Gets the collection of character groups used by this <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" />.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.PasswordGenerator.Default">
      <summary>
            Defines the default password generator.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.PasswordGenerator.DefaultCharacterGroups">
      <summary>
            Default set of character groups used by the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" />.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword">
      <summary>
            Generates a random password with 8 characters or
            <see cref="P:Gemstone.Security.Cryptography.PasswordGenerator.MinLength" /> if it is greater than 8 characters.
            </summary>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword(System.Int32)">
      <summary>
            Generates a password with the given length.
            </summary>
      <param name="length">The length of the password to be generated.</param>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword(System.Int32,System.Int32)">
      <summary>
            Generates a password with length between the given
            <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
      <param name="minLength">The minimum length of the generated password.</param>
      <param name="maxLength">The maximum length of the generated password.</param>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.MinLength">
      <summary>
            Gets the absolute minimum length of password that can be
            generated by the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> based
            on the minimum occurrence of each character group.
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.Random">
      <summary>
            Generates cryptographically strong random numbers.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Between(System.Double,System.Double)">
      <summary>
            Generates a semi cryptographically strong random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.Double" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Double" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Double" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />, or an exception.  </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Boolean">
      <summary>
            Generates a cryptographically strong random boolean (i.e., a coin toss).
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Byte">
      <summary>
            Generates a cryptographically strong 8-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.ByteBetween(System.Byte,System.Byte)">
      <summary>
            Generates a cryptographically strong 8-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.Byte" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Byte" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Byte" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Decimal">
      <summary>
            Generates a semi cryptographically strong random decimal between zero and one.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.GetBytes(System.Byte[])">
      <summary>
            Fills an array of bytes with a cryptographically strong sequence of random values.
            </summary>
      <param name="buffer">The array to fill with a cryptographically strong sequence of random values.</param>
      <remarks>
        <para>The length of the byte array determines how many cryptographically strong random bytes are produced.</para>
        <para>This method is thread safe.</para>
      </remarks>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
      <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int16">
      <summary>
            Generates a cryptographically strong 16-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int16Between(System.Int16,System.Int16)">
      <summary>
            Generates a cryptographically strong 16-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.Int16" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int16" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int16" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int32">
      <summary>
            Generates a cryptographically strong 32-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int32Between(System.Int32,System.Int32)">
      <summary>
            Generates a cryptographically strong 32-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.Int32" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int32" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int32" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int64">
      <summary>
            Generates a cryptographically strong 64-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int64Between(System.Int64,System.Int64)">
      <summary>
            Generates a cryptographically strong 64-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.Int64" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int64" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int64" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Number">
      <summary>
            Generates a semi cryptographically strong double-precision floating-point random number between zero and one.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt16">
      <summary>
            Generates a cryptographically strong unsigned 16-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt16Between(System.UInt16,System.UInt16)">
      <summary>
            Generates a cryptographically strong unsigned 16-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt16" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt16" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt16" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt32">
      <summary>
            Generates a cryptographically strong unsigned 32-bit random integer. 
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt32Between(System.UInt32,System.UInt32)">
      <summary>
            Generates a cryptographically strong unsigned 32-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt32" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt32" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt32" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt64">
      <summary>
            Generates a cryptographically strong unsigned 64-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt64Between(System.UInt64,System.UInt64)">
      <summary>
            Generates a cryptographically strong unsigned 64-bit random integer between specified values.
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt64" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt64" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt64" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="T:Gemstone.Security.Cryptography.HashAlgorithmExtensions.HashAlgorithmExtensions">
      <summary>
            Defines extension functions related to cryptographic <see cref="T:System.Security.Cryptography.HashAlgorithm" /> objects.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.HashAlgorithmExtensions.HashAlgorithmExtensions.GetStringHash(System.Security.Cryptography.HashAlgorithm,System.String)">
      <summary>
            Gets the Base64 encoded hash of the provided string <paramref name="value" />.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for encryption.</param>
      <param name="value">String value to hash.</param>
      <returns>Base64 encoded hash of provided string <paramref name="value" />.</returns>
    </member>
    <member name="T:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions">
      <summary>
            Defines extension functions related to cryptographic <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> objects.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for decryption.</param>
      <param name="data">Source buffer containing data to decrypt.</param>
      <param name="startIndex">Offset into <paramref name="data" /> buffer.</param>
      <param name="length">Number of bytes in <paramref name="data" /> buffer to decrypt starting from <paramref name="startIndex" /> offset.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <returns>Decrypted version of <paramref name="data" /> buffer.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
      <summary>
            Decrypts input stream onto output stream for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for decryption.</param>
      <param name="source">Source stream that contains data to decrypt.</param>
      <param name="destination">Destination stream used to hold decrypted data.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for encryption.</param>
      <param name="data">Source buffer containing data to encrypt.</param>
      <param name="startIndex">Offset into <paramref name="data" /> buffer.</param>
      <param name="length">Number of bytes in <paramref name="data" /> buffer to encrypt starting from <paramref name="startIndex" /> offset.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <returns>Encrypted version of <paramref name="data" /> buffer.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
      <summary>
            Encrypts input stream onto output stream for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for encryption.</param>
      <param name="source">Source stream that contains data to encrypt.</param>
      <param name="destination">Destination stream used to hold encrypted data.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
    </member>
    <member name="T:Gemstone.StringExtensions.StringExtensions">
      <summary>
            Defines extension functions related to string manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Base64Decode(System.String)">
      <summary>
            Decodes a given base-64 encoded string encoded with <see cref="M:Gemstone.StringExtensions.StringExtensions.Base64Encode(System.String)" />.
            </summary>
      <param name="value">Input string.</param>
      <returns>A <see cref="T:System.String"></see> value representing the decoded input of <paramref name="value" />.</returns>
      <remarks>Note: This function decodes value back into a "String". Use the Convert.FromBase64String function to decode a base-64 encoded
            string back into a binary data buffer.</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Base64Encode(System.String)">
      <summary>
            Encodes a string into a base-64 string.
            </summary>
      <param name="value">Input string.</param>
      <returns>A <see cref="T:System.String"></see> value representing the encoded input of <paramref name="value" />.</returns>
      <remarks>
        <para>Performs a base-64 style of string encoding useful for data obfuscation or safe XML data string transmission.</para>
        <para>Note: This function encodes a "String". Use the Convert.ToBase64String function to encode a binary data buffer.</para>
      </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CenterText(System.String,System.Int32)">
      <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with spaces.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
      <param name="value">A <see cref="T:System.String" /> to be centered.</param>
      <param name="maxLength">An <see cref="T:System.Int32" /> that is the maximum length of padding.</param>
      <returns>The centered string value.</returns>
      <remarks>
            Handles multiple lines of text separated by Environment.NewLine.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CenterText(System.String,System.Int32,System.Char)">
      <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with specified padding character.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
      <param name="value">A <see cref="T:System.String" /> to be centered.</param>
      <param name="maxLength">An <see cref="T:System.Int32" /> that is the maximum length of padding.</param>
      <param name="paddingCharacter">The <see cref="T:System.Char" /> value to pad with.</param>
      <returns>The centered string value.</returns>
      <remarks>
            Handles multiple lines of text separated by <c>Environment.NewLine</c>.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CharCount(System.String,System.Char)">
      <summary>
            Counts the total number of the occurrences of a character in the given string.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterToCount">Character to be counted.</param>
      <returns>Total number of the occurrences of <paramref name="characterToCount" /> in the given string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> to convert string to.</typeparam>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type T if conversion fails.</returns>
      <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert this <see cref="T:System.String" /> to the specified type T,
            the best way to make sure <paramref name="value" /> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter" /> to convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String,System.Globalization.CultureInfo)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> to convert string to.</typeparam>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type T if conversion fails.</returns>
      <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert this <see cref="T:System.String" /> to the specified type T,
            the best way to make sure <paramref name="value" /> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter" /> to convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType(System.String,System.Type)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type if conversion fails.</returns>
      <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert this <see cref="T:System.String" /> to the specified <paramref name="type" />,
            the best way to make sure <paramref name="value" /> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter" /> to convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType(System.String,System.Type,System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <param name="suppressException">Set to <c>true</c> to suppress conversion exceptions and return <c>null</c>; otherwise, <c>false</c></param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type if conversion fails.</returns>
      <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter" /> to convert this <see cref="T:System.String" /> to the specified <paramref name="type" />,
            the best way to make sure <paramref name="value" /> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter" /> to convert the original object to a <see cref="T:System.String" />; see the
            <see cref="M:Gemstone.Common.TypeConvertToString(System.Object)" /> method for an easy way to do this.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.Char)">
      <summary>
            Ensures a string ends with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endChar">The character desired at string's end.</param>
      <returns>The sent string with character at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.Char,System.Boolean)">
      <summary>
            Ensures a string ends with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endChar">The character desired at string's end.</param>
      <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="endChar" />.</param>
      <returns>The sent string with character at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.String)">
      <summary>
            Ensures a string ends with a specific string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endString">The string desired at string's end.</param>
      <returns>The sent string with string at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.Char)">
      <summary>
            Ensures a string starts with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startChar">The character desired at string start.</param>
      <returns>The sent string with character at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.Char,System.Boolean)">
      <summary>
            Ensures a string starts with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startChar">The character desired at string start.</param>
      <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="startChar" />.</param>
      <returns>The sent string with character at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.String)">
      <summary>
            Ensures a string starts with a specific string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startString">The string desired at string start.</param>
      <returns>The sent string with string at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.GetComparer(System.StringComparison)">
      <summary>
            Gets appropriate <see cref="T:System.StringComparer" /> for the specified <see cref="T:System.StringComparison" />.
            </summary>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> type.</param>
      <returns>
        <see cref="T:System.StringComparer" /> for the specified <see cref="T:System.StringComparison" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.GetSegments(System.String,System.Int32)">
      <summary>
            Turns source string into an array of string segments - each with a set maximum width - for parsing or displaying.
            </summary>
      <param name="value">Input string to break up into segments.</param>
      <param name="segmentSize">Maximum size of returned segment.</param>
      <returns>Array of string segments as parsed from source string.</returns>
      <remarks>Returns a single element array with an empty string if source string is null or empty.</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Char,System.Int32)">
      <summary>
            Finds the first index that does not match the given <paramref name="character" />.
            </summary>
      <param name="value">String to process</param>
      <param name="character">the character use to test</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character that does NOT match <paramref name="character" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Char[],System.Int32)">
      <summary>
            Finds the first index that is NOT included in testChars
            </summary>
      <param name="value">String to process</param>
      <param name="anyOf">the characters use to test</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character NOT included in <paramref name="anyOf" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Finds the first index that does NOT pass the <paramref name="characterTestFunction" /> delegate function.
            </summary>
      <param name="value">String to process</param>
      <param name="characterTestFunction">the character test to use</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character that does NOT pass the <paramref name="characterTestFunction" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a specified character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testChar">The char to find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for <paramref name="testChar" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of <paramref name="testChar" /> within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character passing the specified delegate.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="characterTestFunction">The delegate function used to match characters.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin executing test function. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the matching character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Searches a string from right to left for the next instance of a specified string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testString">The string to find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for <paramref name="testString" />. Typically length of <paramref name="value" /> minus 1."</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>The start (or left most) index of <paramref name="testString" /> within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that is not the specified character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testChar">The char to ignore.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for a character that is not <paramref name="testChar" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Char[],System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that is not contained in the specified collection of characters.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="anyOf">The characters to use to test find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for characters not in <paramref name="anyOf" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that does not pass the given delegate function.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="characterTestFunction">The character test to use.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin testing characters. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String)">
      <summary>
            Searches a string for an instance of a repeated character.
            </summary>
      <param name="value">The string to process.</param>
      <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Char)">
      <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="characterToFind">The character of interest.</param>
      <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind" /> from specified <paramref name="startIndex" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="characterToFind">The character of interest.</param>
      <param name="startIndex">The index from which to begin the search.</param>
      <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Int32)">
      <summary>
            Searches a string for an instance of a repeated character from specified <paramref name="startIndex" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="startIndex">The index from which to begin the search.</param>
      <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Interpolate(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
             Applies string interpolation to the given format string at runtime.
             </summary>
      <param name="format">The format string to be interpolated.</param>
      <param name="parameters">The parameters that can be referenced by the format string.</param>
      <returns>
             A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the
             corresponding <paramref name="parameters" />.</returns>
      <remarks>
        <para>
             This overload is intended to be used for scenarios in which the parameters available to the format string
             are stored in a <see cref="T:System.Collections.Generic.Dictionary`2" /> or <see cref="T:System.Dynamic.ExpandoObject" />.
             Note that dynamic variables cannot be used when calling extension functions.
             </para>
        <code>
             string format = "{hello} {world}!";
             dynamic parameters = new ExpandoObject();
             parameters.hello = "Hello";
             parameters.world = "World";
            
             Console.WriteLine(format.Interpolate(parameters));                  // This raises a compiler error
             Console.WriteLine(format.Interpolate((ExpandoObject)parameters);    // This is okay
             Console.WriteLine(StringExtensions.Interpolate(format, parameters); // This is also okay
             </code>
      </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Interpolate``1(System.String,``0)">
      <summary>
            Applies string interpolation to the given format string at runtime.
            </summary>
      <param name="format">The format string to be interpolated.</param>
      <param name="parameters">The parameters that can be referenced by the format string.</param>
      <typeparam name="T">The type of the object that defines the parameters for the format string.</typeparam>
      <returns>
            A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the
            corresponding <paramref name="parameters" />.</returns>
      <remarks>
        <para>
            This overload uses reflection to obtain the name and value of <paramref name="parameters" />' properties
            to make those available to the interpolated format string by name. This can be used with user-defined
            types, but is mainly intended to be used with anonymous types.
            </para>
        <code language="cs">
            string format = "{hello} {world}!";
            var parameters = new { hello = "Hello", world = "World" };
            Console.WriteLine(format.Interpolate(parameters));
            </code>
        <para>
            If <paramref name="parameters" /> can be safely cast to <code>IEnumerable{KeyValuePair{string, object}}</code>, this function
            will skip the reflection and call <see cref="M:Gemstone.StringExtensions.StringExtensions.Interpolate(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" /> directly.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllDigits(System.String)">
      <summary>
            Tests to see if a string is contains only digits based on Char.IsDigit function.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are digits; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLetters(System.String)">
      <summary>
            Tests to see if a string contains only letters.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are letters; otherwise, false.</returns>
      <remarks>Any non-letter character (e.g., punctuation marks) causes this function to return false (See overload to ignore punctuation
            marks.).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLetters(System.String,System.Boolean)">
      <summary>
            Tests to see if a string contains only letters.
            </summary>
      <param name="value">Input string.</param>
      <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
      <returns>True, if all string's characters are letters; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLettersOrDigits(System.String)">
      <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are either letters or digits; otherwise, false.</returns>
      <remarks>Any non-letter, non-digit character (e.g., punctuation marks) causes this function to return false (See overload to ignore
            punctuation marks.).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLettersOrDigits(System.String,System.Boolean)">
      <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
      <param name="value">Input string.</param>
      <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
      <returns>True, if all string's characters are letters or digits; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLower(System.String)">
      <summary>
            Tests to see if a string's letters are all lower case.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's letter characters are lower case; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllNumbers(System.String)">
      <summary>
            Tests to see if a string contains only numbers based on Char.IsNumber function.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are numbers; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllUpper(System.String)">
      <summary>
            Tests to see if a string's letters are all upper case.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's letter characters are upper case; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.JoinKeyValuePairs(System.Collections.Generic.IDictionary{System.String,System.String},System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Combines a dictionary of key-value pairs in to a string.
            </summary>
      <param name="pairs">Dictionary of key-value pairs.</param>
      <param name="parameterDelimiter">Character that delimits one key-value pair from another (e.g. ';').</param>
      <param name="keyValueDelimiter">Character that delimits a key from its value (e.g. '=').</param>
      <param name="startValueDelimiter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters (e.g., "{").</param>
      <param name="endValueDelimiter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters (e.g., "}").</param>
      <returns>A string of key-value pairs.</returns>
      <remarks>
            Values will be escaped within <paramref name="startValueDelimiter" /> and <paramref name="endValueDelimiter" />
            to contain nested key/value pair expressions like the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>,
            when either the <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> are detected in the
            value of the key/value pair.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.NotEmpty(System.String)">
      <summary>
            Ensures parameter is not an empty or null string. Returns a single space if test value is empty.
            </summary>
      <param name="testValue">Value to test for null or empty.</param>
      <returns>A non-empty string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.NotEmpty(System.String,System.String)">
      <summary>
            Ensures parameter is not an empty or null string.
            </summary>
      <param name="testValue">Value to test for null or empty.</param>
      <param name="nonEmptyReturnValue">Value to return if <paramref name="testValue">testValue</paramref> is null or empty.</param>
      <returns>A non-empty string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ParseBoolean(System.String)">
      <summary>
            Parses a string intended to represent a boolean value.
            </summary>
      <param name="value">String representing a boolean value.</param>
      <returns>Parsed boolean value.</returns>
      <remarks>
            This function, unlike Boolean.Parse, correctly parses a boolean value, even if the string value
            specified is a number (e.g., 0 or -1). Boolean.Parse expects a string to be represented as
            "True" or "False" (i.e., Boolean.TrueString or Boolean.FalseString respectively).
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ParseKeyValuePairs(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
      <summary>
            Parses key/value pair expressions from a string. Parameter pairs are delimited by <paramref name="keyValueDelimiter" />
            and multiple pairs separated by <paramref name="parameterDelimiter" />. Supports encapsulated nested expressions.
            </summary>
      <param name="value">String containing key/value pair expressions to parse.</param>
      <param name="parameterDelimiter">Character that delimits one key/value pair from another.</param>
      <param name="keyValueDelimiter">Character that delimits key from value.</param>
      <param name="startValueDelimiter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters.</param>
      <param name="endValueDelimiter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters.</param>
      <param name="ignoreDuplicateKeys">Flag determines whether duplicates are ignored. If flag is set to <c>false</c> an
            <see cref="T:System.ArgumentException" /> will be thrown when all key parameters are not unique.</param>
      <returns>Dictionary of key/value pairs.</returns>
      <remarks>
        <para>
            Parses a string containing key/value pair expressions (e.g., "localPort=5001; transportProtocol=UDP; interface=0.0.0.0").
            This method treats all "keys" as case-insensitive. Nesting of key/value pair expressions is allowed by encapsulating the
            value using the <paramref name="startValueDelimiter" /> and <paramref name="endValueDelimiter" /> values (e.g., 
            "dataChannel={Port=-1;Clients=localhost:8800}; commandChannel={Port=8900}; dataFormat=FloatingPoint;"). There must be one
            <paramref name="endValueDelimiter" /> for each encountered <paramref name="startValueDelimiter" /> in the value or a
            <see cref="T:System.FormatException" /> will be thrown. Multiple levels of nesting is supported. If the <paramref name="ignoreDuplicateKeys" />
            flag is set to <c>false</c> an <see cref="T:System.ArgumentException" /> will be thrown when all key parameters are not unique. Note
            that keys within nested expressions are considered separate key/value pair strings and are not considered when checking
            for duplicate keys.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentException">All delimiters must be unique -or- all keys must be unique when
            <paramref name="ignoreDuplicateKeys" /> is set to <c>false</c>.</exception>
      <exception cref="T:System.FormatException">Total nested key/value pair expressions are mismatched -or- encountered
            <paramref name="endValueDelimiter" /> before <paramref name="startValueDelimiter" />.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteUnwrap(System.String,System.Char)">
      <summary>
            Unwraps quotes similar to Excel.  However, a little more predictable for unusual edge cases.
            </summary>
      <param name="value">The string to process</param>
      <param name="quoteChar">The quote char to use.  Default is double quote. Due to trimming, quoteChar of whitespace is not allowed.</param>
      <returns>The sent string with matched surrounding quotes removed.</returns>
      <remarks> 
            To remove all quote chars at beginning and end of a string regardless of match use .Trim('"')  It's faster.
            Three consecutive quotes assures a singe quote char in output.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteUnwrap(System.String,System.Char[])">
      <summary>
            Unwraps quotes similar to Excel.  However, a little more predictable for unusual edge cases.
            </summary>
      <param name="value">The string to process</param>
      <param name="quoteChars">The collection of quote chars to use. Due to trimming, whitespace is not allowed.</param>
      <returns>The sent string with matched surrounding quote chars removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteWrap(System.String,System.Char)">
      <summary>
            Wraps <paramref name="value" /> in the <paramref name="quoteChar" />.
            </summary>
      <param name="value">Input string to process</param>
      <param name="quoteChar">The char to wrap <paramref name="value" /></param>
      <returns>
        <paramref name="value" /> wrapped in <paramref name="quoteChar" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RegexDecode(System.String)">
      <summary>
            Decodes the specified Regular Expression character back into a standard Unicode character.
            </summary>
      <param name="value">Regular Expression character to decode back into a Unicode character.</param>
      <returns>Standard Unicode character representation of specified Regular Expression character.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCharacter(System.String,System.Char)">
      <summary>
            Removes all characters matching the given <paramref name="characterToRemove" />.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterToRemove">The specific character to remove.</param>
      <returns>Returns <paramref name="value" /> with all characters matching the given character removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCharacters(System.String,System.Func{System.Char,System.Boolean})">
      <summary>
            Removes all characters passing delegate test from a string.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterTestFunction">Delegate used to determine whether or not character should be removed.</param>
      <returns>Returns <paramref name="value" /> with all characters passing delegate test removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveControlCharacters(System.String)">
      <summary>
            Removes all control characters from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all control characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCrLfs(System.String)">
      <summary>
            Removes all carriage returns and line feeds from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all CR and LF characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicates(System.String,System.String)">
      <summary>
            Removes duplicate character strings (adjoining replication) in a string.
            </summary>
      <param name="value">Input string.</param>
      <param name="duplicatedValue">String whose duplicates are to be removed.</param>
      <returns>Returns <paramref name="value" /> with all duplicated <paramref name="duplicatedValue" /> removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicateWhiteSpace(System.String)">
      <summary>
            Replaces all repeating white space with a single space.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicateWhiteSpace(System.String,System.Char)">
      <summary>
            Replaces all repeating white space with specified spacing character.
            </summary>
      <param name="value">Input string.</param>
      <param name="spacingCharacter">Character value to use to insert as single white space value.</param>
      <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
      <remarks>This function allows you to specify spacing character (e.g., you may want to use a non-breaking space: <c>Convert.ToChar(160)</c>).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveInvalidFileNameCharacters(System.String)">
      <summary>
            Removes all invalid file name characters (\ / : * ? " &lt; &gt; |) from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all invalid file name characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingString(System.String,System.Char,System.Boolean)">
      <summary>
            Removes one or more instances of a specified char from the beginning of a string.
            </summary>
      <param name="value">The string to process</param>
      <param name="charToRemove">The char to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="charToRemove" /> deleted from the beginning</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingString(System.String,System.String,System.Boolean)">
      <summary>
            Removes one or more instances of a specified string from the beginning of a string.
            </summary>
      <param name="value">The string to process</param>
      <param name="stringToRemove">The string to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="stringToRemove" /> deleted from the beginning</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingZeros(System.String,System.Boolean)">
      <summary>
            Assures that numeric value is a well formed number
            Adds a leading zero in front of a decimal, if present
            </summary>
      <param name="value">The string to process</param>
      <param name="assureParseDouble">Set to TRUE to assure that value parses to Double</param>
      <returns>A string with deleted from the beginning</returns>
      <remarks>Note: AssureParseDouble also removes trailing zeros following a decimal which implies loss of precision in the value</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveNull(System.String)">
      <summary>
            Removes the terminator ('\0') from a null terminated string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all characters to the left of the terminator.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveTrailingString(System.String,System.Char,System.Boolean)">
      <summary>
            Removes one or more instances of a character from the end of a string
            </summary>
      <param name="value">The string to process</param>
      <param name="charToRemove">The char to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="charToRemove" /> deleted from the end</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveTrailingString(System.String,System.String,System.Boolean)">
      <summary>
            Removes one or more instances of a string from the end of a string
            </summary>
      <param name="value">The string to process</param>
      <param name="stringToRemove">The string to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="stringToRemove" /> deleted from the end</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveWhiteSpace(System.String)">
      <summary>
            Removes all white space (as defined by IsWhiteSpace) from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all white space removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCaseInsensitive(System.String,System.String,System.String)">
      <summary>
            Performs a case insensitive string replacement.
            </summary>
      <param name="value">The string to examine.</param>
      <param name="fromText">The value to replace.</param>
      <param name="toText">The new value to be inserted</param>
      <returns>A string with replacements.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCharacters(System.String,System.Char,System.Func{System.Char,System.Boolean})">
      <summary>
            Replaces all characters passing delegate test with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to replace characters passing delegate test.</param>
      <param name="characterTestFunction">Delegate used to determine whether or not character should be replaced.</param>
      <returns>Returns <paramref name="value" /> with all characters passing delegate test replaced.</returns>
      <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceControlCharacters(System.String)">
      <summary>
            Replaces all control characters in a string with a single space.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all control characters replaced as a single space.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceControlCharacters(System.String,System.Char)">
      <summary>
            Replaces all control characters in a string with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" control characters.</param>
      <returns>Returns <paramref name="value" /> with all control characters replaced.</returns>
      <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCrLfs(System.String,System.Char)">
      <summary>
            Replaces all carriage return and line feed characters (as well as CR/LF sequences) in a string with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" CR and LF characters.</param>
      <returns>Returns <paramref name="value" /> with all CR and LF characters replaced.</returns>
      <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceInvalidFileNameCharacters(System.String,System.Char)">
      <summary>
            Replaces all invalid file name characters (\ / : * ? " &lt; &gt; |) in a string with the specified <paramref name="replacementCharacter" />.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to replace the invalid characters.</param>
      <returns>&gt;Returns <paramref name="value" /> with all invalid file name characters replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceWhiteSpace(System.String,System.Char)">
      <summary>
            Replaces all white space characters (as defined by IsWhiteSpace) with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" white space characters.</param>
      <returns>Returns <paramref name="value" /> with all white space characters replaced.</returns>
      <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Reverse(System.String)">
      <summary>
            Reverses the order of the characters in a string.
            </summary>
      <param name="value">Input string to process.</param>
      <returns>The reversed string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.StringCount(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Counts the total number of the occurrences of string within a string
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testString">String to be counted.</param>
      <param name="startIndex">The index at which to begin <paramref name="value" /></param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>Total number of the occurrences of <paramref name="testString" /> in the given string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.SubstringEnd(System.String,System.Int32)">
      <summary>
            Returns a string consisting of a specified number of characters from the end of a string "to the left"
            </summary>
      <param name="value">The string to process</param>
      <param name="length">The number of characters from the end of the string to return</param>
      <returns>A string of length <paramref name="length" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.SubstringPrevious(System.String,System.Int32,System.Int32)">
      <summary>
            Returns a string consisting of a specified number of characters to the left (previous chars) from the provided startIndex
            </summary>
      <param name="value">The string to process</param>
      <param name="endIndex">The index in <paramref name="value" /> at the end of the desired returned string.</param>
      <param name="length">The number of characters from the <paramref name="endIndex" /> of the string to return</param>
      <returns>A string to the left of <paramref name="endIndex" /> of length up to <paramref name="length" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ThrowIfNullOrEmpty(System.String,System.String)">
      <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="argument" /> is null -or-
            an <see cref="T:System.ArgumentException" /> if <paramref name="argument" /> is Empty.
            </summary>
      <param name="argument">The reference type argument to validate as non-null and non-empty.</param>
      <param name="paramName">The name of the parameter with which <paramref name="argument" /> corresponds.</param>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToCamelCase(System.String)">
      <summary>
            Converts first letter of string to lower-case.
            </summary>
      <param name="value">String to convert to camel case.</param>
      <returns>
        <paramref name="value" /> with first letter as lower-case.</returns>
      <remarks>
            This function will automatically trim <paramref name="value" />.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullNorEmptyString``1(``0,System.String)">
      <summary>
            Converts value to string; null objects, DBNull objects or empty strings will return specified <paramref name="nonNullNorEmptyValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullNorEmptyValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, DBNull or an empty string <paramref name="nonNullNorEmptyValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="nonNullNorEmptyValue" /> must not be null or an empty string.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullNorWhiteSpace``1(``0,System.String)">
      <summary>
            Converts value to string; null objects, DBNull objects, empty strings or all white space strings will return specified <paramref name="nonNullNorWhiteSpaceValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullNorWhiteSpaceValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, DBNull, empty or all white space, <paramref name="nonNullNorWhiteSpaceValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="nonNullNorWhiteSpaceValue" /> must not be null, an empty string or white space.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString(System.String)">
      <summary>
            Makes sure returned string value is not null; if this string is null, empty string ("") will be returned. 
            </summary>
      <param name="value">
        <see cref="T:System.String" /> to verify is not null.</param>
      <returns>
        <see cref="T:System.String" /> value; if <paramref name="value" /> is null, empty string ("") will be returned.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString``1(``0)">
      <summary>
            Converts value to string; null objects (or DBNull objects) will return an empty string (""). 
            </summary>
      <param name="value">Value to convert to string.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, empty string ("") will be returned. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString``1(``0,System.String)">
      <summary>
            Converts value to string; null objects (or DBNull objects) will return specified <paramref name="nonNullValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, <paramref name="nonNullValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonNullValue" /> cannot be null.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToPascalCase(System.String)">
      <summary>
            Converts first letter of string to upper-case.
            </summary>
      <param name="value">String to convert to pascal case.</param>
      <returns>
        <paramref name="value" /> with first letter as upper-case.</returns>
      <remarks>
            This function will automatically trim <paramref name="value" />.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToSecureString(System.String)">
      <summary>
            Converts the given string into a <see cref="T:System.Security.SecureString" />.
            </summary>
      <param name="value">The string to be converted.</param>
      <returns>The given string as a <see cref="T:System.Security.SecureString" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToSpacedLabel(System.String)">
      <summary>
            Converts the provided string, assumed to be title, pascal or camel case formatted, to a label with spaces before each capital letter, other than the first.
            </summary>
      <param name="value">Input string.</param>
      <returns>Formatted enumeration name of the specified value for visual display.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToStream(System.String,System.Text.Encoding)">
      <summary>
            Converts string into a stream using the specified <paramref name="encoding" />.
            </summary>
      <param name="value">Input to string to convert to a string.</param>
      <param name="encoding">String encoding to use; defaults to <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <returns>String <paramref name="value" /> encoded onto a stream.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToStreamAsync(System.String,System.Text.Encoding)">
      <summary>
            Asynchronously converts string into a stream using the specified <paramref name="encoding" />.
            </summary>
      <param name="value">Input to string to convert to a string.</param>
      <param name="encoding">String encoding to use; defaults to <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <returns>String <paramref name="value" /> encoded onto a stream.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
      <summary>
            Converts the provided string into title case (upper case first letter of each word).
            </summary>
      <param name="value">Input string.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> that corresponds to the language rules applied for title casing of words; defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</param>
      <returns>A <see cref="T:System.String" /> that has the first letter of each word capitalized.</returns>
      <remarks>
            Note: This function performs "ToLower" in input string then applies <see cref="M:System.Globalization.TextInfo.ToTitleCase(System.String)" /> for specified <paramref name="culture" />.
            This way, even strings formatted in all-caps will still be properly formatted.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToUnsecureString(System.Security.SecureString)">
      <summary>
            Converts the given <see cref="T:System.Security.SecureString" /> into a <see cref="T:System.String" />.
            </summary>
      <param name="value">The <see cref="T:System.Security.SecureString" /> to be converted.</param>
      <returns>The given <see cref="T:System.Security.SecureString" /> as a <see cref="T:System.String" />.</returns>
      <remarks>
            This method is not safe, as it stores your secure string data in clear text in memory.
            Since strings are immutable, that memory cannot be cleaned up until all references to
            the string are removed and the garbage collector deallocates it. Only use this method
            to interface with APIs that do not support the use of <see cref="T:System.Security.SecureString" /> for
            sensitive text data.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TrimWithEllipsisEnd(System.String,System.Int32)">
      <summary>
            Places an ellipsis at the end of a string as it is trimmed to length specified.
            </summary>
      <param name="value">The string to process.</param>
      <param name="length">The maximum returned string length; minimum value is 5.</param>
      <returns>
            A trimmed string of the specified <paramref name="length" /> or empty string if <paramref name="value" /> is null or empty.
            </returns>
      <remarks>
            Returned string is not padded to fill field length if <paramref name="value" /> is shorter than length.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TrimWithEllipsisMiddle(System.String,System.Int32)">
      <summary>
            Places an ellipsis in the middle of a string as it is trimmed to length specified.
            </summary>
      <param name="value">The string to process.</param>
      <param name="length">The maximum returned string length; minimum value is 5.</param>
      <returns>
            A trimmed string of the specified <paramref name="length" /> or empty string if <paramref name="value" /> is null or empty.
            </returns>
      <remarks>
            Returned string is not padded to fill field length if <paramref name="value" /> is shorter than length.
            </remarks>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TruncateLeft(System.String,System.Int32)">
      <summary>
            Truncates the provided string from the left if it is longer that specified length.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value that is to be truncated.</param>
      <param name="maxLength">The maximum number of characters that <paramref name="value" /> can be.</param>
      <returns>A <see cref="T:System.String" /> that is the truncated version of the <paramref name="value" /> string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TruncateRight(System.String,System.Int32)">
      <summary>
            Truncates the provided string from the right if it is longer that specified length.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value that is to be truncated.</param>
      <param name="maxLength">The maximum number of characters that <paramref name="value" /> can be.</param>
      <returns>A <see cref="T:System.String" /> that is the truncated version of the <paramref name="value" /> string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.UriEncode(System.String)">
      <summary>
            Escapes string using URL encoding.
            </summary>
      <param name="value">The string to escape.</param>
      <returns>URL encoded string.</returns>
    </member>
    <member name="T:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </param>
      <param name="options">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>options</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </param>
      <param name="tolerance">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tolerance</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.ApproximatelyEquals(System.String,System.String,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions,Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.HammingDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.HammingDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.HammingDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.HammingDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.HammingDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardIndex(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaccardIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.JaroWinklerDistanceWithPrefixScale(System.String,System.String,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceLowerBounds(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceLowerBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceLowerBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceLowerBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceLowerBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceUpperBounds(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceUpperBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceUpperBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceUpperBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LevenshteinDistanceUpperBounds(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubsequence(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubsequence(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubsequence(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubsequence(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubsequence(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubstring(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubstring(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubstring(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubstring(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.LongestCommonSubstring(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.NormalizedLevenshteinDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.NormalizedLevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.NormalizedLevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.NormalizedLevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.NormalizedLevenshteinDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.OverlapCoefficient(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.OverlapCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.OverlapCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.OverlapCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.OverlapCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.RatcliffObershelpSimilarity(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.RatcliffObershelpSimilarity(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.RatcliffObershelpSimilarity(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.RatcliffObershelpSimilarity(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.RatcliffObershelpSimilarity(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceDistance(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceDistance(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceIndex(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.SorensenDiceIndex(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.TanimotoCoefficient(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.TanimotoCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.TanimotoCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.TanimotoCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.ComparisonMetrics.TanimotoCoefficient(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance">
      <summary>
            Fuzzy string comparison tolerances.
            </summary>
    </member>
    <member name="F:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance.Strong">
      <summary>
            Strong comparison tolerance.
            </summary>
    </member>
    <member name="F:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance.Normal">
      <summary>
            Normal comparison tolerance.
            </summary>
    </member>
    <member name="F:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance.Weak">
      <summary>
            Weak comparison tolerance.
            </summary>
    </member>
    <member name="F:Gemstone.StringExtensions.FuzzyStrings.FuzzyStringComparisonTolerance.Manual">
      <summary>
            Manual comparison tolerance.
            </summary>
    </member>
    <member name="T:Gemstone.StringExtensions.FuzzyStrings.Operations">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Gemstone.StringExtensions.FuzzyStrings.Operations</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.Capitalize(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.Capitalize(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.Capitalize(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.Capitalize(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListBigrams(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListBigrams(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListBigrams(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListBigrams(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListNGrams(System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListNGrams(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListNGrams(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="n">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>n</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListNGrams(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListNGrams(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListPrefixes(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListPrefixes(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListPrefixes(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListPrefixes(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListTriGrams(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListTriGrams(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListTriGrams(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.ListTriGrams(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.MergeIndividualElementsIntoString(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.MergeIndividualElementsIntoString(System.Collections.Generic.IEnumerable{System.String})</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.MergeIndividualElementsIntoString(System.Collections.Generic.IEnumerable{System.String})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.MergeIndividualElementsIntoString(System.Collections.Generic.IEnumerable{System.String})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.FuzzyStrings.Operations.SplitIntoIndividualElements(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.SplitIntoIndividualElements(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.SplitIntoIndividualElements(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.StringExtensions.FuzzyStrings.Operations.SplitIntoIndividualElements(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Gemstone.Threading.InterprocessLock">
      <summary>
            Defines helper methods related to inter-process locking.
            </summary>
    </member>
    <member name="F:Gemstone.Threading.InterprocessLock.DefaultMutexGlobal">
      <summary>
            Default value for <see cref="T:System.Threading.Mutex" /> global flag.
            </summary>
    </member>
    <member name="F:Gemstone.Threading.InterprocessLock.DefaultSemaphoreGlobal">
      <summary>
            Default value for <see cref="T:Gemstone.Threading.NamedSemaphore" /> global flag.
            </summary>
    </member>
    <member name="F:Gemstone.Threading.InterprocessLock.DefaultSemaphoreInitialCount">
      <summary>
            Default value for <see cref="T:Gemstone.Threading.NamedSemaphore" /> initial count.
            </summary>
    </member>
    <member name="F:Gemstone.Threading.InterprocessLock.DefaultSemaphoreMaximumCount">
      <summary>
            Default value for <see cref="T:Gemstone.Threading.NamedSemaphore" /> maximum count.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.InterprocessLock.GetNamedMutex(System.Boolean)">
      <summary>
            Gets a uniquely named inter-process <see cref="T:System.Threading.Mutex" /> associated with the running application, typically used to detect whether an instance
            of the application is already running.
            </summary>
      <param name="perUser">Indicates whether to generate a different name for the <see cref="T:System.Threading.Mutex" /> dependent upon the user running the application.</param>
      <returns>A uniquely named inter-process <see cref="T:System.Threading.Mutex" /> specific to the application; <see cref="T:System.Threading.Mutex" /> is created if it does not exist.</returns>
      <remarks>
        <para>
            This function uses a hash of the assembly's GUID when creating the <see cref="T:System.Threading.Mutex" />, if it is available. If it is not available, it uses a hash
            of the simple name of the assembly. Although the name is hashed to help guarantee uniqueness, it is still entirely possible that another application
            may use that name with the same hashing algorithm to generate its <see cref="T:System.Threading.Mutex" /> name. Therefore, it is best to ensure that the
            <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is defined in the AssemblyInfo of your application.
            </para>
      </remarks>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, but the user does not have the minimum needed security access rights to use it.</exception>
    </member>
    <member name="M:Gemstone.Threading.InterprocessLock.GetNamedMutex(System.String,System.Boolean)">
      <summary>
            Gets a uniquely named inter-process <see cref="T:System.Threading.Mutex" /> associated with the specified <paramref name="name" /> that identifies a source object
            needing concurrency locking.
            </summary>
      <param name="name">Identifying name of source object needing concurrency locking (e.g., a path and file name).</param>
      <param name="global">Determines if mutex should be marked as global; set value to <c>false</c> for local.</param>
      <returns>A uniquely named inter-process <see cref="T:System.Threading.Mutex" /> specific to <paramref name="name" />; <see cref="T:System.Threading.Mutex" /> is created if it does not exist.</returns>
      <remarks>
        <para>
            This function uses a hash of the <paramref name="name" /> when creating the <see cref="T:System.Threading.Mutex" />, not the actual <paramref name="name" /> - this way
            restrictions on the <paramref name="name" /> length do not need to be a user concern. All processes needing an inter-process <see cref="T:System.Threading.Mutex" /> need
            to use this same function to ensure access to the same <see cref="T:System.Threading.Mutex" />.
            </para>
        <para>
            The <paramref name="name" /> can be a string of any length (must not be empty, null or white space) and is not case-sensitive. All hashes of the
            <paramref name="name" /> used to create the global <see cref="T:System.Threading.Mutex" /> are first converted to lower case.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">Argument <paramref name="name" /> cannot be empty, null or white space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named mutex exists, but the user does not have the minimum needed security access rights to use it.</exception>
    </member>
    <member name="M:Gemstone.Threading.InterprocessLock.GetNamedSemaphore(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Gets a uniquely named inter-process <see cref="T:Gemstone.Threading.NamedSemaphore" /> associated with the running application, typically used to detect whether some number of
            instances of the application are already running.
            </summary>
      <param name="perUser">Indicates whether to generate a different name for the <see cref="T:Gemstone.Threading.NamedSemaphore" /> dependent upon the user running the application.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently, or -1 to default to <paramref name="maximumCount" />.</param>
      <returns>A uniquely named inter-process <see cref="T:Gemstone.Threading.NamedSemaphore" /> specific to entry assembly; <see cref="T:Gemstone.Threading.NamedSemaphore" /> is created if it does not exist.</returns>
      <remarks>
        <para>
            This function uses a hash of the assembly's GUID when creating the <see cref="T:Gemstone.Threading.NamedSemaphore" />, if it is available. If it is not available, it uses a hash
            of the simple name of the assembly. Although the name is hashed to help guarantee uniqueness, it is still entirely possible that another application
            may use that name with the same hashing algorithm to generate its <see cref="T:Gemstone.Threading.NamedSemaphore" /> name. Therefore, it is best to ensure that the
            <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is defined in the AssemblyInfo of your application.
            </para>
        <para>
            On POSIX systems, the <see cref="T:Gemstone.Threading.NamedSemaphore" /> exhibits kernel persistence, meaning instances will remain active beyond the lifespan of the
            creating process. Named semaphores must be explicitly removed by invoking <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" /> when they are no longer needed.
            Kernel persistence necessitates careful design consideration regarding the responsibility for invoking <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />.
            Since the common use case for named semaphores is across multiple applications, it is advisable for the last exiting process to handle the
            cleanup. In cases where an application may crash before calling <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />, the semaphore persists in the system,
            potentially leading to resource leakage. Implementations should include strategies to address and mitigate this risk.
            </para>
      </remarks>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the minimum needed security access rights to use it.</exception>
    </member>
    <member name="M:Gemstone.Threading.InterprocessLock.GetNamedSemaphore(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Gets a uniquely named inter-process <see cref="T:Gemstone.Threading.NamedSemaphore" /> associated with the specified <paramref name="name" /> that identifies a source object
            needing concurrency locking.
            </summary>
      <param name="name">Identifying name of source object needing concurrency locking (e.g., a path and file name).</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently, or -1 to default to <paramref name="maximumCount" />.</param>
      <param name="global">Determines if semaphore should be marked as global; set value to <c>false</c> for local.</param>
      <returns>A uniquely named inter-process <see cref="T:Gemstone.Threading.NamedSemaphore" /> specific to <paramref name="name" />; <see cref="T:Gemstone.Threading.NamedSemaphore" /> is created if it does not exist.</returns>
      <remarks>
        <para>
            This function uses a hash of the <paramref name="name" /> when creating the <see cref="T:Gemstone.Threading.NamedSemaphore" />, not the actual <paramref name="name" /> - this way
            restrictions on the <paramref name="name" /> length do not need to be a user concern. All processes needing an inter-process <see cref="T:Gemstone.Threading.NamedSemaphore" /> need
            to use this same function to ensure access to the same <see cref="T:Gemstone.Threading.NamedSemaphore" />.
            </para>
        <para>
            The <paramref name="name" /> can be a string of any length (must not be empty, null or white space) and is not case-sensitive. All hashes of the
            <paramref name="name" /> used to create the global <see cref="T:Gemstone.Threading.NamedSemaphore" /> are first converted to lower case.
            </para>
        <para>
            On POSIX systems, the <see cref="T:Gemstone.Threading.NamedSemaphore" /> exhibits kernel persistence, meaning instances will remain active beyond the lifespan of the
            creating process. Named semaphores must be explicitly removed by invoking <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" /> when they are no longer needed.
            Kernel persistence necessitates careful design consideration regarding the responsibility for invoking <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />.
            Since the common use case for named semaphores is across multiple applications, it is advisable for the last exiting process to handle the
            cleanup. In cases where an application may crash before calling <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />, the semaphore persists in the system,
            potentially leading to resource leakage. Implementations should include strategies to address and mitigate this risk.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">Argument <paramref name="name" /> cannot be empty, null or white space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The named semaphore exists, but the user does not have the minimum needed security access rights to use it.</exception>
    </member>
    <member name="T:Gemstone.Threading.InterprocessReaderWriterLock">
      <summary>
            Represents an inter-process reader/writer lock using <see cref="T:Gemstone.Threading.NamedSemaphore" /> and <see cref="T:System.Threading.Mutex" />
            native locking mechanisms.
            </summary>
      <remarks>
        <para>
            The <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> uses a <see cref="T:Gemstone.Threading.NamedSemaphore" /> to synchronize access to an inter-process shared resource.
            On POSIX systems, the <see cref="T:Gemstone.Threading.NamedSemaphore" /> exhibits kernel persistence, meaning instances will remain active beyond the lifespan of
            the creating process. The named semaphore must be explicitly removed by invoking <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ReleaseInterprocessResources" /> when the last
            reader-writer lock instance is no longer needed. Kernel persistence necessitates careful design consideration regarding process
            responsibility for invoking the <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ReleaseInterprocessResources" /> method. Since the common use case for named semaphores is across
            multiple applications, it is advisable for the last exiting process to handle the cleanup. In cases where an application may crash before
            calling the <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ReleaseInterprocessResources" /> method, the semaphore persists in the system, potentially leading to resource leakage.
            Implementations should include strategies to address and mitigate this risk.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> associated with the specified
            <paramref name="name" /> that identifies a source object needing concurrency locking.
            </summary>
      <param name="name">Identifying name of source object needing concurrency locking (e.g., a path and file name).</param>
      <param name="global">Determines if semaphore and mutex used by <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> should be marked as global; set value to <c>false</c> for local.</param>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> associated with the specified
            <paramref name="name" /> that identifies a source object needing concurrency locking.
            </summary>
      <param name="name">Identifying name of source object needing concurrency locking (e.g., a path and file name).</param>
      <param name="maximumConcurrentLocks">Maximum concurrent reader locks to allow.</param>
      <param name="global">Determines if semaphore and mutex used by <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> should be marked as global; set value to <c>false</c> for local.</param>
      <remarks>
            If more reader locks are requested than the <paramref name="maximumConcurrentLocks" />, excess reader locks will simply
            wait until a lock is available (i.e., one of the existing reads completes).
            </remarks>
    </member>
    <member name="F:Gemstone.Threading.InterprocessReaderWriterLock.DefaultMaximumConcurrentLocks">
      <summary>
            Default maximum concurrent locks allowed for <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" />.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> object.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterReadLock">
      <summary>
            Tries to enter the lock in read mode.
            </summary>
      <remarks>
            Upon successful acquisition of a read lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterReadLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterReadLock(System.Int32)" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterWriteLock">
      <summary>
            Tries to enter the lock in write mode.
            </summary>
      <remarks>
            Upon successful acquisition of a write lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterWriteLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterWriteLock(System.Int32)" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock">
      <summary>
            Exits read mode and returns the prior read lock count.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock</parameter>
          </include>
        </markup>
      </returns>
      <remarks>
            Upon successful acquisition of a read lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterReadLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterReadLock(System.Int32)" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock">
      <summary>
            Exits write mode.
            </summary>
      <remarks>
            Upon successful acquisition of a write lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterWriteLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterWriteLock(System.Int32)" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.Finalize">
      <summary>
            Releases the unmanaged resources before the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" /> object is reclaimed by <see cref="T:System.GC" />.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.InterprocessReaderWriterLock.MaximumConcurrentLocks">
      <summary>
            Gets the maximum concurrent reader locks allowed.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.ReleaseInterprocessResources">
      <summary>
            Releases inter-process resources used by the <see cref="T:Gemstone.Threading.InterprocessReaderWriterLock" />.
            </summary>
      <remarks>
            On POSIX systems, calling this method removes the named semaphore used by the reader-writer lock.
            The semaphore name is removed immediately and is destroyed once all other processes that have the
            semaphore open close it. Calling this method on Windows systems does nothing.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterReadLock(System.Int32)">
      <summary>
            Tries to enter the lock in read mode, with an optional time-out.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <returns>
        <c>true</c> if the calling thread entered read mode, otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
            Upon successful acquisition of a read lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitReadLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterReadLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterReadLock(System.Int32)" />.
            </para>
        <para>
            Note that this function may wait as long as 2 * <paramref name="millisecondsTimeout" /> since the function first waits for synchronous access
            to the semaphore, then waits again on an available semaphore slot.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterWriteLock(System.Int32)">
      <summary>
            Tries to enter the lock in write mode, with an optional time-out.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <returns>
        <c>true</c> if the calling thread entered write mode, otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
            Upon successful acquisition of a write lock, use the <c>finally</c> block of a <c>try/finally</c> statement to call <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" />.
            One <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.ExitWriteLock" /> should be called for each <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.EnterWriteLock" /> or <see cref="M:Gemstone.Threading.InterprocessReaderWriterLock.TryEnterWriteLock(System.Int32)" />.
            </para>
        <para>
            Note that this function may wait as long as 2 * <paramref name="millisecondsTimeout" /> since the function first waits for synchronous access
            to the semaphore, then waits again on an available semaphore slot.
            </para>
      </remarks>
    </member>
    <member name="T:Gemstone.Threading.NamedSemaphore">
      <summary>
            Represents a cross-platform, interprocess named semaphore, which limits the number of threads that can concurrently 
            access a resource or a pool of resources.
            </summary>
      <remarks>
        <para>
            A <see cref="T:Gemstone.Threading.NamedSemaphore" /> is a synchronization object that can be utilized across multiple processes.
            </para>
        <para>
            On POSIX systems, the <see cref="T:Gemstone.Threading.NamedSemaphore" /> exhibits kernel persistence, meaning instances will remain
            active beyond the lifespan of the creating process. Named semaphores must be explicitly removed by invoking 
            <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" /> when they are no longer needed. Kernel persistence necessitates careful design consideration
            regarding the responsibility for invoking <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />. Since the common use case for named semaphores is
            across multiple applications, it is advisable for the last exiting process to handle the cleanup. In cases where
            an application may crash before calling <see cref="M:Gemstone.Threading.NamedSemaphore.Unlink" />, the semaphore persists in the system, potentially
            leading to resource leakage. Implementations should include strategies to address and mitigate this risk.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Threading.NamedSemaphore" /> class, specifying the initial number of entries,
            the maximum number of concurrent entries, and the name of a system semaphore object.
            </summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <param name="name">
            The unique name identifying the semaphore. This name is case-sensitive. Use a backslash (\\) to specify a
            namespace, but avoid it elsewhere in the name. On Unix-based systems, the name should conform to valid file
            naming conventions, excluding slashes except for an optional namespace backslash. The name length is limited
            to 250 characters after any optional namespace.
            </param>
      <remarks>
            The <paramref name="name" /> may be prefixed with <c>Global\</c> or <c>Local\</c> to specify a namespace.
            When the Global namespace is specified, the synchronization object may be shared with any processes on the system.
            When the Local namespace is specified, which is also the default when no namespace is specified, the synchronization
            object may be shared with processes in the same session. On Windows, a session is a login session, and services
            typically run in a different non-interactive session. On Unix-like operating systems, each shell has its own session.
            Session-local synchronization objects may be appropriate for synchronizing between processes with a parent/child
            relationship where they all run in the same session.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.Threading.NamedSemaphore" /> class, specifying the initial number of entries,
            the maximum number of concurrent entries, the name of a system semaphore object, and specifying a variable that
            receives a value indicating whether a new system semaphore was created.
            </summary>
      <param name="initialCount">The initial number of requests for the semaphore that can be granted concurrently.</param>
      <param name="maximumCount">The maximum number of requests for the semaphore that can be granted concurrently.</param>
      <param name="name">
            The unique name identifying the semaphore. This name is case-sensitive. Use a backslash (\\) to specify a
            namespace, but avoid it elsewhere in the name. On Unix-based systems, the name should conform to valid file
            naming conventions, excluding slashes except for an optional namespace backslash. The name length is limited
            to 250 characters after any optional namespace.
            </param>
      <param name="createdNew">
            When method returns, contains <c>true</c> if the specified named system semaphore was created; otherwise,
            <c>false</c> if the semaphore already existed.
            </param>
      <remarks>
            The <paramref name="name" /> may be prefixed with <c>Global\</c> or <c>Local\</c> to specify a namespace.
            When the Global namespace is specified, the synchronization object may be shared with any processes on the system.
            When the Local namespace is specified, which is also the default when no namespace is specified, the synchronization
            object may be shared with processes in the same session. On Windows, a session is a login session, and services
            typically run in a different non-interactive session. On Unix-like operating systems, each shell has its own session.
            Session-local synchronization objects may be appropriate for synchronizing between processes with a parent/child
            relationship where they all run in the same session.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Close">
      <summary>
            Releases all resources held by the current <see cref="T:Gemstone.Threading.NamedSemaphore" />.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Dispose(System.Boolean)">
      <summary>
            When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:Gemstone.Threading.NamedSemaphore" />,
            and optionally releases the managed resources.
            </summary>
      <param name="explicitDisposing">
        <c>true</c> to release both managed and unmanaged resources; otherwise, <c>false</c> to release only
            unmanaged resources.
            </param>
    </member>
    <member name="P:Gemstone.Threading.NamedSemaphore.Name">
      <summary>
            Gets the name of the <see cref="T:Gemstone.Threading.NamedSemaphore" />.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.OpenExisting(System.String)">
      <summary>
            Opens an existing named semaphore.
            </summary>
      <param name="name">
            The unique name identifying the semaphore. This name is case-sensitive. Use a backslash (\\) to specify a
            namespace, but avoid it elsewhere in the name. On Unix-based systems, the name should conform to valid file
            naming conventions, excluding slashes except for an optional namespace backslash. The name length is limited
            to 250 characters after any optional namespace.
            </param>
      <returns>
            An object that represents the opened named semaphore.
            </returns>
      <remarks>
            The <paramref name="name" /> may be prefixed with <c>Global\</c> or <c>Local\</c> to specify a namespace.
            When the Global namespace is specified, the synchronization object may be shared with any processes on the system.
            When the Local namespace is specified, which is also the default when no namespace is specified, the synchronization
            object may be shared with processes in the same session. On Windows, a session is a login session, and services
            typically run in a different non-interactive session. On Unix-like operating systems, each shell has its own session.
            Session-local synchronization objects may be appropriate for synchronizing between processes with a parent/child
            relationship where they all run in the same session.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Release">
      <summary>
            Exits the semaphore and returns the previous count.
            </summary>
      <returns>The count on the semaphore before the method was called.</returns>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Release(System.Int32)">
      <summary>
            Exits the semaphore a specified number of times and returns the previous count.
            </summary>
      <param name="releaseCount">The number of times to exit the semaphore.</param>
      <returns>The count on the semaphore before the method was called.</returns>
    </member>
    <member name="P:Gemstone.Threading.NamedSemaphore.SafeWaitHandle">
      <summary>
            Gets or sets the native operating system handle.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.TryOpenExisting(System.String,Gemstone.Threading.NamedSemaphore@)">
      <summary>
            Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the
            operation succeeded.
            </summary>
      <param name="name">
            The unique name identifying the semaphore. This name is case-sensitive. Use a backslash (\\) to specify a
            namespace, but avoid it elsewhere in the name. On Unix-based systems, the name should conform to valid file
            naming conventions, excluding slashes except for an optional namespace backslash. The name length is limited
            to 250 characters after any optional namespace.
            </param>
      <param name="semaphore">
            When this method returns, contains a <see cref="T:Gemstone.Threading.NamedSemaphore" /> object that represents the named semaphore
            if the call succeeded, or <c>null</c> if the call failed. This parameter is treated as uninitialized.
            </param>
      <returns>
        <c>true</c> if the named semaphore was opened successfully; otherwise, <c>false</c>. In some cases,
            <c>false</c> may be returned for invalid names.
            </returns>
      <remarks>
            The <paramref name="name" /> may be prefixed with <c>Global\</c> or <c>Local\</c> to specify a namespace.
            When the Global namespace is specified, the synchronization object may be shared with any processes on the system.
            When the Local namespace is specified, which is also the default when no namespace is specified, the synchronization
            object may be shared with processes in the same session. On Windows, a session is a login session, and services
            typically run in a different non-interactive session. On Unix-like operating systems, each shell has its own session.
            Session-local synchronization objects may be appropriate for synchronizing between processes with a parent/child
            relationship where they all run in the same session.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Unlink">
      <summary>
            Removes a named semaphore.
            </summary>
      <remarks>
            On POSIX systems, calling this method removes the named semaphore referred to by <see cref="P:Gemstone.Threading.NamedSemaphore.Name" />.
            The semaphore name is removed immediately and is destroyed once all other processes that have the semaphore
            open close it. Calling this method on Windows systems does nothing.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.Unlink(System.String)">
      <summary>
            Removes a named semaphore.
            </summary>
      <param name="name">
            The unique name identifying the semaphore. This name is case-sensitive. Use a backslash (\\) to specify a
            namespace, but avoid it elsewhere in the name. On Unix-based systems, the name should conform to valid file
            naming conventions, excluding slashes except for an optional namespace backslash. The name length is limited
            to 250 characters after any optional namespace.
            </param>
      <remarks>
            On POSIX systems, calling this method removes the named semaphore referred to by <paramref name="name" />.
            The semaphore name is removed immediately and is destroyed once all other processes that have the semaphore
            open close it. Calling this method on Windows systems does nothing.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.WaitOne">
      <summary>
            Blocks the current thread until the current <see cref="T:Gemstone.Threading.NamedSemaphore" /> receives a signal.
            </summary>
      <returns>
        <c>true</c> if the current instance receives a signal. If the current instance is never signaled,
            <see cref="T:Gemstone.Threading.NamedSemaphore" /> never returns.
            </returns>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.WaitOne(System.Int32)">
      <summary>
            Blocks the current thread until the current instance receives a signal, using a 32-bit signed integer to
            specify the time interval in milliseconds.
            </summary>
      <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.
            </param>
      <returns>
        <c>true</c> if the current instance receives a signal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.WaitOne(System.Int32,System.Boolean)">
      <summary>
            Blocks the current thread until the current <see cref="T:Gemstone.Threading.NamedSemaphore" /> receives a signal, using a
            32-bit signed integer to specify the time interval and specifying whether to exit the synchronization
            domain before the wait.
            </summary>
      <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.
            </param>
      <param name="exitContext">
        <c>true</c> to exit the synchronization domain for the context before the wait (if in a synchronized context),
            and reacquire it afterward; otherwise, <c>false</c>.
            </param>
      <returns>
        <c>true</c> if the current instance receives a signal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.WaitOne(System.TimeSpan)">
      <summary>
            Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" />
            to specify the time interval.
            </summary>
      <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely.
            </param>
      <returns>
        <c>true</c> if the current instance receives a signal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Threading.NamedSemaphore.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>
            Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" />
            to specify the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
      <param name="timeout">
            A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" />
            that represents -1 milliseconds to wait indefinitely.
            </param>
      <param name="exitContext">
        <c>true</c> to exit the synchronization domain for the context before the wait (if in a synchronized context),
            and reacquire it afterward; otherwise, <c>false</c>.
            </param>
      <returns>
        <c>true</c> if the current instance receives a signal; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.Threading.Cancellation.CancellationToken">
      <summary>
            Represents a token that can be used to cancel an asynchronous operation.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CancellationToken.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Threading.Cancellation.CancellationToken</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CancellationToken.Cancel">
      <summary>
            Cancels the operation.
            </summary>
      <returns>
        <c>true</c> if the operation was cancelled; otherwise <c>false</c>.</returns>
    </member>
    <member name="E:Gemstone.Threading.Cancellation.CancellationToken.Cancelled">
      <summary>
            Event that will be raised when this <see cref="T:Gemstone.Threading.Cancellation.CancellationToken" /> is cancelled.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.Cancellation.CancellationToken.IsCancelled">
      <summary>
            Gets a value that indicates whether the operation has been cancelled.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CancellationToken.op_Implicit(Gemstone.Threading.Cancellation.CancellationToken)~System.Threading.CancellationToken">
      <summary>
            Implicitly converts a GSF cancellation token to an associated <see cref="T:System.Threading.CancellationToken" />.
            </summary>
      <param name="token">Existing GSF cancellation token that is converted to an associated <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.CancellationToken" /> based on an existing GSF cancellation token.</returns>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CancellationToken.op_Implicit(Gemstone.Threading.Cancellation.CancellationToken)~System.Threading.CancellationTokenSource">
      <summary>
            Implicitly converts a GSF cancellation token to an associated <see cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
      <param name="token">Existing GSF cancellation token that is converted to an associated <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <returns>A <see cref="T:Gemstone.Threading.Cancellation.CancellationToken" /> based on an existing GSF cancellation token.</returns>
    </member>
    <member name="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken">
      <summary>
            Represents a compatible implementation of the <see cref="T:Gemstone.Threading.Cancellation.ICancellationToken" /> interface
            that inter-operates with the <see cref="T:System.Threading.CancellationToken" /> and can be
            used to cancel an asynchronous operation.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.#ctor(Gemstone.Threading.Cancellation.CancellationToken)">
      <summary>
            Creates a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> based on an existing GSF cancellation token.
            </summary>
      <param name="token">Existing GSF token.</param>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.#ctor(System.Threading.CancellationToken)">
      <summary>
            Creates a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> based on an existing system cancellation token.
            </summary>
      <param name="token">Existing system token.</param>
      <remarks>
            A <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> created from an existing system cancellation token
            cannot be cancelled since the source for the provided token will not be available.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Creates a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> based on an existing system cancellation token source.
            </summary>
      <param name="source">Existing system cancellation token source.</param>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.Cancel">
      <summary>
            Cancels the operation.
            </summary>
      <returns>
        <c>true</c> if the operation was cancelled; otherwise <c>false</c>.</returns>
      <remarks>
            The token can only be cancelled if a <see cref="T:System.Threading.CancellationTokenSource" /> was provided.
            </remarks>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.CancellationTokenSource" /> not available, token cannot be cancelled.</exception>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.Finalize">
      <summary>
            Handle disposing of locally allocated resources, if any.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.GetToken">
      <summary>
            Gets a <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.
            </summary>
      <returns>A <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.</returns>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.GetTokenSource">
      <summary>
            Gets a <see cref="T:System.Threading.CancellationTokenSource" /> associated with this <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.
            </summary>
      <returns>A <see cref="T:System.Threading.CancellationTokenSource" /> associated with this <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.</returns>
      <remarks>
            This function will return <c>null</c> when the <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> was created
            from an existing system cancellation token and not its source or a GSF cancellation token.
            </remarks>
    </member>
    <member name="P:Gemstone.Threading.Cancellation.CompatibleCancellationToken.IsCancelled">
      <summary>
            Gets a value that indicates whether the operation has been cancelled.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.op_Implicit(Gemstone.Threading.Cancellation.CompatibleCancellationToken)~System.Threading.CancellationToken">
      <summary>
            Implicitly converts a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> to an associated <see cref="T:System.Threading.CancellationToken" />.
            </summary>
      <param name="token">Existing GSF cancellation token that is converted to an associated <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.CancellationToken" /> based on an existing GSF cancellation token.</returns>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.op_Implicit(Gemstone.Threading.Cancellation.CompatibleCancellationToken)~System.Threading.CancellationTokenSource">
      <summary>
            Implicitly converts a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> to an associated <see cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
      <param name="token">Existing GSF cancellation token that is converted to an associated <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <returns>A <see cref="T:Gemstone.Threading.Cancellation.CancellationToken" /> based on an existing GSF cancellation token.</returns>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.op_Implicit(System.Threading.CancellationToken)~Gemstone.Threading.Cancellation.CompatibleCancellationToken">
      <summary>
            Implicitly converts existing system cancellation token to a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.
            </summary>
      <param name="token">Existing system cancellation token that is converted to a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.</param>
      <returns>A <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> based on an existing system cancellation token.</returns>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.CompatibleCancellationToken.op_Implicit(System.Threading.CancellationTokenSource)~Gemstone.Threading.Cancellation.CompatibleCancellationToken">
      <summary>
            Implicitly converts existing system cancellation token source to a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.
            </summary>
      <param name="source">Existing system cancellation token source that is converted to a <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" />.</param>
      <returns>A <see cref="T:Gemstone.Threading.Cancellation.CompatibleCancellationToken" /> based on an existing system cancellation token source.</returns>
    </member>
    <member name="T:Gemstone.Threading.Cancellation.ICancellationToken">
      <summary>
            Represents a token that can be used to cancel an asynchronous operation.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.Cancellation.ICancellationToken.Cancel">
      <summary>
            Cancels the operation.
            </summary>
      <returns>
        <c>true</c> if the operation was cancelled; otherwise <c>false</c>.</returns>
    </member>
    <member name="P:Gemstone.Threading.Cancellation.ICancellationToken.IsCancelled">
      <summary>
            Gets a value that indicates whether the operation has been cancelled.
            </summary>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation">
      <summary>
            Represents a short-running synchronized operation that cannot run while it is already
            in progress. Async operations will execute on the thread-pool after the specified
            <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            </summary>
      <remarks>
            By default, the action performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />
            is executed on the <see cref="T:System.Threading.ThreadPool" /> when running the operation asynchronously.
            When the operation is set to pending, the action is executed in an asynchronous loop on
            the thread pool until all pending operations have been completed. Since the action is
            executed on the thread pool, it is best if it can be executed quickly, without
            blocking the thread or putting it to sleep. If completion of the operation is
            critical, such as when saving data to a file, this type of operation should not
            be used since thread pool threads are background threads and will not prevent the
            program from ending before the operation is complete.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="F:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.DefaultDelay">
      <summary>
            Defines the default value for the <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> property.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay">
      <summary>
            Gets or sets the amount of time to wait before execution, in milliseconds,
            for any asynchronous calls. Zero value will execute immediately.
            </summary>
      <remarks>
            Non asynchronous calls will not be delayed.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action on a separate thread after the specified <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" />.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" /> with <see cref="F:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.DefaultDelay" /> of 1000 milliseconds.</returns>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Run(System.Boolean)">
      <summary>
            Executes the action on another thread after the specified <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> in milliseconds or marks
            the operation as pending if the operation is already running. Method same as <see cref="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.RunAsync" /> for
            <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </summary>
      <param name="runPendingSynchronously">
            Defines synchronization mode for running any pending operation; must be <c>false</c> for
            <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </param>
      <remarks>
        <para>
            For <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />, actions will always run on another thread so this method is
            hidden from intellisense.
            </para>
        <para>
            When the operation is marked as pending, it will run again after the operation that is currently running
            has completed. This is useful if an update has invalidated the operation that is currently running and
            will therefore need to be run again.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="runPendingSynchronously" /> must be <c>false</c> for <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </exception>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.RunAsync">
      <summary>
            Executes the action on another thread after the specified <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> in milliseconds or marks
            the operation as pending if the operation is already running
            </summary>
      <remarks>
            When the operation is marked as pending, operation will run again after currently running operation has
            completed. This is useful if an update has invalidated the operation that is currently running and will
            therefore need to be run again.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on another thread after the specified <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            Does nothing if the operation is already running. Method same as <see cref="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.TryRunAsync" /> for
            <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </summary>
      <param name="runPendingSynchronously">
            Defines synchronization mode for running any pending operation; must be <c>false</c> for
            <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </param>
      <remarks>
            For <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />, actions will always run on another thread so this method is
            hidden from intellisense.
            </remarks>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="runPendingSynchronously" /> must be <c>false</c> for <see cref="T:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation" />.
            </exception>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread after the specified <see cref="P:Gemstone.Threading.SynchronizedOperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation">
      <summary>
            Represents an operation that cannot run while it is already in progress.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.CancellationToken">
      <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken" /> to use for canceling actions.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.IsPending">
      <summary>
            Gets flag indicating if the synchronized operation has an additional operation that is pending
            execution after the currently running action has completed.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.IsRunning">
      <summary>
            Gets flag indicating if the synchronized operation is currently executing its action.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.Run(System.Boolean)">
      <summary>
            Executes the action on current thread or marks the operation as pending if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
      <remarks>
        <para>
            When the operation is marked as pending, operation will run again after currently running operation has
            completed. This is useful if an update has invalidated the operation that is currently running and will
            therefore need to be run again.
            </para>
        <para>
            When <paramref name="runPendingSynchronously" /> is <c>true</c>, this method will not guarantee that control
            will be returned to the thread that called it; if other threads continuously mark the operation as pending,
            this thread will continue to run the operation indefinitely on the calling thread.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.RunAsync">
      <summary>
            Executes the action on another thread or marks the operation as pending if the operation is already running.
            </summary>
      <remarks>
            When the operation is marked as pending, it will run again after the operation that is currently running
            has completed. This is useful if an update has invalidated the operation that is currently running and
            will therefore need to be run again.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on current thread. Does nothing if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
      <remarks>
            When <paramref name="runPendingSynchronously" /> is <c>true</c>, this method will not guarantee that control
            will be returned to the thread that called it; if other threads continuously mark the operation as pending,
            this thread will continue to run the operation indefinitely on the calling thread.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread. Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation">
      <summary>
            Represents a long-running synchronized operation that cannot run while it is already in progress.
            </summary>
      <remarks>
            The action performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> is executed on
            its own dedicated thread when running the operation in the foreground asynchronously.
            When running on its own thread, the action is executed in a tight loop until all
            pending operations have been completed. This type of synchronized operation should
            be preferred if operations may take a long time, block the thread, or put it to sleep.
            It is also recommended to prefer this type of operation if the speed of the operation
            is not critical or if completion of the operation is critical, such as when saving data
            to a file.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The cancellable action to be performed if an exception is thrown from the action.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action on a separate thread.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" />.</returns>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation.IsBackground">
      <summary>
            Gets or sets whether the thread executing the action is a background thread.
            </summary>
      <remarks>
            This defaults to <c>false</c>, be aware that foreground thread will prevent shutdown
            while task is running. If a task keeps getting marked as pending, application will not
            shut down; consider a cancellable action for <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" />
            instances that use a foreground thread.
            </remarks>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation">
      <summary>
            Represents a short-running synchronized operation that cannot run while it is already in progress.
            </summary>
      <remarks>
            By default, the action performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" />
            is executed on the <see cref="T:System.Threading.ThreadPool" /> when running the operation asynchronously.
            When the operation is set to pending, the action is executed in an asynchronous loop
            on the thread pool until all pending operations have been completed. Since the action
            is executed on the thread pool, it is best if it can be executed quickly, without
            blocking the thread or putting it to sleep. If completion of the operation is
            critical, such as when saving data to a file, this type of operation should not
            be used since thread pool threads are background threads and will not prevent the
            program from ending before the operation is complete.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action in an asynchronous loop on
            the thread pool, as long as the operation is pending.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" />.</returns>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase">
      <summary>
            Base class for operations that cannot run while they is already in progress.
            </summary>
      <remarks>
        <para>
            This class handles the synchronization between the methods defined in the <see cref="T:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation" />
            interface. Implementers should only need to implement the <see cref="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.ExecuteActionAsync" /> method to provide a
            mechanism for executing the action on a separate thread.
            </para>
        <para>
            If subclass implementations get constructed without an exception handler, applications should attach to the static
            <see cref="E:Gemstone.LibraryEvents.SuppressedException" /> event so that any unhandled exceptions can be exposed to a log.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <remarks>
            Cancellable synchronized operation is useful in cases where actions should be terminated
            during dispose and/or shutdown operations.
            </remarks>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.CancellationToken">
      <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken" /> to use for cancelling actions.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.ExecuteAction">
      <summary>
            Executes the action once on the current thread.
            </summary>
      <returns>
        <c>true</c> if the action was pending and needs to run again; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.ExecuteActionAsync">
      <summary>
             Executes the action on a separate thread.
             </summary>
      <remarks>
             Implementers should call <see cref="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.ExecuteAction" /> on a separate thread and check the return value.
             If it returns true, that means it needs to run again. The following is a sample implementation using
             a regular dedicated thread:
             <code>
             protected override void ExecuteActionAsync()
             {
                 Thread actionThread = new Thread(() =&gt;
                 {
                     while (ExecuteAction())
                     {
                     }
                 });
            
                 actionThread.Start();
             }
             </code></remarks>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.IsPending">
      <summary>
            Gets flag indicating if the synchronized operation has an additional operation that is pending
            execution after the currently running action has completed.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.IsRunning">
      <summary>
            Gets flag indicating if the synchronized operation is currently executing its action.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.ProcessException(System.Exception)">
      <summary>
            Processes an exception thrown by an operation.
            </summary>
      <param name="ex">
        <see cref="T:System.Exception" /> to be processed.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.Run(System.Boolean)">
      <summary>
            Executes the action on current thread or marks the operation as pending if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
      <remarks>
        <para>
            When the operation is marked as pending, operation will run again after currently running operation has
            completed. This is useful if an update has invalidated the operation that is currently running and will
            therefore need to be run again.
            </para>
        <para>
            When <paramref name="runPendingSynchronously" /> is <c>true</c>, this method will not guarantee that control
            will be returned to the thread that called it; if other threads continuously mark the operation as pending,
            this thread will continue to run the operation indefinitely on the calling thread.
            </para>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.RunAsync">
      <summary>
            Executes the action on another thread or marks the operation as pending if the operation is already running.
            </summary>
      <remarks>
            When the operation is marked as pending, operation will run again after currently running operation has
            completed. This is useful if an update has invalidated the operation that is currently running and will
            therefore need to be run again.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on current thread. Does nothing if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
      <remarks>
            When <paramref name="runPendingSynchronously" /> is <c>true</c>, this method will not guarantee that control
            will be returned to the thread that called it; if other threads continuously mark the operation as pending,
            this thread will continue to run the operation indefinitely on the calling thread.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationBase.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread. Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationFactory">
      <summary>
            Factory method for creating synchronized operations.
            </summary>
      <param name="action">The action to be synchronized by the operation.</param>
      <returns>The operation that synchronizes the given action.</returns>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationType">
      <summary>
            Represents the available types of synchronized operations.
            </summary>
    </member>
    <member name="F:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationType.Short">
      <summary>
        <see cref="T:Gemstone.Threading.SynchronizedOperations.ShortSynchronizedOperation" />
      </summary>
    </member>
    <member name="F:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationType.Long">
      <summary>
        <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" />
      </summary>
    </member>
    <member name="F:Gemstone.Threading.SynchronizedOperations.SynchronizedOperationType.LongBackground">
      <summary>
        <see cref="T:Gemstone.Threading.SynchronizedOperations.LongSynchronizedOperation" /> with IsBackground set to <c>true</c></summary>
    </member>
    <member name="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation">
      <summary>
            Represents a task-based synchronized operation
            that cannot run while it is already in progress.
            </summary>
      <remarks>
        <para>
            The action performed by the <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> is executed using
            <see cref="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />. Pending actions run when the task returned by the
            asynchronous action is completed. This synchronized operation only supports the async
            methods on the <see cref="T:Gemstone.Threading.SynchronizedOperations.ISynchronizedOperation" /> interface because the async action
            cannot be executed synchronously.
            </para>
        <para>
            The following example shows how to use <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> to
            implement a notifier that receives notification requests ad-hoc but sends notifications
            no more than once every 15 seconds.
            </para>
        <code>
            public ExampleClass() =&gt;
                SynchronizedOperation = new TaskSynchronizedOperation(NotifyAsync);
                
            public void SendNotification() =&gt;
                SynchronizedOperation.RunOnceAsync();
                
            private async Task NotifyAsync()
            {
                Notify();
                await Task.Delay(15000);
            }
            </code>
      </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.#ctor(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> class.
            </summary>
      <param name="asyncAction">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.#ctor(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> class.
            </summary>
      <param name="asyncAction">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> class.
            </summary>
      <param name="asyncAction">The action to be performed during this operation.</param>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation" /> class.
            </summary>
      <param name="asyncAction">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.CancellationToken">
      <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken" /> to use for canceling actions.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.IsPending">
      <summary>
            Gets a value to indicate whether the synchronized operation
            has an additional operation that is pending execution after
            the currently running action has completed.
            </summary>
    </member>
    <member name="P:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.IsRunning">
      <summary>
            Gets a value to indicate whether the synchronized
            operation is currently executing its action.
            </summary>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.RunAsync">
      <summary>
            Executes the action on another thread or marks the
            operation as pending if the operation is already running.
            </summary>
      <remarks>
            When the operation is marked as pending, it will run again after the
            operation that is currently running has completed. This is useful if
            an update has invalidated the operation that is currently running and
            will therefore need to be run again.
            </remarks>
    </member>
    <member name="M:Gemstone.Threading.SynchronizedOperations.TaskSynchronizedOperation.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread.
            Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:Gemstone.TimeSpanExtensions.TimeSpanExtensions">
      <summary>
            Extends the TimeSpan Class
            </summary>
    </member>
    <member name="M:Gemstone.TimeSpanExtensions.TimeSpanExtensions.ToElapsedTimeString(System.TimeSpan,System.Int32,System.String[],System.Double)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> to process.</param>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
                Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
        <para>
            Set <paramref name="secondPrecision" /> to -1 to suppress seconds display, this will
            force minimum resolution of time display to minutes.
            </para>
        <para>
          <paramref name="timeNames" /> array needs one string entry for each of the following names:<br />
            " year", " years", " day", " days", " hour", " hours", " minute", " minutes", " second", " seconds", "less than ".
            </para>
        <example>
          <code>
              DateTime g_start = DateTime.UtcNow;
              DateTime EndTime = DateTime.UtcNow;
              TimeSpan duration = EndTime.Subtract(g_start);
              Console.WriteLine("Elapsed Time = " + duration.ToElapsedTimeString());
            </code>
        </example>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="T:Gemstone.TypeExtensions.TypeExtensions">
      <summary>
            Extensions to all <see cref="T:System.Type" /> objects.
            </summary>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.GetFriendlyClassName(System.Type)">
      <summary>
            Gets the friendly class name of the provided type, trimming generic parameters.
            </summary>
      <param name="type">Type to get friendly class name for.</param>
      <returns>Friendly class name of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="type" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.GetReflectedTypeName(System.Type,System.Boolean,System.Boolean)">
      <summary>
            Gets a C#-compatible proper type name, resolving generic type names using reflection with no backticks (`), for the specified <paramref name="type" />.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> whose name is to be resolved.</param>
      <param name="useNativeTypeNames">Flag that indicates if native C# type names should be used, when possible.</param>
      <param name="includeNamespaces">Flag that indicates if namespaces should be included in the type name.</param>
      <returns>
            A C#-compatible proper type name, resolving generic type names using reflection with no backticks (`), for the specified <paramref name="type" />.
            </returns>
      <remarks>
            This method will return a C#-compatible proper type name, resolving generic type names using reflection, which creates a valid,
            usable type name versus what <see cref="P:System.Type.FullName" /> returns. For example, <see cref="P:System.Type.FullName" /> will return something like:
            <c>System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]</c>
            with a backtick (`) to indicate a generic type and noisy assembly info. Even <c>Type.Name</c> returns <c>List`1</c> with a backtick (`). For the
            same type, this method would instead return: <c>System.Collections.Generic.List&lt;System.String&gt;</c> which is a valid, usable C# type name.
            You can also set the <paramref name="includeNamespaces" /> parameter to <c>false</c> to remove namespaces from the type name, which yields:
            <c>List&lt;String&gt;</c> for the same example.
            </remarks>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.GetRootType(System.Type)">
      <summary>
            Gets the root type in the inheritance hierarchy from which the specified <paramref name="type" /> inherits.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> whose root type is to be found.</param>
      <returns>The root type in the inheritance hierarchy from which the specified <paramref name="type" /> inherits.</returns>
      <remarks>
            Unless input <paramref name="type" /> is <see cref="T:System.Object" /> or <see cref="T:System.MarshalByRefObject" />, the returned type will never 
            be <see cref="T:System.Object" /> or <see cref="T:System.MarshalByRefObject" />, even though all types ultimately inherit from either one of them.
            </remarks>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.IsNumeric(System.Type)">
      <summary>
            Determines if the specified type is a native structure that represents a numeric value.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> being tested.</param>
      <returns>
        <c>true</c> if the specified type is a native structure that represents a numeric value.</returns>
      <remarks>
            For this method a boolean value is not considered numeric even though it can be thought of as a bit.
            This expression returns <c>true</c> if the type is one of the following:<br /><br />
                SByte, Byte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal
            </remarks>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type)">
      <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.Boolean)">
      <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.String)">
      <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory" /> that implement 
            the specified <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory" /> that implement 
            the specified <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
      <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
      <param name="validateReferences">True to validate references of loaded assemblies before attempting to instantiate types; false otherwise.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="T:Gemstone.Units.Angle">
      <summary>
            Represents an angle, in radians, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing an angle in radians; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other angle representations, specifically
            degrees, grads (a.k.a., grade, gradian and gon), arcminutes (a.k.a., minute of arc or MOA),
            arcseconds (a.k.a., second of arc) and angular mil (a.k.a., mil).
            <example>
            This example converts degrees to grads:
            <code>
            public double GetGrads(double degrees)
            {
                return Angle.FromDegrees(degrees).ToGrads();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Angle.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" />.
            </summary>
      <param name="value">New angle value in radians.</param>
    </member>
    <member name="M:Gemstone.Units.Angle.CompareTo(Gemstone.Units.Angle)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Angle" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:Gemstone.Units.Angle" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Angle" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Angle.ConvertFrom(System.Double,Gemstone.Units.AngleUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Angle" /> in radians.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ConvertTo(Gemstone.Units.AngleUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Angle" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Angle" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.Equals(Gemstone.Units.Angle)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Angle" /> value.
            </summary>
      <param name="obj">An <see cref="T:Gemstone.Units.Angle" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Angle" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.FromAngularMil(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" /> value from the specified <paramref name="value" /> in angular mil.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Angle" /> value in angular mil.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> object from the specified <paramref name="value" /> in angular mil.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.FromArcMinutes(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" /> value from the specified <paramref name="value" /> in arcminutes.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Angle" /> value in arcminutes.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> object from the specified <paramref name="value" /> in arcminutes.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.FromArcSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" /> value from the specified <paramref name="value" /> in arcseconds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Angle" /> value in arcseconds.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> object from the specified <paramref name="value" /> in arcseconds.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.FromDegrees(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" /> value from the specified <paramref name="value" /> in degrees.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Angle" /> value in degrees.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> object from the specified <paramref name="value" /> in degrees.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.FromGrads(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Angle" /> value from the specified <paramref name="value" /> in grads.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Angle" /> value in grads.</param>
      <returns>New <see cref="T:Gemstone.Units.Angle" /> object from the specified <paramref name="value" /> in grads.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Angle.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Angle" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Angle.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Angle" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Addition(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Division(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Equality(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Exponent(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_GreaterThan(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_GreaterThanOrEqual(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Implicit(Gemstone.Units.Angle)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Angle" />, represented in radians, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">An <see cref="T:Gemstone.Units.Angle" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Implicit(System.Double)~Gemstone.Units.Angle">
      <summary>
            Implicitly converts value, represented in radians, to an <see cref="T:Gemstone.Units.Angle" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Inequality(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_LessThan(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_LessThanOrEqual(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the operation result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Modulus(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Multiply(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.op_Subtraction(Gemstone.Units.Angle,Gemstone.Units.Angle)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Angle" /> as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Angle" /> as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Angle" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            An <see cref="T:Gemstone.Units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Angle.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Angle.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Angle" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Angle" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Angle.ToAngularMil">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Angle" /> value in angular mil.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Angle" /> in angular mil.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToArcMinutes">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Angle" /> value in arcminutes.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Angle" /> in arcminutes.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToArcSeconds">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Angle" /> value in arcseconds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Angle" /> in arcseconds.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToDegrees">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Angle" /> value in degrees.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Angle" /> in degrees.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToGrads">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Angle" /> value in grads.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Angle" /> in grads.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Angle.TryParse(System.String,Gemstone.Units.Angle@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Angle" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Angle" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Angle@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Angle" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Angle" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Angle.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Angle.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.AngleConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Angle" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Angle" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.AngleConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.AngleConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.AngleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.AngleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.AngleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.AngleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.AngleUnit">
      <summary>
            Represents the units available for an <see cref="T:Gemstone.Units.Angle" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.Radians">
      <summary>
            Radian angle units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.Degrees">
      <summary>
            Degree angle units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.Grads">
      <summary>
            Grad angle units, a.k.a., grade, gradian and gon.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.ArcMinutes">
      <summary>
            ArcMinute angle units, a.k.a., minute of arc or MOA.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.ArcSeconds">
      <summary>
            ArcSecond angle units, a.k.a., second of arc.
            </summary>
    </member>
    <member name="F:Gemstone.Units.AngleUnit.AngularMil">
      <summary>
            AngularMil angle units, a.k.a., mil.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Charge">
      <summary>
            Represents an electric charge measurement, in coulombs (i.e., ampere-seconds), as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a charge in coulombs; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other charge representations, specifically
            ampere-hours, abcoulomb (a.k.a., an electromagnetic unit), statcoulomb (a.k.a., electrostatic unit or franklin), atomic unit of charge
            and faraday. Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert charge, in coulombs, to kilocoulombs:
            <code>
            public double GetKilocoulombs(Charge coulombs)
            {
                return coulombs / SI.Kilo;
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Charge.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" />.
            </summary>
      <param name="value">New charge value in coulombs.</param>
    </member>
    <member name="M:Gemstone.Units.Charge.CompareTo(Gemstone.Units.Charge)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Charge" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Charge" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Charge" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Charge.ConvertFrom(System.Double,Gemstone.Units.ChargeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Charge" /> in coulombs.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ConvertTo(Gemstone.Units.ChargeUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Charge" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Charge" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.Equals(Gemstone.Units.Charge)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Charge" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Charge" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Charge" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.FromAbcoulombs(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" /> value from the specified <paramref name="value" /> in abcoulombs.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Charge" /> value in abcoulombs.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> object from the specified <paramref name="value" /> in abcoulombs.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.FromAmpereHours(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" /> value from the specified <paramref name="value" /> in ampere-hours.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Charge" /> value in ampere-hours.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> object from the specified <paramref name="value" /> in ampere-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.FromAtomicUnitsOfCharge(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" /> value from the specified <paramref name="value" /> in atomic units of charge.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Charge" /> value in atomic units of charge.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> object from the specified <paramref name="value" /> in atomic units of charge.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.FromFaraday(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" /> value from the specified <paramref name="value" /> in faraday.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Charge" /> value in faraday.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> object from the specified <paramref name="value" /> in faraday.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.FromStatcoulombs(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Charge" /> value from the specified <paramref name="value" /> in statcoulombs.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Charge" /> value in statcoulombs.</param>
      <returns>New <see cref="T:Gemstone.Units.Charge" /> object from the specified <paramref name="value" /> in statcoulombs.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Charge.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Charge" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Charge.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Charge" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Addition(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Division(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Equality(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Exponent(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns result of first value raised to charge of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_GreaterThan(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_GreaterThanOrEqual(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Implicit(Gemstone.Units.Charge)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Charge" />, represented in coulombs, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Charge" /> value.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Implicit(System.Double)~Gemstone.Units.Charge">
      <summary>
            Implicitly converts value, represented in coulombs, to a <see cref="T:Gemstone.Units.Charge" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Inequality(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_LessThan(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_LessThanOrEqual(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Modulus(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Multiply(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.op_Subtraction(Gemstone.Units.Charge,Gemstone.Units.Charge)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Charge" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Charge" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Charge" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Charge.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Charge.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Charge.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Charge" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Charge" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Charge.ToAbcoulombs">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Charge" /> value in abcoulombs.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Charge" /> in abcoulombs.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToAmpereHours">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in ampere-hours.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in ampere-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToAtomicUnitsOfCharge">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Charge" /> value in atomic units of charge.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Charge" /> in atomic units of charge.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToFaraday">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Charge" /> value in faraday.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Charge" /> in faraday.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToStatcoulombs">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Charge" /> value in statcoulombs.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Charge" /> in statcoulombs.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Charge.TryParse(System.String,Gemstone.Units.Charge@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Charge" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Charge" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Charge.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Charge@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Charge" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Charge" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Charge.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Charge.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.ChargeConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Charge" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Charge" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.ChargeConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.ChargeConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.ChargeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.ChargeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.ChargeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.ChargeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.ChargeUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Charge" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.Coulombs">
      <summary>
            Coulomb charge units, i.e., ampere-seconds.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.AmpereHours">
      <summary>
            AmpereHour charge units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.Abcoulombs">
      <summary>
            Abcoulomb charge units, a.k.a., an electromagnetic unit.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.Statcoulombs">
      <summary>
            Statcoulomb charge units, a.k.a., electrostatic unit or franklin.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.AtomicUnitsOfCharge">
      <summary>
            Atomic charge units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.ChargeUnit.Faraday">
      <summary>
            Faraday charge units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Current">
      <summary>
            Represents an electric current measurement, in amperes, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a current in amperes; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other current representations, specifically
            abampere (a.k.a., an electromagnetic unit) and statampere (a.k.a., esu per second). Metric conversions are handled
            simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert current, in amperes, to kiloamperes:
            <code>
            public double GetKiloamperes(Current amperes)
            {
                return amperes / SI.Kilo;
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Current.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Current" />.
            </summary>
      <param name="value">New current value in amperes.</param>
    </member>
    <member name="M:Gemstone.Units.Current.CompareTo(Gemstone.Units.Current)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Current" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Current" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Current" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Current.ConvertFrom(System.Double,Gemstone.Units.CurrentUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Current" /> in amperes.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Current" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.ConvertTo(Gemstone.Units.CurrentUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Current" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Current" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.Equals(Gemstone.Units.Current)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Current" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Current" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Current" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.FromAbamperes(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Current" /> value from the specified <paramref name="value" /> in abamperes.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Current" /> value in abamperes.</param>
      <returns>New <see cref="T:Gemstone.Units.Current" /> object from the specified <paramref name="value" /> in abamperes.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.FromStatamperes(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Current" /> value from the specified <paramref name="value" /> in statamperes.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Current" /> value in statamperes.</param>
      <returns>New <see cref="T:Gemstone.Units.Current" /> object from the specified <paramref name="value" /> in statamperes.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Current.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Current" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Current.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Current" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Current.op_Addition(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Division(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Equality(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Exponent(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns result of first value raised to current of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_GreaterThan(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_GreaterThanOrEqual(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Implicit(Gemstone.Units.Current)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Current" />, represented in amperes, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Current" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Implicit(System.Double)~Gemstone.Units.Current">
      <summary>
            Implicitly converts value, represented in amperes, to a <see cref="T:Gemstone.Units.Current" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Inequality(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_LessThan(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_LessThanOrEqual(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Modulus(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Multiply(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.op_Subtraction(Gemstone.Units.Current,Gemstone.Units.Current)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Current" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Current" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Current" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or greater than <see cref="F:Gemstone.Units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Current.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or greater than <see cref="F:Gemstone.Units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Current.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or greater than <see cref="F:Gemstone.Units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Current.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Current" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Current" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or greater than <see cref="F:Gemstone.Units.Current.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Current.ToAbamperes">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Current" /> value in abamperes.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Current" /> in abamperes.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.ToStatamperes">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Current" /> value in statamperes.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Current" /> in statamperes.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Current.TryParse(System.String,Gemstone.Units.Current@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Current" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Current" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or greater than <see cref="F:Gemstone.Units.Current.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Current.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Current@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Current" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Current" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Current.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Current.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.CurrentConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Current" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Current" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.CurrentConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.CurrentConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.CurrentConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.CurrentConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.CurrentConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.CurrentConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.CurrentUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Current" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.CurrentUnit.Amperes">
      <summary>
            Ampere current units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.CurrentUnit.Abamperes">
      <summary>
            Abampere current units, a.k.a., an electromagnetic unit.
            </summary>
    </member>
    <member name="F:Gemstone.Units.CurrentUnit.Statamperes">
      <summary>
            Statampere current units, a.k.a., esu per second.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Energy">
      <summary>
            Represents an energy measurement, in joules (i.e., watt-seconds), as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing an energy in joules; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other energy representations, specifically
            watt-hours, BTU, Celsius heat unit, liter-atmosphere, calorie, horsepower-hour, barrel of oil and ton of coal.
            Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert energy in joules to megajoules:
            <code>
            public double GetMegajoules(Energy joules)
            {
                return joules / SI.Mega;
            }
            </code>
            This example converts megajoules to kilowatt-hours:
            <code>
            public double GetKilowattHours(double megajoules)
            {
                return (new Energy(megajoules * SI.Mega)).ToWattHours() / SI.Kilo;
            }
            </code>
            This example converts kilowatt-hours to megawatt-hours:
            <code>
            public double GetMegawattHours(double kilowattHours)
            {
                return (kilowattHours * SI.Kilo) / SI.Mega;
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Energy.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" />.
            </summary>
      <param name="value">New energy value in joules.</param>
    </member>
    <member name="M:Gemstone.Units.Energy.CompareTo(Gemstone.Units.Energy)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Energy" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:Gemstone.Units.Energy" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Energy" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Energy.ConvertFrom(System.Double,Gemstone.Units.EnergyUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Energy" /> in joules.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ConvertTo(Gemstone.Units.EnergyUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Energy" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Energy" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.Equals(Gemstone.Units.Energy)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Energy" /> value.
            </summary>
      <param name="obj">An <see cref="T:Gemstone.Units.Energy" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Energy" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromBarrelsOfOil(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in equivalent barrels of oil.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in equivalent barrels of oil.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in equivalent barrels of oil.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromBTU(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in BTU (International Table).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in BTU.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in BTU.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromCalories(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in calories (International Table).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in calories.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in calories.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromCelsiusHeatUnits(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in Celsius heat units (International Table).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in Celsius heat units.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in Celsius heat units.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromHorsepowerHours(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in horsepower-hours.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in horsepower-hours.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in horsepower-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromLitersAtmosphere(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in liters-atmosphere.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in liters-atmosphere.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in liters-atmosphere.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromTonOfCoal(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in equivalent tons of coal.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in equivalent tons of coal.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in equivalent tons of coal.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.FromWattHours(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Energy" /> value from the specified <paramref name="value" /> in watt-hours.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Energy" /> value in watt-hours.</param>
      <returns>New <see cref="T:Gemstone.Units.Energy" /> object from the specified <paramref name="value" /> in watt-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Energy.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Energy" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Energy.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Energy" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Addition(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Division(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Equality(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Exponent(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_GreaterThan(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_GreaterThanOrEqual(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Implicit(Gemstone.Units.Energy)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Energy" />, represented in joules, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">An <see cref="T:Gemstone.Units.Energy" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Implicit(System.Double)~Gemstone.Units.Energy">
      <summary>
            Implicitly converts value, represented in joules, to an <see cref="T:Gemstone.Units.Energy" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Inequality(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_LessThan(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_LessThanOrEqual(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Modulus(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Multiply(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.op_Subtraction(Gemstone.Units.Energy,Gemstone.Units.Energy)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">An <see cref="T:Gemstone.Units.Energy" /> object as the left hand operand.</param>
      <param name="value2">An <see cref="T:Gemstone.Units.Energy" /> object as the right hand operand.</param>
      <returns>An <see cref="T:Gemstone.Units.Energy" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            An <see cref="T:Gemstone.Units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Energy.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Energy.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Energy.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Energy" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            An <see cref="T:Gemstone.Units.Energy" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Energy.ToBarrelsOfOil">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in equivalent barrels of oil.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in equivalent barrels of oil.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToBTU">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in BTU (International Table).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in BTU.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToCalories">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in calories (International Table).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in calories.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToCelsiusHeatUnits">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in Celsius heat units (International Table).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in Celsius heat units.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToCoulombs(Gemstone.Units.Voltage)">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Charge" /> value in coulombs given the specified <paramref name="volts" />.
            </summary>
      <param name="volts">Source <see cref="T:Gemstone.Units.Voltage" /> used to calculate <see cref="T:Gemstone.Units.Charge" /> value.</param>
      <returns>
        <see cref="T:Gemstone.Units.Charge" /> value in coulombs given the specified <paramref name="volts" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToHorsepowerHours">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in horsepower-hours.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in horsepower-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToLitersAtmosphere">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in liters-atmosphere.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in liters-atmosphere.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToTonsOfCoal">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in equivalent tons of coal.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in equivalent tons of coal.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.ToWattHours">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Energy" /> value in watt-hours.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Energy" /> in watt-hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.TryParse(System.String,Gemstone.Units.Energy@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Energy" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Energy" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Energy.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Energy@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Energy" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Energy" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Energy.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Energy.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.EnergyConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Energy" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Energy" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.EnergyConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.EnergyConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.EnergyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.EnergyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.EnergyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.EnergyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.EnergyUnit">
      <summary>
            Represents the units available for an <see cref="T:Gemstone.Units.Energy" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.Joules">
      <summary>
            Joule energy units, i.e., watt-seconds.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.WattHours">
      <summary>
            WattHour energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.BTU">
      <summary>
            BTU energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.CelsiusHeatUnits">
      <summary>
            Celsius heat energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.LitersAtmosphere">
      <summary>
            Liters atmosphere energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.Calories">
      <summary>
            Calorie energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.HorsepowerHours">
      <summary>
            Horsepower-hour energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.BarrelsOfOil">
      <summary>
            Barrels of oil energy units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.EnergyUnit.TonsOfCoal">
      <summary>
            Tons of coal energy units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Length">
      <summary>
            Represents a length measurement, in meters, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a length in meters; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other length representations, specifically
            inches, feet, yards, miles, U.S. survey feet, U.S. survey miles, light-seconds, and nautical miles.
            Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert length in meters to kilometers:
            <code>
            public double GetKilometers(Length meters)
            {
                return meters / SI.Kilo;
            }
            </code>
            This example converts feet to inches:
            <code>
            public double GetFeet(double inches)
            {
                return Length.FromInches(inches).ToFeet();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Length.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" />.
            </summary>
      <param name="value">New length value in meters.</param>
    </member>
    <member name="M:Gemstone.Units.Length.CompareTo(Gemstone.Units.Length)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Length" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Length" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Length" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Length.ConvertFrom(System.Double,Gemstone.Units.LengthUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Length" /> in meters.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ConvertTo(Gemstone.Units.LengthUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Length" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Length" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.Equals(Gemstone.Units.Length)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Length" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Length" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Length" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in feet.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in feet.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromInches(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in inches.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in inches.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in inches.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromLightSeconds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in light-seconds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in light-seconds.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in light-seconds.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in miles.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in miles.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromNauticalMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in nautical miles.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in nautical miles.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in nautical miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromUSSurveyFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in US survey feet.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in US survey feet.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in US survey feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromUSSurveyMiles(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in US survey miles.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in US survey miles.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in US survey miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.FromYards(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Length" /> value from the specified <paramref name="value" /> in yards.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Length" /> value in yards.</param>
      <returns>New <see cref="T:Gemstone.Units.Length" /> object from the specified <paramref name="value" /> in yards.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Length.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Length" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Length.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Length" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Length.op_Addition(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Division(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Equality(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Exponent(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_GreaterThan(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_GreaterThanOrEqual(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Implicit(Gemstone.Units.Length)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Length" />, represented in meters, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Length" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Implicit(System.Double)~Gemstone.Units.Length">
      <summary>
            Implicitly converts value, represented in meters, to a <see cref="T:Gemstone.Units.Length" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Inequality(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_LessThan(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_LessThanOrEqual(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Modulus(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Multiply(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.op_Subtraction(Gemstone.Units.Length,Gemstone.Units.Length)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Length" /> object left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Length" /> object right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Length" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or greater than <see cref="F:Gemstone.Units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Length.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or greater than <see cref="F:Gemstone.Units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or greater than <see cref="F:Gemstone.Units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Length.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Length" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Length" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or greater than <see cref="F:Gemstone.Units.Length.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Length.ToFeet">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in feet.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToInches">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in inches.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in inches.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToLightSeconds">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in light-seconds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in light-seconds.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToMiles">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in miles.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToNauticalMiles">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in nautical miles.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in nautical miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToUSSurveyFeet">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in US survey feet.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in US survey feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToUSSurveyMiles">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in US survey miles.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in US survey miles.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.ToYards">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Length" /> value in yards.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Length" /> in yards.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.TryParse(System.String,Gemstone.Units.Length@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Length" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Length" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or greater than <see cref="F:Gemstone.Units.Length.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Length@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Length" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Length" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Length.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Length.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.LengthConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Length" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Length" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.LengthConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.LengthConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.LengthUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Length" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.Meters">
      <summary>
            Meter length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.Feet">
      <summary>
            Foot length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.Inches">
      <summary>
            Inch length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.Miles">
      <summary>
            Mile length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.LightSeconds">
      <summary>
            Light-second length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.USSurveyFeet">
      <summary>
            U.S. survey foot length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.USSurveyMiles">
      <summary>
            U.S. survey mile length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.NauticalMiles">
      <summary>
            Nautical mile length units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.LengthUnit.Yards">
      <summary>
            Yard length units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Mass">
      <summary>
            Represents a mass measurement, in kilograms, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a mass in kilograms; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other mass representations, specifically
            ounces, pounds and tons. Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" />
            conversion factor, for example:
            <example>
            Convert mass, in kilograms, to grams:
            <code>
            public double GetGrams(Mass kilograms)
            {
                return kilograms * SI.Kilo;
            }
            </code>
            This example converts tons to pounds:
            <code>
            public double GetPounds(double tons)
            {
                return Mass.FromTons(tons).ToPounds();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Mass.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" />.
            </summary>
      <param name="value">New mass value in kilograms.</param>
    </member>
    <member name="M:Gemstone.Units.Mass.CompareTo(Gemstone.Units.Mass)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Mass" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Mass" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Mass" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Mass.ConvertFrom(System.Double,Gemstone.Units.MassUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Mass" /> in kilograms.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ConvertTo(Gemstone.Units.MassUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Mass" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Mass" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.Equals(Gemstone.Units.Mass)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Mass" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Mass" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Mass" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromLongTons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in long tons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in long tons.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in long tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromMetricPounds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in metric pounds.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in metric pounds.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in metric pounds.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromMetricTons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in metric tons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in metric tons.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in metric tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromOunces(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in ounces (avoirdupois).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in ounces.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in ounces.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromPounds(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in pounds (avoirdupois).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in pounds.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in pounds.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.FromTons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Mass" /> value from the specified <paramref name="value" /> in short tons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Mass" /> value in short tons.</param>
      <returns>New <see cref="T:Gemstone.Units.Mass" /> object from the specified <paramref name="value" /> in short tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Mass.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Mass" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Mass.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Mass" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Addition(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Division(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Equality(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Exponent(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns result of first value raised to mass of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_GreaterThan(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_GreaterThanOrEqual(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Implicit(Gemstone.Units.Mass)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Mass" />, represented in kilograms, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Mass" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Implicit(System.Double)~Gemstone.Units.Mass">
      <summary>
            Implicitly converts value, represented in kilograms, to a <see cref="T:Gemstone.Units.Mass" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Inequality(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_LessThan(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_LessThanOrEqual(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Modulus(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Multiply(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.op_Subtraction(Gemstone.Units.Mass,Gemstone.Units.Mass)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Mass" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Mass" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Mass" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Mass.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Mass.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Mass" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Mass" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Mass.ToLongTons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in long tons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in long tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToMetricPounds">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in metric pounds.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in metric pounds.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToMetricTons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in metric tons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in metric tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToOunces">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in ounces (avoirdupois).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in ounces.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToPounds">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in pounds (avoirdupois).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in pounds.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Mass.ToTons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Mass" /> value in short tons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Mass" /> in short tons.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.TryParse(System.String,Gemstone.Units.Mass@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Mass" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Mass" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Mass@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Mass" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Mass" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Mass.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Mass.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.MassConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Mass" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Mass" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.MassConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.MassConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.MassConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.MassConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.MassConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.MassConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.MassUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Mass" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.Kilograms">
      <summary>
            Kilogram mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.Ounces">
      <summary>
            Ounce mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.Pounds">
      <summary>
            Pound mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.MetricPounds">
      <summary>
            Metric pound mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.Tons">
      <summary>
            Ton mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.MectricTons">
      <summary>
            Metric ton mass units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.MassUnit.LongTons">
      <summary>
            Long ton mass units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Power">
      <summary>
            Represents a power measurement, in watts, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a power in watts; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other power representations, specifically
            horsepower, metric horsepower, boiler horsepower, BTU per second, calorie per second, and liter-atmosphere
            per second. Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor,
            for example:
            <example>
            Convert power in watts to megawatts:
            <code>
            public double GetMegawatts(Power watts)
            {
                return watts / SI.Mega;
            }
            </code>
            This example converts megawatts to mechanical horsepower:
            <code>
            public double GetHorsepower(double megawatts)
            {
                return (new Power(megawatts * SI.Mega)).ToHorsepower();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Power.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" />.
            </summary>
      <param name="value">New power value in watts.</param>
    </member>
    <member name="M:Gemstone.Units.Power.CompareTo(Gemstone.Units.Power)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Power" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Power" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Power" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Power.ConvertFrom(System.Double,Gemstone.Units.PowerUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Power" /> in watts.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ConvertTo(Gemstone.Units.PowerUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Power" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Power" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.Equals(Gemstone.Units.Power)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Power" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Power" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Power" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromBoilerHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in boiler horsepower.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in boiler horsepower.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in boiler horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromBTUPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in BTU (International Table) per second.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in BTU per second.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in BTU per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromCaloriesPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in calories (International Table) per second.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in calories per second.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in calories per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in mechanical horsepower (Imperial).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in mechanical horsepower.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in mechanical horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromLitersAtmospherePerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in liters-atmosphere per second.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in liters-atmosphere per second.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in liters-atmosphere per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.FromMetricHorsepower(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Power" /> value from the specified <paramref name="value" /> in metric horsepower.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Power" /> value in metric horsepower.</param>
      <returns>New <see cref="T:Gemstone.Units.Power" /> object from the specified <paramref name="value" /> in metric horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Power.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Power" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Power.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Power" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Power.op_Addition(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Division(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Equality(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Exponent(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_GreaterThan(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_GreaterThanOrEqual(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Implicit(Gemstone.Units.Power)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Power" />, represented in watts, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Power" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Implicit(System.Double)~Gemstone.Units.Power">
      <summary>
            Implicitly converts value, represented in watts, to a <see cref="T:Gemstone.Units.Power" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Inequality(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_LessThan(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_LessThanOrEqual(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Modulus(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Multiply(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.op_Subtraction(Gemstone.Units.Power,Gemstone.Units.Power)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Power" /> left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Power" /> right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Power" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or greater than <see cref="F:Gemstone.Units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Power.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or greater than <see cref="F:Gemstone.Units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Power.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or greater than <see cref="F:Gemstone.Units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Power.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Power" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Power" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or greater than <see cref="F:Gemstone.Units.Power.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Power.ToBoilerHorsepower">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in boiler horsepower.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in boiler horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToBTUPerSecond">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in BTU (International Table) per second.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in BTU per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToCaloriesPerSecond">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in calories (International Table) per second.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in calories per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToHorsepower">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in mechanical horsepower (Imperial).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in mechanical horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToLitersAtmospherePerSecond">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in liters-atmosphere per second.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in liters-atmosphere per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToMetricHorsepower">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Power" /> value in metric horsepower.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Power" /> in metric horsepower.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Power.TryParse(System.String,Gemstone.Units.Power@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Power" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Power" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or greater than <see cref="F:Gemstone.Units.Power.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Power.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Power@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Power" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Power" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Power.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Power.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.PowerConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Power" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Power" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.PowerConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.PowerConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.PowerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.PowerConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.PowerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.PowerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.PowerUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Power" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.Watts">
      <summary>
            Watt power units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.Horsepower">
      <summary>
            Horsepower units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.MetricHorsepower">
      <summary>
            Metric horsepower units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.BoilerHorsepower">
      <summary>
            Boiler horsepower units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.BTUPerSecond">
      <summary>
            BTU per second power units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.CaloriesPerSecond">
      <summary>
            Calories per second power units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.PowerUnit.LitersAtmospherePerSecond">
      <summary>
            Liters atmosphere per second power units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.SI">
      <summary>
            Defines constant factors for SI units of measure to handle metric conversions.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Atto">
      <summary>
            SI prefix a, 10^-18
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Centi">
      <summary>
            SI prefix c, 10^-2
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Deca">
      <summary>
            SI prefix da, 10^1
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Deci">
      <summary>
            SI prefix d, 10^-1
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Exa">
      <summary>
            SI prefix E, 10^18
            </summary>
    </member>
    <member name="P:Gemstone.Units.SI.Factors">
      <summary>
            Gets an array of all the defined SI unit factors ordered from least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Femto">
      <summary>
            SI prefix f, 10^-15
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Giga">
      <summary>
            SI prefix G, 10^9
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Hecto">
      <summary>
            SI prefix h, 10^2
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Kilo">
      <summary>
            SI prefix k, 10^3
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Mega">
      <summary>
            SI prefix M, 10^6
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Micro">
      <summary>
            SI prefix µ, 10^-6
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Milli">
      <summary>
            SI prefix m, 10^-3
            </summary>
    </member>
    <member name="P:Gemstone.Units.SI.Names">
      <summary>
            Gets an array of all the defined unit factor SI names ordered from least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Nano">
      <summary>
            SI prefix n, 10^-9
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Peta">
      <summary>
            SI prefix P, 10^15
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Pico">
      <summary>
            SI prefix p, 10^-12
            </summary>
    </member>
    <member name="P:Gemstone.Units.SI.Symbols">
      <summary>
            Gets an array of all the defined unit factor SI prefix symbols ordered from least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Tera">
      <summary>
            SI prefix T, 10^12
            </summary>
    </member>
    <member name="M:Gemstone.Units.SI.ToScaledString(System.Double,System.Int32,System.String,System.String[],System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="decimalPlaces">Number of decimal places to display.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:Gemstone.Units.SI.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />), see <see cref="P:Gemstone.Units.SI.Names" /> or <see cref="P:Gemstone.Units.SI.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimalPlaces" /> cannot be negative.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI.ToScaledString(System.Double,System.String,System.String,System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
        <see cref="P:Gemstone.Units.SI.Symbols" /> array is used for displaying SI symbol prefix for <paramref name="unitName" />.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI.ToScaledString(System.Double,System.String,System.String,System.String[],System.Int32,System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
      <param name="decimalPlaces">Optional number of decimal places to display.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />), see <see cref="P:Gemstone.Units.SI.Names" /> or <see cref="P:Gemstone.Units.SI.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI.ToScaledString(System.Double,System.String,System.String[],System.Double,System.Double)">
      <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:Gemstone.Units.SI.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yocto" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI.Yotta" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI.Yocto" />) to greatest (<see cref="F:Gemstone.Units.SI.Yotta" />), see <see cref="P:Gemstone.Units.SI.Names" /> or <see cref="P:Gemstone.Units.SI.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.</exception>
    </member>
    <member name="F:Gemstone.Units.SI.Yocto">
      <summary>
            SI prefix y, 10^-24
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Yotta">
      <summary>
            SI prefix Y, 10^24
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Zepto">
      <summary>
            SI prefix z, 10^-21
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI.Zetta">
      <summary>
            SI prefix Z, 10^21
            </summary>
    </member>
    <member name="T:Gemstone.Units.SI2">
      <summary>
            Defines constant factors based on 1024 for related binary SI units of measure used in computational measurements.
            </summary>
      <remarks>
            See <a href="http://physics.nist.gov/cuu/Units/binary.html">NIST Reference</a> for information on IEC standard names.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Exa">
      <summary>
            1 exa, binary (E) = 1,152,921,504,606,846,976
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Exbi">
      <summary>
            1 exbi (Ei) = 1,152,921,504,606,846,976
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="P:Gemstone.Units.SI2.Factors">
      <summary>
            Gets an array of all the defined binary SI unit factors ordered from least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI2.Gibi">
      <summary>
            1 gibi (Gi) = 1,073,741,824
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Giga">
      <summary>
            1 giga, binary (G) = 1,073,741,824
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="P:Gemstone.Units.SI2.IECNames">
      <summary>
            Gets an array of all the defined IEC binary unit factor SI names ordered from least (<see cref="F:Gemstone.Units.SI2.Kibi" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exbi" />).
            </summary>
    </member>
    <member name="P:Gemstone.Units.SI2.IECSymbols">
      <summary>
            Gets an array of all the defined IEC binary unit factor SI prefix symbols ordered from least (<see cref="F:Gemstone.Units.SI2.Kibi" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exbi" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI2.Kibi">
      <summary>
            1 kibi (Ki) = 1,024
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Kilo">
      <summary>
            1 kilo, binary (K) = 1,024
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Mebi">
      <summary>
            1 mebi (Mi) = 1,048,576
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Mega">
      <summary>
            1 mega, binary (M) = 1,048,576
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="P:Gemstone.Units.SI2.Names">
      <summary>
            Gets an array of all the defined common binary unit factor SI names ordered from least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI2.Pebi">
      <summary>
            1 pebi (Pi) = 1,125,899,906,842,624
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Peta">
      <summary>
            1 peta, binary (P) = 1,125,899,906,842,624
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="P:Gemstone.Units.SI2.Symbols">
      <summary>
            Gets an array of all the defined common binary unit factor SI prefix symbols ordered from least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />).
            </summary>
    </member>
    <member name="F:Gemstone.Units.SI2.Tebi">
      <summary>
            1 tebi (Ti) = 1,099,511,627,776
            </summary>
      <remarks>
            This is the IEC standard name.
            </remarks>
    </member>
    <member name="F:Gemstone.Units.SI2.Tera">
      <summary>
            1 tera, binary (T) = 1,099,511,627,776
            </summary>
      <remarks>
            This is the common name.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.SI2.ToScaledString(System.Int64,System.Int32,System.String,System.String[],System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="decimalPlaces">Number of decimal places to display.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:Gemstone.Units.SI2.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />), see <see cref="P:Gemstone.Units.SI2.Names" /> or <see cref="P:Gemstone.Units.SI2.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimalPlaces" /> cannot be negative.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI2.ToScaledString(System.Int64,System.String,System.String,System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
        <see cref="P:Gemstone.Units.SI2.Symbols" /> array is used for displaying SI symbol prefix for <paramref name="unitName" />.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI2.ToScaledString(System.Int64,System.String,System.String,System.String[],System.Int32,System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="format">A numeric string format for scaled <paramref name="totalUnits" />.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
      <param name="decimalPlaces">Optional number of decimal places to display.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />), see <see cref="P:Gemstone.Units.SI2.Names" /> or <see cref="P:Gemstone.Units.SI2.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI2.Factors" /> array.</exception>
    </member>
    <member name="M:Gemstone.Units.SI2.ToScaledString(System.Int64,System.String,System.String[],System.Int64,System.Int64)">
      <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
      <param name="totalUnits">Total units to represent textually.</param>
      <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
      <param name="symbolNames">Optional SI factor symbol or name array to use during textual conversion, defaults to <see cref="P:Gemstone.Units.SI2.Symbols" />.</param>
      <param name="minimumFactor">Optional minimum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Kilo" />.</param>
      <param name="maximumFactor">Optional maximum SI factor. Defaults to <see cref="F:Gemstone.Units.SI2.Exa" />.</param>
      <returns>A <see cref="T:System.String" /> representation of the number of units.</returns>
      <remarks>
            The <paramref name="symbolNames" /> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:Gemstone.Units.SI2.Kilo" />) to greatest (<see cref="F:Gemstone.Units.SI2.Exa" />), see <see cref="P:Gemstone.Units.SI2.Names" /> or <see cref="P:Gemstone.Units.SI2.Symbols" />
            arrays for examples.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumFactor" /> or <paramref name="maximumFactor" /> is not defined in <see cref="P:Gemstone.Units.SI2.Factors" /> array.</exception>
    </member>
    <member name="T:Gemstone.Units.Speed">
      <summary>
            Represents a speed measurement, in meters per second, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a speed in meters per second; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other speed representations, specifically
            miles per hour, kilometers per hour, feet per minute, inches per second, knots and Mach.
            <example>
            This example converts mph to km/h:
            <code>
            public double GetKilometersPerHour(double milesPerHour)
            {
                return Speed.FromMilesPerHour(milesPerHour).ToKilometersPerHour();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Speed.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" />.
            </summary>
      <param name="value">New speed value in meters per second.</param>
    </member>
    <member name="M:Gemstone.Units.Speed.CompareTo(Gemstone.Units.Speed)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Speed" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Speed" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Speed" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Speed.ConvertFrom(System.Double,Gemstone.Units.SpeedUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Speed" /> in meters per second.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ConvertTo(Gemstone.Units.SpeedUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Speed" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Speed" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.Equals(Gemstone.Units.Speed)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Speed" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Speed" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Speed" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromFeetPerMinute(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in feet per minute.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in feet per minute.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in feet per minute.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromInchesPerSecond(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in inches per second.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in inches per second.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in inches per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromKilometersPerHour(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in kilometers per hour.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in kilometers per hour.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in kilometers per hour.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromKnots(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in knots (International).
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in knots.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in knots.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromMach(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in Mach.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in Mach.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in Mach.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.FromMilesPerHour(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Speed" /> value from the specified <paramref name="value" /> in miles per hour.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Speed" /> value in miles per hour.</param>
      <returns>New <see cref="T:Gemstone.Units.Speed" /> object from the specified <paramref name="value" /> in miles per hour.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Speed.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Speed" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Speed.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Speed" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Addition(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Division(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Equality(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Exponent(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns result of first value raised to speed of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_GreaterThan(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_GreaterThanOrEqual(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Implicit(Gemstone.Units.Speed)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Speed" />, represented in meters per second, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Speed" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Implicit(System.Double)~Gemstone.Units.Speed">
      <summary>
            Implicitly converts value, represented in meters per second, to a <see cref="T:Gemstone.Units.Speed" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Inequality(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_LessThan(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_LessThanOrEqual(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Modulus(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Multiply(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.op_Subtraction(Gemstone.Units.Speed,Gemstone.Units.Speed)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Speed" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Speed" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Speed" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Speed.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Speed.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Speed.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Speed" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Speed" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Speed.ToFeetPerMinute">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in feet per minute.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in feet per minute.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToInchesPerSecond">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in inches per second.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in inches per second.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToKilometersPerHour">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in kilometers per hour.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in kilometers per hour.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToKnots">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in knots (International).
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in knots.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToMach">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in Mach.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in Mach.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToMilesPerHour">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Speed" /> value in miles per hour.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Speed" /> in miles per hour.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Speed.TryParse(System.String,Gemstone.Units.Speed@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Speed" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Speed" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />.
            This parameter per second is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Speed.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Speed@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Speed" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Speed" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Speed.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Speed.MaxValue" />. This parameter per second is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.SpeedConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Speed" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Speed" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.SpeedConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.SpeedConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.SpeedConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.SpeedConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.SpeedConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.SpeedConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.SpeedUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Speed" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.MetersPerSecond">
      <summary>
            Meters per second speed units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.MilesPerHour">
      <summary>
            Miles per hour speed units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.KilometersPerHour">
      <summary>
            Kilometers per hour speed units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.FeetPerMinute">
      <summary>
            Feet per minute speed units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.InchesPerSecond">
      <summary>
            Inches per second speed units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.Knots">
      <summary>
            Knot speed units, international.
            </summary>
    </member>
    <member name="F:Gemstone.Units.SpeedUnit.Mach">
      <summary>
            Mach speed units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Temperature">
      <summary>
            Represents a temperature, in Kelvin, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a temperature in Kelvin; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other temperature representations, specifically
            Celsius, Fahrenheit, Newton, Rankine, Delisle, Réaumur and Rømer.
            <example>
            This example converts Celsius to Fahrenheit:
            <code>
            public double GetFahrenheit(double celsius)
            {
                return Temperature.FromCelsius(celsius).ToFahrenheit();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Temperature.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" />.
            </summary>
      <param name="value">New temperature value in Kelvin.</param>
    </member>
    <member name="M:Gemstone.Units.Temperature.CompareTo(Gemstone.Units.Temperature)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Temperature" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Temperature" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Temperature" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Temperature.ConvertFrom(System.Double,Gemstone.Units.TemperatureUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Temperature" /> in Kelvin.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ConvertTo(Gemstone.Units.TemperatureUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Temperature" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Temperature" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.Equals(Gemstone.Units.Temperature)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Temperature" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Temperature" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Temperature" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromCelsius(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Celsius.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Celsius.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Celsius.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromDelisle(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Delisle.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Delisle.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Delisle.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromFahrenheit(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Fahrenheit.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Fahrenheit.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Fahrenheit.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromNewton(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Newton.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Newton.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Newton.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromRankine(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Rankine.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Rankine.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Rankine.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromRéaumur(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Réaumur.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Réaumur.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Réaumur.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.FromRømer(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Temperature" /> value from the specified <paramref name="value" /> in Rømer.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Temperature" /> value in Rømer.</param>
      <returns>New <see cref="T:Gemstone.Units.Temperature" /> object from the specified <paramref name="value" /> in Rømer.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Temperature.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:Gemstone.Units.Temperature" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Temperature.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:Gemstone.Units.Temperature" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Addition(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Division(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Equality(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Exponent(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_GreaterThan(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_GreaterThanOrEqual(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Implicit(Gemstone.Units.Temperature)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Temperature" />, represented in Kelvin, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Temperature" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Implicit(System.Double)~Gemstone.Units.Temperature">
      <summary>
            Implicitly converts value, represented in Kelvin, to a <see cref="T:Gemstone.Units.Temperature" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Inequality(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_LessThan(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_LessThanOrEqual(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Modulus(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Multiply(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.op_Subtraction(Gemstone.Units.Temperature,Gemstone.Units.Temperature)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Temperature" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Temperature" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Temperature" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Temperature.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Temperature" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Temperature" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToCelsius">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Celsius.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Celsius.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToDelisle">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Delisle.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Delisle.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToFahrenheit">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Fahrenheit.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Fahrenheit.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToNewton">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Newton.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Newton.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToRankine">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Rankine.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Rankine.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToRéaumur">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Réaumur.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Réaumur.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToRømer">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Temperature" /> value in Rømer.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Temperature" /> in Rømer.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.TryParse(System.String,Gemstone.Units.Temperature@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Temperature" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Temperature" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Temperature@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Temperature" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Temperature" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Temperature.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Temperature.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.TemperatureConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Temperature" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Temperature" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.TemperatureConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.TemperatureConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.TemperatureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.TemperatureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.TemperatureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.TemperatureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.TemperatureUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Temperature" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Kelvin">
      <summary>
            Kelvin temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Celsius">
      <summary>
            Celsius temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Fahrenheit">
      <summary>
            Fahrenheit temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Newton">
      <summary>
            Newton temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Rankine">
      <summary>
            Rankine temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Delisle">
      <summary>
            Delisle temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Réaumur">
      <summary>
            Réaumur temperature units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TemperatureUnit.Rømer">
      <summary>
            Rømer temperature units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Time">
      <summary>
            Represents a time measurement, in seconds, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a time in seconds; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other time representations, specifically
            minutes, hours, days, weeks, atomic units of time, Planck time and ke. Metric conversions are handled
            simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert time in nanoseconds to seconds:
            <code>
            public Time GetSeconds(double nanoseconds)
            {
                return nanoseconds * SI.Nano;
            }
            </code>
            Convert time in seconds to milliseconds:
            <code>
            public double GetMilliseconds(Time seconds)
            {
                return time / SI.Milli;
            }
            </code>
            This example converts minutes to hours:
            <code>
            public double GetHours(double minutes)
            {
                return Time.FromMinutes(minutes).ToHours();
            }
            </code></example><para>
            Note that the <see cref="M:Gemstone.Units.Time.ToString" /> method will convert the <see cref="T:Gemstone.Units.Time" /> value, in seconds,
            into a textual representation of years, days, hours, minutes and seconds using the static function
            <see cref="M:Gemstone.Units.Time.ToElapsedTimeString(System.Double,System.Int32,System.String[],System.Double)" />.
            </para></remarks>
    </member>
    <member name="M:Gemstone.Units.Time.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" />.
            </summary>
      <param name="value">New time value in seconds.</param>
    </member>
    <member name="M:Gemstone.Units.Time.#ctor(System.TimeSpan)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" />.
            </summary>
      <param name="value">New time value as a <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:Gemstone.Units.Time.CompareTo(Gemstone.Units.Time)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Time" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Time" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">An <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Time" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Time.CompareTo(System.TimeSpan)">
      <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.ConvertFrom(System.Double,Gemstone.Units.TimeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Time" /> in seconds.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
      <remarks>
            When converting from <see cref="F:Gemstone.Units.TimeUnit.Ticks" />, precision loss will
            occur for values that are outside the range of -2^52 and 2^52.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.ConvertTo(Gemstone.Units.TimeUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Time" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Time" /> converted to <paramref name="targetUnit" />.</returns>
      <remarks>
            When converting to <see cref="F:Gemstone.Units.TimeUnit.Ticks" />, precision loss will
            occur for values that are outside the range of -2^52 and 2^52.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.Equals(Gemstone.Units.Time)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Time" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Time" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">An <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Time" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.Equals(System.TimeSpan)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.TimeSpan" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromAtomicUnitsOfTime(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in atomic units of time.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in atomic units of time.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in atomic units of time.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromDays(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in days.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in days.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in days.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromHours(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in hours.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in hours.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromKe(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in ke,
            the traditional Chinese unit of decimal time.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in ke.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in ke.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromMinutes(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in minutes.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in minutes.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in minutes.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromPlanckTime(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in Planck time.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in Planck time.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in Planck time.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromTicks(Gemstone.Ticks)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in <see cref="T:Gemstone.Ticks" />.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in Ticks.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in <see cref="T:Gemstone.Ticks" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.FromWeeks(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Time" /> value from the specified <paramref name="value" /> in weeks.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Time" /> value in weeks.</param>
      <returns>New <see cref="T:Gemstone.Units.Time" /> object from the specified <paramref name="value" /> in weeks.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Time.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Time.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:Gemstone.Units.Time" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Time.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:Gemstone.Units.Time" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Time.op_Addition(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Division(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Equality(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Exponent(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns result of first value raised to power of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_GreaterThan(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_GreaterThanOrEqual(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Implicit(Gemstone.Units.Time)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Time" />, represented in seconds, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Time" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Implicit(Gemstone.Units.Time)~System.TimeSpan">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Time" />, represented in seconds, to a <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Time" /> object.</param>
      <returns>A <see cref="T:System.TimeSpan" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Implicit(System.Double)~Gemstone.Units.Time">
      <summary>
            Implicitly converts value, represented in seconds, to a <see cref="T:Gemstone.Units.Time" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Implicit(System.TimeSpan)~Gemstone.Units.Time">
      <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan" />, to a <see cref="T:Gemstone.Units.Time" />.
            </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> object.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Inequality(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_LessThan(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_LessThanOrEqual(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Modulus(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Multiply(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.op_Subtraction(Gemstone.Units.Time,Gemstone.Units.Time)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Time" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Time" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Time" /> object as the result of the operation.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or greater than <see cref="F:Gemstone.Units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Time.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or greater than <see cref="F:Gemstone.Units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Time.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or greater than <see cref="F:Gemstone.Units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Time.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Time" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Time" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or greater than <see cref="F:Gemstone.Units.Time.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="F:Gemstone.Units.Time.SecondsPerDay">
      <summary>
            Number of seconds in one day.
            </summary>
    </member>
    <member name="F:Gemstone.Units.Time.SecondsPerHour">
      <summary>
            Number of seconds in one hour.
            </summary>
    </member>
    <member name="F:Gemstone.Units.Time.SecondsPerMinute">
      <summary>
            Number of seconds in one minute.
            </summary>
    </member>
    <member name="M:Gemstone.Units.Time.SecondsPerMonth(System.Int32,System.Int32)">
      <summary>
            Returns the number of seconds in the specified month and year.
            </summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <returns>
            The number of seconds, as a <see cref="T:Gemstone.Units.Time" />, in the month for the specified year.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Month is less than 1 or greater than 12. -or- year is less than 1 or greater than 9999.
            </exception>
    </member>
    <member name="F:Gemstone.Units.Time.SecondsPerTick">
      <summary>
            Fractional number of seconds in one tick.
            </summary>
    </member>
    <member name="F:Gemstone.Units.Time.SecondsPerWeek">
      <summary>
            Number of seconds in one week.
            </summary>
    </member>
    <member name="M:Gemstone.Units.Time.SecondsPerYear(System.Int32)">
      <summary>
            Returns the number of seconds in the specified year.
            </summary>
      <param name="year">The year.</param>
      <returns>
            The number of seconds in the specified year.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Year is less than 1 or greater than 9999.
            </exception>
    </member>
    <member name="F:Gemstone.Units.Time.TimeNames">
      <summary>
            Standard time names used by <see cref="M:Gemstone.Units.Time.ToElapsedTimeString(System.Double,System.Int32,System.String[],System.Double)" /> method.
            </summary>
    </member>
    <member name="M:Gemstone.Units.Time.ToAtomicUnitsOfTime">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in atomic units of time.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in atomic units of time.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToDays">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in days.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in days.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToElapsedTimeString(System.Double,System.Int32,System.String[],System.Double)">
      <summary>
            Converts total <paramref name="seconds" /> into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="seconds">Seconds to convert to elapsed time.</param>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
        <para>
            Set <paramref name="secondPrecision" /> to -1 to suppress seconds display, this will
            force minimum resolution of time display to minutes.
            </para>
        <para>
          <paramref name="timeNames" /> array needs one string entry for each of the following names:<br />
            " year", " years", " day", " days", " hour", " hours", " minute", " minutes", " second", " seconds", "less than ".
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:Gemstone.Units.Time.ToHours">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in hours.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in hours.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToKe">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in ke, the traditional Chinese unit of decimal time.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in ke.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToMinutes">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in minutes.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in minutes.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToPlanckTime">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in Planck time.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in Planck time.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToString">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
            Note that this ToString overload will not display fractional seconds. To allow display of
            fractional seconds, or completely remove second resolution from the textual representation,
            use the <see cref="M:Gemstone.Units.Time.ToString(System.Int32,System.Double)" /> overload instead.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
      <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.IFormatProvider)" />, use
            <see cref="M:Gemstone.Units.Time.ToString(System.Int32,System.Double)" /> to convert <see cref="T:Gemstone.Units.Time" /> value into a textual
            representation of years, days, hours, minutes and seconds.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.ToString(System.Int32,System.Double)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>Set second precision to -1 to suppress seconds display.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:Gemstone.Units.Time.ToString(System.Int32,System.String[],System.Double)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Time" /> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
      <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
      <param name="timeNames">Time names array to use during textual conversion.</param>
      <param name="minimumSubSecondResolution">
            Minimum sub-second resolution to display. Defaults to <see cref="F:Gemstone.Units.SI.Milli" />.
            </param>
      <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
      <remarks>
        <para>Set second precision to -1 to suppress seconds display.</para>
        <para>
          <paramref name="timeNames" /> array needs one string entry for each of the following names:<br />
            " year", " years", " day", " days", " hour", " hours", " minute", " minutes", " second", " seconds", "less than ".
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minimumSubSecondResolution" /> is not less than or equal to <see cref="F:Gemstone.Units.SI.Milli" /> or
            <paramref name="minimumSubSecondResolution" /> is not defined in <see cref="P:Gemstone.Units.SI.Factors" /> array.
            </exception>
    </member>
    <member name="M:Gemstone.Units.Time.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
      <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.String)" />, use
            <see cref="M:Gemstone.Units.Time.ToString(System.Int32,System.Double)" /> to convert <see cref="T:Gemstone.Units.Time" /> value into a textual
            representation of years, days, hours, minutes and seconds.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
      <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)" />, use
            <see cref="M:Gemstone.Units.Time.ToString(System.Int32,System.Double)" /> to convert <see cref="T:Gemstone.Units.Time" /> value into a textual representation
            of years, days, hours, minutes and seconds.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.Time.ToTicks">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Time" /> value, in seconds, to 100-nanosecond tick intervals.
            </summary>
      <returns>A <see cref="T:Gemstone.Ticks" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.ToWeeks">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Time" /> value in weeks.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Time" /> in weeks.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.TryParse(System.String,Gemstone.Units.Time@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Time" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Time" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or greater than <see cref="F:Gemstone.Units.Time.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Time.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Time@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Time" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Time" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Time.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Time.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.TimeConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Time" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Time" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.TimeConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.TimeConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.TimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.TimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.TimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.TimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.TimeUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Time" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Seconds">
      <summary>
            Second time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Minutes">
      <summary>
            Minute time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Hours">
      <summary>
            Hour time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Days">
      <summary>
            Day time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Weeks">
      <summary>
            Week time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Ticks">
      <summary>
            Tick time units, 100-nanosecond intervals since 1/1/0001.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.AtomicUnitsOfTime">
      <summary>
            Atomic time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.PlanckTime">
      <summary>
            Planck time units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.TimeUnit.Ke">
      <summary>
            Ke time units, traditional Chinese unit of decimal time.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Voltage">
      <summary>
            Represents an electromotive force (i.e., voltage) measurement, in volts, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a voltage in volts; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other voltage representations, specifically
            abvolt and statvolt. Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" />
            conversion factor, for example:
            <example>
            Convert volts to megavolts:
            <code>
            public double GetMegavolts(Voltage volts)
            {
                return volts / SI.Mega;
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Voltage.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Voltage" />.
            </summary>
      <param name="value">New voltage value in volts.</param>
    </member>
    <member name="M:Gemstone.Units.Voltage.CompareTo(Gemstone.Units.Voltage)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Voltage" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Voltage" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Voltage" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Voltage.ConvertFrom(System.Double,Gemstone.Units.VoltageUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Voltage" /> in volts.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Voltage" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ConvertTo(Gemstone.Units.VoltageUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Voltage" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Voltage" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.Equals(Gemstone.Units.Voltage)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Voltage" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Voltage" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Voltage" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.FromAbvolts(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Voltage" /> value from the specified <paramref name="value" /> in abvolts.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Voltage" /> value in abvolts.</param>
      <returns>New <see cref="T:Gemstone.Units.Voltage" /> object from the specified <paramref name="value" /> in abvolts.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.FromStatvolts(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Voltage" /> value from the specified <paramref name="value" /> in statvolts.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Voltage" /> value in statvolts.</param>
      <returns>New <see cref="T:Gemstone.Units.Voltage" /> object from the specified <paramref name="value" /> in statvolts.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Voltage.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Voltage" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Voltage.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Voltage" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Addition(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Division(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Equality(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Exponent(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns result of first value raised to voltage of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_GreaterThan(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_GreaterThanOrEqual(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Implicit(Gemstone.Units.Voltage)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Voltage" />, represented in volts, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Voltage" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Implicit(System.Double)~Gemstone.Units.Voltage">
      <summary>
            Implicitly converts value, represented in volts, to a <see cref="T:Gemstone.Units.Voltage" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Inequality(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_LessThan(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_LessThanOrEqual(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Modulus(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Multiply(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.op_Subtraction(Gemstone.Units.Voltage,Gemstone.Units.Voltage)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Voltage" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Voltage" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Voltage" /> as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Voltage.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Voltage" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Voltage" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToAbvolts">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Voltage" /> value in abvolts.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Voltage" /> in abvolts.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToStatvolts">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Voltage" /> value in statvolts.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Voltage" /> in statvolts.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.TryParse(System.String,Gemstone.Units.Voltage@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Voltage" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Voltage" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Voltage.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Voltage@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Voltage" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Voltage" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Voltage.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Voltage.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.VoltageConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Voltage" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Voltage" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.VoltageConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.VoltageConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.VoltageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.VoltageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.VoltageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.VoltageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.VoltageUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Voltage" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VoltageUnit.Volts">
      <summary>
            Voltage units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VoltageUnit.Abvolts">
      <summary>
            Abvoltage units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VoltageUnit.Statvolts">
      <summary>
            Statvoltage units.
            </summary>
    </member>
    <member name="T:Gemstone.Units.Volume">
      <summary>
            Represents a volume measurement, in cubic meters, as a double-precision floating-point number.
            </summary>
      <remarks>
            This class behaves just like a <see cref="T:System.Double" /> representing a volume in cubic meters; it is implicitly
            castable to and from a <see cref="T:System.Double" /> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other volume representations, specifically
            liters, teaspoons, tablespoons, cubic inches, fluid ounces, cups, pints, quarts, gallons and cubic feet.
            Metric conversions are handled simply by applying the needed <see cref="T:Gemstone.Units.SI" /> conversion factor, for example:
            <example>
            Convert volume, in cubic meters, to cubic kilometers:
            <code>
            public double GetCubicKilometers(Volume cubicmeters)
            {
                return cubicmeters / SI.Kilo;
            }
            </code>
            This example converts teaspoons to cups:
            <code>
            public double GetCups(double teaspoons)
            {
                return Volume.FromTeaspoons(teaspoons).ToCups();
            }
            </code>
            This example converts liters to fluid ounces:
            <code>
            public double GetFluidOunces(double liters)
            {
                return Volume.FromLiters(liters).ToFluidOunces();
            }
            </code></example></remarks>
    </member>
    <member name="M:Gemstone.Units.Volume.#ctor(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" />.
            </summary>
      <param name="value">New volume value in cubic meters.</param>
    </member>
    <member name="M:Gemstone.Units.Volume.CompareTo(Gemstone.Units.Volume)">
      <summary>
            Compares this instance to a specified <see cref="T:Gemstone.Units.Volume" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Volume" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.CompareTo(System.Double)">
      <summary>
            Compares this instance to a specified <see cref="T:System.Double" /> and returns an indication of their
            relative values.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> to compare.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
      <param name="value">An object to compare, or null.</param>
      <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
      <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Volume" />.</exception>
    </member>
    <member name="M:Gemstone.Units.Volume.ConvertFrom(System.Double,Gemstone.Units.VolumeUnit)">
      <summary>
            Converts the <paramref name="value" /> in the specified <paramref name="sourceUnit" /> to a new <see cref="T:Gemstone.Units.Volume" /> in cubic meters.
            </summary>
      <param name="value">Source value.</param>
      <param name="sourceUnit">Source value units.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> from the specified <paramref name="value" /> in <paramref name="sourceUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ConvertTo(Gemstone.Units.VolumeUnit)">
      <summary>
            Converts the <see cref="T:Gemstone.Units.Volume" /> to the specified <paramref name="targetUnit" />.
            </summary>
      <param name="targetUnit">Target units.</param>
      <returns>
        <see cref="T:Gemstone.Units.Volume" /> converted to <paramref name="targetUnit" />.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.Equals(Gemstone.Units.Volume)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Gemstone.Units.Volume" /> value.
            </summary>
      <param name="obj">A <see cref="T:Gemstone.Units.Volume" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.Equals(System.Double)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double" /> value.
            </summary>
      <param name="obj">A <see cref="T:System.Double" /> value to compare to this instance.</param>
      <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare, or null.</param>
      <returns>
            True if obj is an instance of <see cref="T:System.Double" /> or <see cref="T:Gemstone.Units.Volume" /> and equals the value of this instance;
            otherwise, False.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromCubicFeet(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in cubic feet.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in cubic feet.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in cubic feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromCubicInches(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in cubic inches.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in cubic inches.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in cubic inches.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromCups(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US cups.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US cups.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US cups.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromFluidOunces(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US fluid ounces.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US fluid ounces.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US fluid ounces.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromGallons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US fluid gallons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US fluid gallons.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US fluid gallons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromLiters(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in liters.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in liters.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in liters.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromMetricCups(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in metric cups.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in metric cups.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in metric cups.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromMetricTablespoons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in metric tablespoons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in metric tablespoons.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in metric tablespoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromMetricTeaspoons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in metric teaspoons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in metric teaspoons.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in metric teaspoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromPints(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US fluid pints.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US fluid pints.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US fluid pints.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromQuarts(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US fluid quarts.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US fluid quarts.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US fluid quarts.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromTablespoons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US tablespoons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US tablespoons.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US tablespoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.FromTeaspoons(System.Double)">
      <summary>
            Creates a new <see cref="T:Gemstone.Units.Volume" /> value from the specified <paramref name="value" /> in US teaspoons.
            </summary>
      <param name="value">New <see cref="T:Gemstone.Units.Volume" /> value in US teaspoons.</param>
      <returns>New <see cref="T:Gemstone.Units.Volume" /> object from the specified <paramref name="value" /> in US teaspoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.
            </summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="F:Gemstone.Units.Volume.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:Gemstone.Units.Volume" />. This field is constant.</summary>
    </member>
    <member name="F:Gemstone.Units.Volume.MinValue">
      <summary>Represents the smallest possible value of an <see cref="T:Gemstone.Units.Volume" />. This field is constant.</summary>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Addition(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns computed sum of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Division(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns computed division of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Equality(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Compares the two values for equality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Exponent(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns result of first value raised to volume of second value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Double" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_GreaterThan(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns true if left value is greater than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_GreaterThanOrEqual(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Implicit(Gemstone.Units.Volume)~System.Double">
      <summary>
            Implicitly converts <see cref="T:Gemstone.Units.Volume" />, represented in cubic meters, to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">A <see cref="T:Gemstone.Units.Volume" /> object.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Implicit(System.Double)~Gemstone.Units.Volume">
      <summary>
            Implicitly converts value, represented in cubic meters, to a <see cref="T:Gemstone.Units.Volume" />.
            </summary>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Inequality(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Compares the two values for inequality.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_LessThan(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns true if left value is less than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_LessThanOrEqual(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:System.Boolean" /> value as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Modulus(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Multiply(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns computed product of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.op_Subtraction(Gemstone.Units.Volume,Gemstone.Units.Volume)">
      <summary>
            Returns computed difference of values.
            </summary>
      <param name="value1">A <see cref="T:Gemstone.Units.Volume" /> object as the left hand operand.</param>
      <param name="value2">A <see cref="T:Gemstone.Units.Volume" /> object as the right hand operand.</param>
      <returns>A <see cref="T:Gemstone.Units.Volume" /> object as the result.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.Parse(System.String)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
            A <see cref="T:Gemstone.Units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Volume.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:Gemstone.Units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Gemstone.Units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
    </member>
    <member name="M:Gemstone.Units.Volume.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:Gemstone.Units.Volume" /> equivalent.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about s.
            </param>
      <returns>
            A <see cref="T:Gemstone.Units.Volume" /> equivalent to the number contained in s.
            </returns>
      <exception cref="T:System.ArgumentNullException">s is null.</exception>
      <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />.
            </exception>
      <exception cref="T:System.FormatException">s is not in the correct format.</exception>
    </member>
    <member name="M:Gemstone.Units.Volume.ToCubicFeet">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in cubic feet.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in cubic feet.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToCubicInches">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in cubic inches.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in cubic inches.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToCups">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US cups.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US cups.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToFluidOunces">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US fluid ounces.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US fluid ounces.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToGallons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US fluid gallons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US fluid gallons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToLiters">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in liters.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in liters.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToMetricCups">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in metric cups.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in metric cups.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToMetricTablespoons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in metric tablespoons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in metric tablespoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToMetricTeaspoons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in metric teaspoons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in metric teaspoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToPints">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US fluid pints.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US fluid pints.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToQuarts">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US fluid quarts.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US fluid quarts.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToString">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
      <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeros.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToString(System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToString(System.String)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
      <param name="format">A format string.</param>
      <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
      <param name="format">A format specification.</param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.
            </param>
      <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToTablespoons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US tablespoons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US tablespoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.ToTeaspoons">
      <summary>
            Gets the <see cref="T:Gemstone.Units.Volume" /> value in US teaspoons.
            </summary>
      <returns>Value of <see cref="T:Gemstone.Units.Volume" /> in US teaspoons.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.TryParse(System.String,Gemstone.Units.Volume@)">
      <summary>
            Converts the string representation of a number to its <see cref="T:Gemstone.Units.Volume" /> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Volume" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />.
            This parameter is passed uninitialized.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.Units.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gemstone.Units.Volume@)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:Gemstone.Units.Volume" /> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
      <param name="result">
            When this method returns, contains the <see cref="T:Gemstone.Units.Volume" /> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:Gemstone.Units.Volume.MinValue" /> or
            greater than <see cref="F:Gemstone.Units.Volume.MaxValue" />. This parameter is passed uninitialized.
            </param>
      <param name="provider">
            A <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about s.
            </param>
      <returns>true if s was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
    </member>
    <member name="T:Gemstone.Units.VolumeConverter">
      <summary>
            Provides a type converter to convert <see cref="T:Gemstone.Units.Volume" /> values to and from various other representations.
            </summary>
      <remarks>
            Since <see cref="T:Gemstone.Units.Volume" /> reports a type code of <see cref="F:System.TypeCode.Double" />, the converter will convert
            to and from <c>double</c> values as well as other types supported by <see cref="T:System.ComponentModel.DoubleConverter" />.
            </remarks>
    </member>
    <member name="M:Gemstone.Units.VolumeConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Gemstone.Units.VolumeConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Gemstone.Units.VolumeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type from which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.VolumeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <see langword="true" /> if this converter can perform the operation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Gemstone.Units.VolumeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> is not a valid value for the target type.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="M:Gemstone.Units.VolumeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the number.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    </member>
    <member name="T:Gemstone.Units.VolumeUnit">
      <summary>
            Represents the units available for a <see cref="T:Gemstone.Units.Volume" /> value.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.CubicMeters">
      <summary>
            Cubic meter volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Liters">
      <summary>
            Liter volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Teaspoons">
      <summary>
            Teaspoon volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.MetricTeaspoons">
      <summary>
            Metric teaspoon volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Tablespoons">
      <summary>
            Tablespoon volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.MetricTablespoons">
      <summary>
            Metric tablespoon volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Cups">
      <summary>
            Cup volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.MetricCups">
      <summary>
            Metric cup volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.FluidOunces">
      <summary>
            Fluid ounce volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Pints">
      <summary>
            Pint volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Quarts">
      <summary>
            Quart volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.Gallons">
      <summary>
            Gallon volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.CubicInches">
      <summary>
            Cubic inch volume units.
            </summary>
    </member>
    <member name="F:Gemstone.Units.VolumeUnit.CubicFeet">
      <summary>
            Cubic feet volume units.
            </summary>
    </member>
    <member name="T:Gemstone.WordExtensions.WordExtensions">
      <summary>
            Defines extension functions related to 16-bit words, 32-bit double-words and 64-bit quad-words.
            </summary>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignDoubleWord(System.Int32)">
      <summary>
            Aligns double-word length value to a 32-bit boundary.
            </summary>
      <param name="doubleWord">Double-word value to align.</param>
      <returns>Double-word value aligned to next 32-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignDoubleWord(System.UInt32)">
      <summary>
            Aligns double-word length value to a 32-bit boundary.
            </summary>
      <param name="doubleWord">Double-word value to align.</param>
      <returns>Double-word value aligned to next 32-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignQuadWord(System.Int64)">
      <summary>
            Aligns quad-word length value to a 64-bit boundary.
            </summary>
      <param name="quadWord">Quad-word value to align.</param>
      <returns>Quad-word value aligned to next 64-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignQuadWord(System.UInt64)">
      <summary>
            Aligns quad-word length value to a 64-bit boundary.
            </summary>
      <param name="quadWord">Quad-word value to align.</param>
      <returns>Quad-word value aligned to next 64-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignWord(System.Int16)">
      <summary>
            Aligns word length value to a 16-bit boundary.
            </summary>
      <param name="word">Word value to align.</param>
      <returns>Word value aligned to next 16-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignWord(System.UInt16)">
      <summary>
            Aligns word length value to a 16-bit boundary.
            </summary>
      <param name="word">Word value to align.</param>
      <returns>Word value aligned to next 16-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighByte(System.UInt16)">
      <summary>
            Returns the high-byte from an unsigned word (UInt16).
            </summary>
      <param name="word">2-byte, 16-bit unsigned integer value.</param>
      <returns>The high-order byte of the specified 16-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the byte value whose in-memory representation
            is the same as the right-most, most-significant-byte of the integer value.
            </remarks>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighDoubleWord(System.UInt64)">
      <summary>
            Returns the unsigned high-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
      <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
      <returns>The high-order double-word of the specified 64-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the right-most, most-significant-word
            of the integer value.
            </remarks>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighNibble(System.Byte)">
      <summary>
            Returns the high-nibble (high 4-bits) from a byte.
            </summary>
      <param name="value">Byte value.</param>
      <returns>The high-nibble of the specified byte value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighWord(System.UInt32)">
      <summary>
            Returns the unsigned high-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
      <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
      <returns>The unsigned high-order word of the specified 32-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the right-most, most-significant-word
            of the integer value.
            </remarks>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowByte(System.UInt16)">
      <summary>
            Returns the low-byte from an unsigned word (UInt16).
            </summary>
      <param name="word">2-byte, 16-bit unsigned integer value.</param>
      <returns>The low-order byte of the specified 16-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the byte value
            whose in-memory representation is the same as the left-most, least-significant-byte
            of the integer value.
            </remarks>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowDoubleWord(System.UInt64)">
      <summary>
            Returns the unsigned low-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
      <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
      <returns>The low-order double-word of the specified 64-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the left-most, least-significant-word
            of the integer value.
            </remarks>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowNibble(System.Byte)">
      <summary>
            Returns the low-nibble (low 4-bits) from a byte.
            </summary>
      <param name="value">Byte value.</param>
      <returns>The low-nibble of the specified byte value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowWord(System.UInt32)">
      <summary>
            Returns the unsigned low-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
      <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
      <returns>The unsigned low-order word of the specified 32-bit unsigned integer value.</returns>
      <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the left-most, least-significant-word
            of the integer value.
            </remarks>
    </member>
  </members>
</doc>